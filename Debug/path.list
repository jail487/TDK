
path.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d7c  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08007f54  08007f54  00017f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f94  08007f94  000201cc  2**0
                  CONTENTS
  4 .ARM          00000008  08007f94  08007f94  00017f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f9c  08007f9c  000201cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08007f9c  08007f9c  00017f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007fa4  08007fa4  00017fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  20000000  08007fa8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000578  200001cc  08008174  000201cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000744  08008174  00020744  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cf5e  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000320f  00000000  00000000  0003d15a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015b0  00000000  00000000  00040370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001498  00000000  00000000  00041920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000047a1  00000000  00000000  00042db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019118  00000000  00000000  00047559  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5ced  00000000  00000000  00060671  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014635e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e94  00000000  00000000  001463b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001cc 	.word	0x200001cc
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007f3c 	.word	0x08007f3c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001d0 	.word	0x200001d0
 8000214:	08007f3c 	.word	0x08007f3c

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__gedf2>:
 8000590:	f04f 3cff 	mov.w	ip, #4294967295
 8000594:	e006      	b.n	80005a4 <__cmpdf2+0x4>
 8000596:	bf00      	nop

08000598 <__ledf2>:
 8000598:	f04f 0c01 	mov.w	ip, #1
 800059c:	e002      	b.n	80005a4 <__cmpdf2+0x4>
 800059e:	bf00      	nop

080005a0 <__cmpdf2>:
 80005a0:	f04f 0c01 	mov.w	ip, #1
 80005a4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80005a8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005b4:	bf18      	it	ne
 80005b6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80005ba:	d01b      	beq.n	80005f4 <__cmpdf2+0x54>
 80005bc:	b001      	add	sp, #4
 80005be:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80005c2:	bf0c      	ite	eq
 80005c4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80005c8:	ea91 0f03 	teqne	r1, r3
 80005cc:	bf02      	ittt	eq
 80005ce:	ea90 0f02 	teqeq	r0, r2
 80005d2:	2000      	moveq	r0, #0
 80005d4:	4770      	bxeq	lr
 80005d6:	f110 0f00 	cmn.w	r0, #0
 80005da:	ea91 0f03 	teq	r1, r3
 80005de:	bf58      	it	pl
 80005e0:	4299      	cmppl	r1, r3
 80005e2:	bf08      	it	eq
 80005e4:	4290      	cmpeq	r0, r2
 80005e6:	bf2c      	ite	cs
 80005e8:	17d8      	asrcs	r0, r3, #31
 80005ea:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80005ee:	f040 0001 	orr.w	r0, r0, #1
 80005f2:	4770      	bx	lr
 80005f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005fc:	d102      	bne.n	8000604 <__cmpdf2+0x64>
 80005fe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000602:	d107      	bne.n	8000614 <__cmpdf2+0x74>
 8000604:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000608:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800060c:	d1d6      	bne.n	80005bc <__cmpdf2+0x1c>
 800060e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000612:	d0d3      	beq.n	80005bc <__cmpdf2+0x1c>
 8000614:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop

0800061c <__aeabi_cdrcmple>:
 800061c:	4684      	mov	ip, r0
 800061e:	4610      	mov	r0, r2
 8000620:	4662      	mov	r2, ip
 8000622:	468c      	mov	ip, r1
 8000624:	4619      	mov	r1, r3
 8000626:	4663      	mov	r3, ip
 8000628:	e000      	b.n	800062c <__aeabi_cdcmpeq>
 800062a:	bf00      	nop

0800062c <__aeabi_cdcmpeq>:
 800062c:	b501      	push	{r0, lr}
 800062e:	f7ff ffb7 	bl	80005a0 <__cmpdf2>
 8000632:	2800      	cmp	r0, #0
 8000634:	bf48      	it	mi
 8000636:	f110 0f00 	cmnmi.w	r0, #0
 800063a:	bd01      	pop	{r0, pc}

0800063c <__aeabi_dcmpeq>:
 800063c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000640:	f7ff fff4 	bl	800062c <__aeabi_cdcmpeq>
 8000644:	bf0c      	ite	eq
 8000646:	2001      	moveq	r0, #1
 8000648:	2000      	movne	r0, #0
 800064a:	f85d fb08 	ldr.w	pc, [sp], #8
 800064e:	bf00      	nop

08000650 <__aeabi_dcmplt>:
 8000650:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000654:	f7ff ffea 	bl	800062c <__aeabi_cdcmpeq>
 8000658:	bf34      	ite	cc
 800065a:	2001      	movcc	r0, #1
 800065c:	2000      	movcs	r0, #0
 800065e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000662:	bf00      	nop

08000664 <__aeabi_dcmple>:
 8000664:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000668:	f7ff ffe0 	bl	800062c <__aeabi_cdcmpeq>
 800066c:	bf94      	ite	ls
 800066e:	2001      	movls	r0, #1
 8000670:	2000      	movhi	r0, #0
 8000672:	f85d fb08 	ldr.w	pc, [sp], #8
 8000676:	bf00      	nop

08000678 <__aeabi_dcmpge>:
 8000678:	f84d ed08 	str.w	lr, [sp, #-8]!
 800067c:	f7ff ffce 	bl	800061c <__aeabi_cdrcmple>
 8000680:	bf94      	ite	ls
 8000682:	2001      	movls	r0, #1
 8000684:	2000      	movhi	r0, #0
 8000686:	f85d fb08 	ldr.w	pc, [sp], #8
 800068a:	bf00      	nop

0800068c <__aeabi_dcmpgt>:
 800068c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000690:	f7ff ffc4 	bl	800061c <__aeabi_cdrcmple>
 8000694:	bf34      	ite	cc
 8000696:	2001      	movcc	r0, #1
 8000698:	2000      	movcs	r0, #0
 800069a:	f85d fb08 	ldr.w	pc, [sp], #8
 800069e:	bf00      	nop

080006a0 <__aeabi_uldivmod>:
 80006a0:	b953      	cbnz	r3, 80006b8 <__aeabi_uldivmod+0x18>
 80006a2:	b94a      	cbnz	r2, 80006b8 <__aeabi_uldivmod+0x18>
 80006a4:	2900      	cmp	r1, #0
 80006a6:	bf08      	it	eq
 80006a8:	2800      	cmpeq	r0, #0
 80006aa:	bf1c      	itt	ne
 80006ac:	f04f 31ff 	movne.w	r1, #4294967295
 80006b0:	f04f 30ff 	movne.w	r0, #4294967295
 80006b4:	f000 b974 	b.w	80009a0 <__aeabi_idiv0>
 80006b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80006bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006c0:	f000 f806 	bl	80006d0 <__udivmoddi4>
 80006c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006cc:	b004      	add	sp, #16
 80006ce:	4770      	bx	lr

080006d0 <__udivmoddi4>:
 80006d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006d4:	9d08      	ldr	r5, [sp, #32]
 80006d6:	4604      	mov	r4, r0
 80006d8:	468e      	mov	lr, r1
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d14d      	bne.n	800077a <__udivmoddi4+0xaa>
 80006de:	428a      	cmp	r2, r1
 80006e0:	4694      	mov	ip, r2
 80006e2:	d969      	bls.n	80007b8 <__udivmoddi4+0xe8>
 80006e4:	fab2 f282 	clz	r2, r2
 80006e8:	b152      	cbz	r2, 8000700 <__udivmoddi4+0x30>
 80006ea:	fa01 f302 	lsl.w	r3, r1, r2
 80006ee:	f1c2 0120 	rsb	r1, r2, #32
 80006f2:	fa20 f101 	lsr.w	r1, r0, r1
 80006f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80006fa:	ea41 0e03 	orr.w	lr, r1, r3
 80006fe:	4094      	lsls	r4, r2
 8000700:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000704:	0c21      	lsrs	r1, r4, #16
 8000706:	fbbe f6f8 	udiv	r6, lr, r8
 800070a:	fa1f f78c 	uxth.w	r7, ip
 800070e:	fb08 e316 	mls	r3, r8, r6, lr
 8000712:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000716:	fb06 f107 	mul.w	r1, r6, r7
 800071a:	4299      	cmp	r1, r3
 800071c:	d90a      	bls.n	8000734 <__udivmoddi4+0x64>
 800071e:	eb1c 0303 	adds.w	r3, ip, r3
 8000722:	f106 30ff 	add.w	r0, r6, #4294967295
 8000726:	f080 811f 	bcs.w	8000968 <__udivmoddi4+0x298>
 800072a:	4299      	cmp	r1, r3
 800072c:	f240 811c 	bls.w	8000968 <__udivmoddi4+0x298>
 8000730:	3e02      	subs	r6, #2
 8000732:	4463      	add	r3, ip
 8000734:	1a5b      	subs	r3, r3, r1
 8000736:	b2a4      	uxth	r4, r4
 8000738:	fbb3 f0f8 	udiv	r0, r3, r8
 800073c:	fb08 3310 	mls	r3, r8, r0, r3
 8000740:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000744:	fb00 f707 	mul.w	r7, r0, r7
 8000748:	42a7      	cmp	r7, r4
 800074a:	d90a      	bls.n	8000762 <__udivmoddi4+0x92>
 800074c:	eb1c 0404 	adds.w	r4, ip, r4
 8000750:	f100 33ff 	add.w	r3, r0, #4294967295
 8000754:	f080 810a 	bcs.w	800096c <__udivmoddi4+0x29c>
 8000758:	42a7      	cmp	r7, r4
 800075a:	f240 8107 	bls.w	800096c <__udivmoddi4+0x29c>
 800075e:	4464      	add	r4, ip
 8000760:	3802      	subs	r0, #2
 8000762:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000766:	1be4      	subs	r4, r4, r7
 8000768:	2600      	movs	r6, #0
 800076a:	b11d      	cbz	r5, 8000774 <__udivmoddi4+0xa4>
 800076c:	40d4      	lsrs	r4, r2
 800076e:	2300      	movs	r3, #0
 8000770:	e9c5 4300 	strd	r4, r3, [r5]
 8000774:	4631      	mov	r1, r6
 8000776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800077a:	428b      	cmp	r3, r1
 800077c:	d909      	bls.n	8000792 <__udivmoddi4+0xc2>
 800077e:	2d00      	cmp	r5, #0
 8000780:	f000 80ef 	beq.w	8000962 <__udivmoddi4+0x292>
 8000784:	2600      	movs	r6, #0
 8000786:	e9c5 0100 	strd	r0, r1, [r5]
 800078a:	4630      	mov	r0, r6
 800078c:	4631      	mov	r1, r6
 800078e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000792:	fab3 f683 	clz	r6, r3
 8000796:	2e00      	cmp	r6, #0
 8000798:	d14a      	bne.n	8000830 <__udivmoddi4+0x160>
 800079a:	428b      	cmp	r3, r1
 800079c:	d302      	bcc.n	80007a4 <__udivmoddi4+0xd4>
 800079e:	4282      	cmp	r2, r0
 80007a0:	f200 80f9 	bhi.w	8000996 <__udivmoddi4+0x2c6>
 80007a4:	1a84      	subs	r4, r0, r2
 80007a6:	eb61 0303 	sbc.w	r3, r1, r3
 80007aa:	2001      	movs	r0, #1
 80007ac:	469e      	mov	lr, r3
 80007ae:	2d00      	cmp	r5, #0
 80007b0:	d0e0      	beq.n	8000774 <__udivmoddi4+0xa4>
 80007b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80007b6:	e7dd      	b.n	8000774 <__udivmoddi4+0xa4>
 80007b8:	b902      	cbnz	r2, 80007bc <__udivmoddi4+0xec>
 80007ba:	deff      	udf	#255	; 0xff
 80007bc:	fab2 f282 	clz	r2, r2
 80007c0:	2a00      	cmp	r2, #0
 80007c2:	f040 8092 	bne.w	80008ea <__udivmoddi4+0x21a>
 80007c6:	eba1 010c 	sub.w	r1, r1, ip
 80007ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007ce:	fa1f fe8c 	uxth.w	lr, ip
 80007d2:	2601      	movs	r6, #1
 80007d4:	0c20      	lsrs	r0, r4, #16
 80007d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80007da:	fb07 1113 	mls	r1, r7, r3, r1
 80007de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007e2:	fb0e f003 	mul.w	r0, lr, r3
 80007e6:	4288      	cmp	r0, r1
 80007e8:	d908      	bls.n	80007fc <__udivmoddi4+0x12c>
 80007ea:	eb1c 0101 	adds.w	r1, ip, r1
 80007ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80007f2:	d202      	bcs.n	80007fa <__udivmoddi4+0x12a>
 80007f4:	4288      	cmp	r0, r1
 80007f6:	f200 80cb 	bhi.w	8000990 <__udivmoddi4+0x2c0>
 80007fa:	4643      	mov	r3, r8
 80007fc:	1a09      	subs	r1, r1, r0
 80007fe:	b2a4      	uxth	r4, r4
 8000800:	fbb1 f0f7 	udiv	r0, r1, r7
 8000804:	fb07 1110 	mls	r1, r7, r0, r1
 8000808:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800080c:	fb0e fe00 	mul.w	lr, lr, r0
 8000810:	45a6      	cmp	lr, r4
 8000812:	d908      	bls.n	8000826 <__udivmoddi4+0x156>
 8000814:	eb1c 0404 	adds.w	r4, ip, r4
 8000818:	f100 31ff 	add.w	r1, r0, #4294967295
 800081c:	d202      	bcs.n	8000824 <__udivmoddi4+0x154>
 800081e:	45a6      	cmp	lr, r4
 8000820:	f200 80bb 	bhi.w	800099a <__udivmoddi4+0x2ca>
 8000824:	4608      	mov	r0, r1
 8000826:	eba4 040e 	sub.w	r4, r4, lr
 800082a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800082e:	e79c      	b.n	800076a <__udivmoddi4+0x9a>
 8000830:	f1c6 0720 	rsb	r7, r6, #32
 8000834:	40b3      	lsls	r3, r6
 8000836:	fa22 fc07 	lsr.w	ip, r2, r7
 800083a:	ea4c 0c03 	orr.w	ip, ip, r3
 800083e:	fa20 f407 	lsr.w	r4, r0, r7
 8000842:	fa01 f306 	lsl.w	r3, r1, r6
 8000846:	431c      	orrs	r4, r3
 8000848:	40f9      	lsrs	r1, r7
 800084a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800084e:	fa00 f306 	lsl.w	r3, r0, r6
 8000852:	fbb1 f8f9 	udiv	r8, r1, r9
 8000856:	0c20      	lsrs	r0, r4, #16
 8000858:	fa1f fe8c 	uxth.w	lr, ip
 800085c:	fb09 1118 	mls	r1, r9, r8, r1
 8000860:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000864:	fb08 f00e 	mul.w	r0, r8, lr
 8000868:	4288      	cmp	r0, r1
 800086a:	fa02 f206 	lsl.w	r2, r2, r6
 800086e:	d90b      	bls.n	8000888 <__udivmoddi4+0x1b8>
 8000870:	eb1c 0101 	adds.w	r1, ip, r1
 8000874:	f108 3aff 	add.w	sl, r8, #4294967295
 8000878:	f080 8088 	bcs.w	800098c <__udivmoddi4+0x2bc>
 800087c:	4288      	cmp	r0, r1
 800087e:	f240 8085 	bls.w	800098c <__udivmoddi4+0x2bc>
 8000882:	f1a8 0802 	sub.w	r8, r8, #2
 8000886:	4461      	add	r1, ip
 8000888:	1a09      	subs	r1, r1, r0
 800088a:	b2a4      	uxth	r4, r4
 800088c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000890:	fb09 1110 	mls	r1, r9, r0, r1
 8000894:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000898:	fb00 fe0e 	mul.w	lr, r0, lr
 800089c:	458e      	cmp	lr, r1
 800089e:	d908      	bls.n	80008b2 <__udivmoddi4+0x1e2>
 80008a0:	eb1c 0101 	adds.w	r1, ip, r1
 80008a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80008a8:	d26c      	bcs.n	8000984 <__udivmoddi4+0x2b4>
 80008aa:	458e      	cmp	lr, r1
 80008ac:	d96a      	bls.n	8000984 <__udivmoddi4+0x2b4>
 80008ae:	3802      	subs	r0, #2
 80008b0:	4461      	add	r1, ip
 80008b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80008b6:	fba0 9402 	umull	r9, r4, r0, r2
 80008ba:	eba1 010e 	sub.w	r1, r1, lr
 80008be:	42a1      	cmp	r1, r4
 80008c0:	46c8      	mov	r8, r9
 80008c2:	46a6      	mov	lr, r4
 80008c4:	d356      	bcc.n	8000974 <__udivmoddi4+0x2a4>
 80008c6:	d053      	beq.n	8000970 <__udivmoddi4+0x2a0>
 80008c8:	b15d      	cbz	r5, 80008e2 <__udivmoddi4+0x212>
 80008ca:	ebb3 0208 	subs.w	r2, r3, r8
 80008ce:	eb61 010e 	sbc.w	r1, r1, lr
 80008d2:	fa01 f707 	lsl.w	r7, r1, r7
 80008d6:	fa22 f306 	lsr.w	r3, r2, r6
 80008da:	40f1      	lsrs	r1, r6
 80008dc:	431f      	orrs	r7, r3
 80008de:	e9c5 7100 	strd	r7, r1, [r5]
 80008e2:	2600      	movs	r6, #0
 80008e4:	4631      	mov	r1, r6
 80008e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ea:	f1c2 0320 	rsb	r3, r2, #32
 80008ee:	40d8      	lsrs	r0, r3
 80008f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80008f4:	fa21 f303 	lsr.w	r3, r1, r3
 80008f8:	4091      	lsls	r1, r2
 80008fa:	4301      	orrs	r1, r0
 80008fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000900:	fa1f fe8c 	uxth.w	lr, ip
 8000904:	fbb3 f0f7 	udiv	r0, r3, r7
 8000908:	fb07 3610 	mls	r6, r7, r0, r3
 800090c:	0c0b      	lsrs	r3, r1, #16
 800090e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000912:	fb00 f60e 	mul.w	r6, r0, lr
 8000916:	429e      	cmp	r6, r3
 8000918:	fa04 f402 	lsl.w	r4, r4, r2
 800091c:	d908      	bls.n	8000930 <__udivmoddi4+0x260>
 800091e:	eb1c 0303 	adds.w	r3, ip, r3
 8000922:	f100 38ff 	add.w	r8, r0, #4294967295
 8000926:	d22f      	bcs.n	8000988 <__udivmoddi4+0x2b8>
 8000928:	429e      	cmp	r6, r3
 800092a:	d92d      	bls.n	8000988 <__udivmoddi4+0x2b8>
 800092c:	3802      	subs	r0, #2
 800092e:	4463      	add	r3, ip
 8000930:	1b9b      	subs	r3, r3, r6
 8000932:	b289      	uxth	r1, r1
 8000934:	fbb3 f6f7 	udiv	r6, r3, r7
 8000938:	fb07 3316 	mls	r3, r7, r6, r3
 800093c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000940:	fb06 f30e 	mul.w	r3, r6, lr
 8000944:	428b      	cmp	r3, r1
 8000946:	d908      	bls.n	800095a <__udivmoddi4+0x28a>
 8000948:	eb1c 0101 	adds.w	r1, ip, r1
 800094c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000950:	d216      	bcs.n	8000980 <__udivmoddi4+0x2b0>
 8000952:	428b      	cmp	r3, r1
 8000954:	d914      	bls.n	8000980 <__udivmoddi4+0x2b0>
 8000956:	3e02      	subs	r6, #2
 8000958:	4461      	add	r1, ip
 800095a:	1ac9      	subs	r1, r1, r3
 800095c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000960:	e738      	b.n	80007d4 <__udivmoddi4+0x104>
 8000962:	462e      	mov	r6, r5
 8000964:	4628      	mov	r0, r5
 8000966:	e705      	b.n	8000774 <__udivmoddi4+0xa4>
 8000968:	4606      	mov	r6, r0
 800096a:	e6e3      	b.n	8000734 <__udivmoddi4+0x64>
 800096c:	4618      	mov	r0, r3
 800096e:	e6f8      	b.n	8000762 <__udivmoddi4+0x92>
 8000970:	454b      	cmp	r3, r9
 8000972:	d2a9      	bcs.n	80008c8 <__udivmoddi4+0x1f8>
 8000974:	ebb9 0802 	subs.w	r8, r9, r2
 8000978:	eb64 0e0c 	sbc.w	lr, r4, ip
 800097c:	3801      	subs	r0, #1
 800097e:	e7a3      	b.n	80008c8 <__udivmoddi4+0x1f8>
 8000980:	4646      	mov	r6, r8
 8000982:	e7ea      	b.n	800095a <__udivmoddi4+0x28a>
 8000984:	4620      	mov	r0, r4
 8000986:	e794      	b.n	80008b2 <__udivmoddi4+0x1e2>
 8000988:	4640      	mov	r0, r8
 800098a:	e7d1      	b.n	8000930 <__udivmoddi4+0x260>
 800098c:	46d0      	mov	r8, sl
 800098e:	e77b      	b.n	8000888 <__udivmoddi4+0x1b8>
 8000990:	3b02      	subs	r3, #2
 8000992:	4461      	add	r1, ip
 8000994:	e732      	b.n	80007fc <__udivmoddi4+0x12c>
 8000996:	4630      	mov	r0, r6
 8000998:	e709      	b.n	80007ae <__udivmoddi4+0xde>
 800099a:	4464      	add	r4, ip
 800099c:	3802      	subs	r0, #2
 800099e:	e742      	b.n	8000826 <__udivmoddi4+0x156>

080009a0 <__aeabi_idiv0>:
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop

080009a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009a8:	f001 fee5 	bl	8002776 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ac:	f000 f823 	bl	80009f6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009b0:	f000 fdcc 	bl	800154c <MX_GPIO_Init>
  MX_DMA_Init();
 80009b4:	f000 fda0 	bl	80014f8 <MX_DMA_Init>
  MX_ADC1_Init();
 80009b8:	f000 f85e 	bl	8000a78 <MX_ADC1_Init>
  MX_TIM6_Init();
 80009bc:	f000 fb14 	bl	8000fe8 <MX_TIM6_Init>
  MX_TIM15_Init();
 80009c0:	f000 fba2 	bl	8001108 <MX_TIM15_Init>
  MX_TIM4_Init();
 80009c4:	f000 faba 	bl	8000f3c <MX_TIM4_Init>
  MX_UART5_Init();
 80009c8:	f000 fcfc 	bl	80013c4 <MX_UART5_Init>
  MX_TIM3_Init();
 80009cc:	f000 fa3a 	bl	8000e44 <MX_TIM3_Init>
  MX_TIM1_Init();
 80009d0:	f000 f92c 	bl	8000c2c <MX_TIM1_Init>
  MX_TIM8_Init();
 80009d4:	f000 fb3e 	bl	8001054 <MX_TIM8_Init>
  MX_TIM16_Init();
 80009d8:	f000 fc28 	bl	800122c <MX_TIM16_Init>
  MX_TIM20_Init();
 80009dc:	f000 fc4c 	bl	8001278 <MX_TIM20_Init>
  MX_UART4_Init();
 80009e0:	f000 fca4 	bl	800132c <MX_UART4_Init>
  MX_USART3_UART_Init();
 80009e4:	f000 fd3a 	bl	800145c <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80009e8:	f000 f9d8 	bl	8000d9c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  //
  setup();
 80009ec:	f000 fe10 	bl	8001610 <setup>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {main_function();
 80009f0:	f000 fe07 	bl	8001602 <main_function>
 80009f4:	e7fc      	b.n	80009f0 <main+0x4c>

080009f6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f6:	b580      	push	{r7, lr}
 80009f8:	b094      	sub	sp, #80	; 0x50
 80009fa:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009fc:	f107 0318 	add.w	r3, r7, #24
 8000a00:	2238      	movs	r2, #56	; 0x38
 8000a02:	2100      	movs	r1, #0
 8000a04:	4618      	mov	r0, r3
 8000a06:	f007 fa91 	bl	8007f2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a0a:	1d3b      	adds	r3, r7, #4
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a18:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a1c:	f003 fcfe 	bl	800441c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a20:	2302      	movs	r3, #2
 8000a22:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a28:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a2a:	2340      	movs	r3, #64	; 0x40
 8000a2c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a32:	f107 0318 	add.w	r3, r7, #24
 8000a36:	4618      	mov	r0, r3
 8000a38:	f003 fd94 	bl	8004564 <HAL_RCC_OscConfig>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000a42:	f000 fdd9 	bl	80015f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a46:	230f      	movs	r3, #15
 8000a48:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a52:	2300      	movs	r3, #0
 8000a54:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a56:	2300      	movs	r3, #0
 8000a58:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a5a:	1d3b      	adds	r3, r7, #4
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f004 f892 	bl	8004b88 <HAL_RCC_ClockConfig>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000a6a:	f000 fdc5 	bl	80015f8 <Error_Handler>
  }
}
 8000a6e:	bf00      	nop
 8000a70:	3750      	adds	r7, #80	; 0x50
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
	...

08000a78 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08c      	sub	sp, #48	; 0x30
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]
 8000a88:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a8a:	1d3b      	adds	r3, r7, #4
 8000a8c:	2220      	movs	r2, #32
 8000a8e:	2100      	movs	r1, #0
 8000a90:	4618      	mov	r0, r3
 8000a92:	f007 fa4b 	bl	8007f2c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a96:	4b5d      	ldr	r3, [pc, #372]	; (8000c0c <MX_ADC1_Init+0x194>)
 8000a98:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a9c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000a9e:	4b5b      	ldr	r3, [pc, #364]	; (8000c0c <MX_ADC1_Init+0x194>)
 8000aa0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000aa4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000aa6:	4b59      	ldr	r3, [pc, #356]	; (8000c0c <MX_ADC1_Init+0x194>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000aac:	4b57      	ldr	r3, [pc, #348]	; (8000c0c <MX_ADC1_Init+0x194>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000ab2:	4b56      	ldr	r3, [pc, #344]	; (8000c0c <MX_ADC1_Init+0x194>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ab8:	4b54      	ldr	r3, [pc, #336]	; (8000c0c <MX_ADC1_Init+0x194>)
 8000aba:	2201      	movs	r2, #1
 8000abc:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000abe:	4b53      	ldr	r3, [pc, #332]	; (8000c0c <MX_ADC1_Init+0x194>)
 8000ac0:	2204      	movs	r2, #4
 8000ac2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ac4:	4b51      	ldr	r3, [pc, #324]	; (8000c0c <MX_ADC1_Init+0x194>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000aca:	4b50      	ldr	r3, [pc, #320]	; (8000c0c <MX_ADC1_Init+0x194>)
 8000acc:	2201      	movs	r2, #1
 8000ace:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 7;
 8000ad0:	4b4e      	ldr	r3, [pc, #312]	; (8000c0c <MX_ADC1_Init+0x194>)
 8000ad2:	2207      	movs	r2, #7
 8000ad4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ad6:	4b4d      	ldr	r3, [pc, #308]	; (8000c0c <MX_ADC1_Init+0x194>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ade:	4b4b      	ldr	r3, [pc, #300]	; (8000c0c <MX_ADC1_Init+0x194>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ae4:	4b49      	ldr	r3, [pc, #292]	; (8000c0c <MX_ADC1_Init+0x194>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000aea:	4b48      	ldr	r3, [pc, #288]	; (8000c0c <MX_ADC1_Init+0x194>)
 8000aec:	2201      	movs	r2, #1
 8000aee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000af2:	4b46      	ldr	r3, [pc, #280]	; (8000c0c <MX_ADC1_Init+0x194>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000af8:	4b44      	ldr	r3, [pc, #272]	; (8000c0c <MX_ADC1_Init+0x194>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b00:	4842      	ldr	r0, [pc, #264]	; (8000c0c <MX_ADC1_Init+0x194>)
 8000b02:	f002 f87f 	bl	8002c04 <HAL_ADC_Init>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000b0c:	f000 fd74 	bl	80015f8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000b10:	2300      	movs	r3, #0
 8000b12:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000b14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b18:	4619      	mov	r1, r3
 8000b1a:	483c      	ldr	r0, [pc, #240]	; (8000c0c <MX_ADC1_Init+0x194>)
 8000b1c:	f002 fe72 	bl	8003804 <HAL_ADCEx_MultiModeConfigChannel>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000b26:	f000 fd67 	bl	80015f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b2a:	4b39      	ldr	r3, [pc, #228]	; (8000c10 <MX_ADC1_Init+0x198>)
 8000b2c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b2e:	2306      	movs	r3, #6
 8000b30:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8000b32:	2305      	movs	r3, #5
 8000b34:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b36:	237f      	movs	r3, #127	; 0x7f
 8000b38:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b3a:	2304      	movs	r3, #4
 8000b3c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b42:	1d3b      	adds	r3, r7, #4
 8000b44:	4619      	mov	r1, r3
 8000b46:	4831      	ldr	r0, [pc, #196]	; (8000c0c <MX_ADC1_Init+0x194>)
 8000b48:	f002 fa0a 	bl	8002f60 <HAL_ADC_ConfigChannel>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000b52:	f000 fd51 	bl	80015f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000b56:	4b2f      	ldr	r3, [pc, #188]	; (8000c14 <MX_ADC1_Init+0x19c>)
 8000b58:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000b5a:	230c      	movs	r3, #12
 8000b5c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b5e:	1d3b      	adds	r3, r7, #4
 8000b60:	4619      	mov	r1, r3
 8000b62:	482a      	ldr	r0, [pc, #168]	; (8000c0c <MX_ADC1_Init+0x194>)
 8000b64:	f002 f9fc 	bl	8002f60 <HAL_ADC_ConfigChannel>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000b6e:	f000 fd43 	bl	80015f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000b72:	4b29      	ldr	r3, [pc, #164]	; (8000c18 <MX_ADC1_Init+0x1a0>)
 8000b74:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000b76:	2312      	movs	r3, #18
 8000b78:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b7a:	1d3b      	adds	r3, r7, #4
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4823      	ldr	r0, [pc, #140]	; (8000c0c <MX_ADC1_Init+0x194>)
 8000b80:	f002 f9ee 	bl	8002f60 <HAL_ADC_ConfigChannel>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8000b8a:	f000 fd35 	bl	80015f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000b8e:	4b23      	ldr	r3, [pc, #140]	; (8000c1c <MX_ADC1_Init+0x1a4>)
 8000b90:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000b92:	2318      	movs	r3, #24
 8000b94:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b96:	1d3b      	adds	r3, r7, #4
 8000b98:	4619      	mov	r1, r3
 8000b9a:	481c      	ldr	r0, [pc, #112]	; (8000c0c <MX_ADC1_Init+0x194>)
 8000b9c:	f002 f9e0 	bl	8002f60 <HAL_ADC_ConfigChannel>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8000ba6:	f000 fd27 	bl	80015f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000baa:	4b1d      	ldr	r3, [pc, #116]	; (8000c20 <MX_ADC1_Init+0x1a8>)
 8000bac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000bae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bb2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bb4:	1d3b      	adds	r3, r7, #4
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4814      	ldr	r0, [pc, #80]	; (8000c0c <MX_ADC1_Init+0x194>)
 8000bba:	f002 f9d1 	bl	8002f60 <HAL_ADC_ConfigChannel>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 8000bc4:	f000 fd18 	bl	80015f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000bc8:	4b16      	ldr	r3, [pc, #88]	; (8000c24 <MX_ADC1_Init+0x1ac>)
 8000bca:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000bcc:	f44f 7383 	mov.w	r3, #262	; 0x106
 8000bd0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bd2:	1d3b      	adds	r3, r7, #4
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	480d      	ldr	r0, [pc, #52]	; (8000c0c <MX_ADC1_Init+0x194>)
 8000bd8:	f002 f9c2 	bl	8002f60 <HAL_ADC_ConfigChannel>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 8000be2:	f000 fd09 	bl	80015f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000be6:	4b10      	ldr	r3, [pc, #64]	; (8000c28 <MX_ADC1_Init+0x1b0>)
 8000be8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000bea:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8000bee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bf0:	1d3b      	adds	r3, r7, #4
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4805      	ldr	r0, [pc, #20]	; (8000c0c <MX_ADC1_Init+0x194>)
 8000bf6:	f002 f9b3 	bl	8002f60 <HAL_ADC_ConfigChannel>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8000c00:	f000 fcfa 	bl	80015f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c04:	bf00      	nop
 8000c06:	3730      	adds	r7, #48	; 0x30
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	200001e8 	.word	0x200001e8
 8000c10:	04300002 	.word	0x04300002
 8000c14:	08600004 	.word	0x08600004
 8000c18:	3ef08000 	.word	0x3ef08000
 8000c1c:	1d500080 	.word	0x1d500080
 8000c20:	19200040 	.word	0x19200040
 8000c24:	2e300800 	.word	0x2e300800
 8000c28:	3ac04000 	.word	0x3ac04000

08000c2c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b098      	sub	sp, #96	; 0x60
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c32:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	605a      	str	r2, [r3, #4]
 8000c3c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c3e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	605a      	str	r2, [r3, #4]
 8000c48:	609a      	str	r2, [r3, #8]
 8000c4a:	60da      	str	r2, [r3, #12]
 8000c4c:	611a      	str	r2, [r3, #16]
 8000c4e:	615a      	str	r2, [r3, #20]
 8000c50:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c52:	1d3b      	adds	r3, r7, #4
 8000c54:	2234      	movs	r2, #52	; 0x34
 8000c56:	2100      	movs	r1, #0
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f007 f967 	bl	8007f2c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c5e:	4b4d      	ldr	r3, [pc, #308]	; (8000d94 <MX_TIM1_Init+0x168>)
 8000c60:	4a4d      	ldr	r2, [pc, #308]	; (8000d98 <MX_TIM1_Init+0x16c>)
 8000c62:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000c64:	4b4b      	ldr	r3, [pc, #300]	; (8000d94 <MX_TIM1_Init+0x168>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c6a:	4b4a      	ldr	r3, [pc, #296]	; (8000d94 <MX_TIM1_Init+0x168>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 799;
 8000c70:	4b48      	ldr	r3, [pc, #288]	; (8000d94 <MX_TIM1_Init+0x168>)
 8000c72:	f240 321f 	movw	r2, #799	; 0x31f
 8000c76:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c78:	4b46      	ldr	r3, [pc, #280]	; (8000d94 <MX_TIM1_Init+0x168>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c7e:	4b45      	ldr	r3, [pc, #276]	; (8000d94 <MX_TIM1_Init+0x168>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c84:	4b43      	ldr	r3, [pc, #268]	; (8000d94 <MX_TIM1_Init+0x168>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c8a:	4842      	ldr	r0, [pc, #264]	; (8000d94 <MX_TIM1_Init+0x168>)
 8000c8c:	f004 fc9c 	bl	80055c8 <HAL_TIM_PWM_Init>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000c96:	f000 fcaf 	bl	80015f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ca6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000caa:	4619      	mov	r1, r3
 8000cac:	4839      	ldr	r0, [pc, #228]	; (8000d94 <MX_TIM1_Init+0x168>)
 8000cae:	f005 fda9 	bl	8006804 <HAL_TIMEx_MasterConfigSynchronization>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000cb8:	f000 fc9e 	bl	80015f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cbc:	2360      	movs	r3, #96	; 0x60
 8000cbe:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cd8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000cdc:	2200      	movs	r2, #0
 8000cde:	4619      	mov	r1, r3
 8000ce0:	482c      	ldr	r0, [pc, #176]	; (8000d94 <MX_TIM1_Init+0x168>)
 8000ce2:	f005 f859 	bl	8005d98 <HAL_TIM_PWM_ConfigChannel>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000cec:	f000 fc84 	bl	80015f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000cf0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000cf4:	2204      	movs	r2, #4
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4826      	ldr	r0, [pc, #152]	; (8000d94 <MX_TIM1_Init+0x168>)
 8000cfa:	f005 f84d 	bl	8005d98 <HAL_TIM_PWM_ConfigChannel>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000d04:	f000 fc78 	bl	80015f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d08:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d0c:	2208      	movs	r2, #8
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4820      	ldr	r0, [pc, #128]	; (8000d94 <MX_TIM1_Init+0x168>)
 8000d12:	f005 f841 	bl	8005d98 <HAL_TIM_PWM_ConfigChannel>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8000d1c:	f000 fc6c 	bl	80015f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d20:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d24:	220c      	movs	r2, #12
 8000d26:	4619      	mov	r1, r3
 8000d28:	481a      	ldr	r0, [pc, #104]	; (8000d94 <MX_TIM1_Init+0x168>)
 8000d2a:	f005 f835 	bl	8005d98 <HAL_TIM_PWM_ConfigChannel>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8000d34:	f000 fc60 	bl	80015f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d40:	2300      	movs	r3, #0
 8000d42:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d50:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d52:	2300      	movs	r3, #0
 8000d54:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000d56:	2300      	movs	r3, #0
 8000d58:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000d5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d62:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000d64:	2300      	movs	r3, #0
 8000d66:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d70:	1d3b      	adds	r3, r7, #4
 8000d72:	4619      	mov	r1, r3
 8000d74:	4807      	ldr	r0, [pc, #28]	; (8000d94 <MX_TIM1_Init+0x168>)
 8000d76:	f005 fdd3 	bl	8006920 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8000d80:	f000 fc3a 	bl	80015f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d84:	4803      	ldr	r0, [pc, #12]	; (8000d94 <MX_TIM1_Init+0x168>)
 8000d86:	f001 fa79 	bl	800227c <HAL_TIM_MspPostInit>

}
 8000d8a:	bf00      	nop
 8000d8c:	3760      	adds	r7, #96	; 0x60
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	200002b4 	.word	0x200002b4
 8000d98:	40012c00 	.word	0x40012c00

08000d9c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08c      	sub	sp, #48	; 0x30
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000da2:	f107 030c 	add.w	r3, r7, #12
 8000da6:	2224      	movs	r2, #36	; 0x24
 8000da8:	2100      	movs	r1, #0
 8000daa:	4618      	mov	r0, r3
 8000dac:	f007 f8be 	bl	8007f2c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000db0:	463b      	mov	r3, r7
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]
 8000db8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dba:	4b21      	ldr	r3, [pc, #132]	; (8000e40 <MX_TIM2_Init+0xa4>)
 8000dbc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dc0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000dc2:	4b1f      	ldr	r3, [pc, #124]	; (8000e40 <MX_TIM2_Init+0xa4>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc8:	4b1d      	ldr	r3, [pc, #116]	; (8000e40 <MX_TIM2_Init+0xa4>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8000dce:	4b1c      	ldr	r3, [pc, #112]	; (8000e40 <MX_TIM2_Init+0xa4>)
 8000dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dd6:	4b1a      	ldr	r3, [pc, #104]	; (8000e40 <MX_TIM2_Init+0xa4>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ddc:	4b18      	ldr	r3, [pc, #96]	; (8000e40 <MX_TIM2_Init+0xa4>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000de2:	2301      	movs	r3, #1
 8000de4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000de6:	2300      	movs	r3, #0
 8000de8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000dea:	2301      	movs	r3, #1
 8000dec:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000dee:	2300      	movs	r3, #0
 8000df0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000df6:	2300      	movs	r3, #0
 8000df8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000e02:	2300      	movs	r3, #0
 8000e04:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000e06:	f107 030c 	add.w	r3, r7, #12
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	480c      	ldr	r0, [pc, #48]	; (8000e40 <MX_TIM2_Init+0xa4>)
 8000e0e:	f004 fd3f 	bl	8005890 <HAL_TIM_Encoder_Init>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000e18:	f000 fbee 	bl	80015f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e20:	2300      	movs	r3, #0
 8000e22:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e24:	463b      	mov	r3, r7
 8000e26:	4619      	mov	r1, r3
 8000e28:	4805      	ldr	r0, [pc, #20]	; (8000e40 <MX_TIM2_Init+0xa4>)
 8000e2a:	f005 fceb 	bl	8006804 <HAL_TIMEx_MasterConfigSynchronization>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000e34:	f000 fbe0 	bl	80015f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e38:	bf00      	nop
 8000e3a:	3730      	adds	r7, #48	; 0x30
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	20000300 	.word	0x20000300

08000e44 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b08a      	sub	sp, #40	; 0x28
 8000e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e4a:	f107 031c 	add.w	r3, r7, #28
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	605a      	str	r2, [r3, #4]
 8000e54:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e56:	463b      	mov	r3, r7
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
 8000e62:	611a      	str	r2, [r3, #16]
 8000e64:	615a      	str	r2, [r3, #20]
 8000e66:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e68:	4b32      	ldr	r3, [pc, #200]	; (8000f34 <MX_TIM3_Init+0xf0>)
 8000e6a:	4a33      	ldr	r2, [pc, #204]	; (8000f38 <MX_TIM3_Init+0xf4>)
 8000e6c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000e6e:	4b31      	ldr	r3, [pc, #196]	; (8000f34 <MX_TIM3_Init+0xf0>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e74:	4b2f      	ldr	r3, [pc, #188]	; (8000f34 <MX_TIM3_Init+0xf0>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000e7a:	4b2e      	ldr	r3, [pc, #184]	; (8000f34 <MX_TIM3_Init+0xf0>)
 8000e7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e80:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e82:	4b2c      	ldr	r3, [pc, #176]	; (8000f34 <MX_TIM3_Init+0xf0>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e88:	4b2a      	ldr	r3, [pc, #168]	; (8000f34 <MX_TIM3_Init+0xf0>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e8e:	4829      	ldr	r0, [pc, #164]	; (8000f34 <MX_TIM3_Init+0xf0>)
 8000e90:	f004 fb9a 	bl	80055c8 <HAL_TIM_PWM_Init>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000e9a:	f000 fbad 	bl	80015f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ea6:	f107 031c 	add.w	r3, r7, #28
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4821      	ldr	r0, [pc, #132]	; (8000f34 <MX_TIM3_Init+0xf0>)
 8000eae:	f005 fca9 	bl	8006804 <HAL_TIMEx_MasterConfigSynchronization>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000eb8:	f000 fb9e 	bl	80015f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ebc:	2360      	movs	r3, #96	; 0x60
 8000ebe:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ecc:	463b      	mov	r3, r7
 8000ece:	2200      	movs	r2, #0
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4818      	ldr	r0, [pc, #96]	; (8000f34 <MX_TIM3_Init+0xf0>)
 8000ed4:	f004 ff60 	bl	8005d98 <HAL_TIM_PWM_ConfigChannel>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000ede:	f000 fb8b 	bl	80015f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ee2:	463b      	mov	r3, r7
 8000ee4:	2204      	movs	r2, #4
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4812      	ldr	r0, [pc, #72]	; (8000f34 <MX_TIM3_Init+0xf0>)
 8000eea:	f004 ff55 	bl	8005d98 <HAL_TIM_PWM_ConfigChannel>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000ef4:	f000 fb80 	bl	80015f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ef8:	463b      	mov	r3, r7
 8000efa:	2208      	movs	r2, #8
 8000efc:	4619      	mov	r1, r3
 8000efe:	480d      	ldr	r0, [pc, #52]	; (8000f34 <MX_TIM3_Init+0xf0>)
 8000f00:	f004 ff4a 	bl	8005d98 <HAL_TIM_PWM_ConfigChannel>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8000f0a:	f000 fb75 	bl	80015f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f0e:	463b      	mov	r3, r7
 8000f10:	220c      	movs	r2, #12
 8000f12:	4619      	mov	r1, r3
 8000f14:	4807      	ldr	r0, [pc, #28]	; (8000f34 <MX_TIM3_Init+0xf0>)
 8000f16:	f004 ff3f 	bl	8005d98 <HAL_TIM_PWM_ConfigChannel>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8000f20:	f000 fb6a 	bl	80015f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f24:	4803      	ldr	r0, [pc, #12]	; (8000f34 <MX_TIM3_Init+0xf0>)
 8000f26:	f001 f9a9 	bl	800227c <HAL_TIM_MspPostInit>

}
 8000f2a:	bf00      	nop
 8000f2c:	3728      	adds	r7, #40	; 0x28
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	2000034c 	.word	0x2000034c
 8000f38:	40000400 	.word	0x40000400

08000f3c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08c      	sub	sp, #48	; 0x30
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f42:	f107 030c 	add.w	r3, r7, #12
 8000f46:	2224      	movs	r2, #36	; 0x24
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f006 ffee 	bl	8007f2c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f50:	463b      	mov	r3, r7
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	605a      	str	r2, [r3, #4]
 8000f58:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f5a:	4b21      	ldr	r3, [pc, #132]	; (8000fe0 <MX_TIM4_Init+0xa4>)
 8000f5c:	4a21      	ldr	r2, [pc, #132]	; (8000fe4 <MX_TIM4_Init+0xa8>)
 8000f5e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000f60:	4b1f      	ldr	r3, [pc, #124]	; (8000fe0 <MX_TIM4_Init+0xa4>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f66:	4b1e      	ldr	r3, [pc, #120]	; (8000fe0 <MX_TIM4_Init+0xa4>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000f6c:	4b1c      	ldr	r3, [pc, #112]	; (8000fe0 <MX_TIM4_Init+0xa4>)
 8000f6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f72:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f74:	4b1a      	ldr	r3, [pc, #104]	; (8000fe0 <MX_TIM4_Init+0xa4>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f7a:	4b19      	ldr	r3, [pc, #100]	; (8000fe0 <MX_TIM4_Init+0xa4>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000f80:	2301      	movs	r3, #1
 8000f82:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f84:	2300      	movs	r3, #0
 8000f86:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000f90:	2300      	movs	r3, #0
 8000f92:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f94:	2300      	movs	r3, #0
 8000f96:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000fa4:	f107 030c 	add.w	r3, r7, #12
 8000fa8:	4619      	mov	r1, r3
 8000faa:	480d      	ldr	r0, [pc, #52]	; (8000fe0 <MX_TIM4_Init+0xa4>)
 8000fac:	f004 fc70 	bl	8005890 <HAL_TIM_Encoder_Init>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000fb6:	f000 fb1f 	bl	80015f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000fc2:	463b      	mov	r3, r7
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4806      	ldr	r0, [pc, #24]	; (8000fe0 <MX_TIM4_Init+0xa4>)
 8000fc8:	f005 fc1c 	bl	8006804 <HAL_TIMEx_MasterConfigSynchronization>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000fd2:	f000 fb11 	bl	80015f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000fd6:	bf00      	nop
 8000fd8:	3730      	adds	r7, #48	; 0x30
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000398 	.word	0x20000398
 8000fe4:	40000800 	.word	0x40000800

08000fe8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fee:	1d3b      	adds	r3, r7, #4
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000ff8:	4b14      	ldr	r3, [pc, #80]	; (800104c <MX_TIM6_Init+0x64>)
 8000ffa:	4a15      	ldr	r2, [pc, #84]	; (8001050 <MX_TIM6_Init+0x68>)
 8000ffc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 15;
 8000ffe:	4b13      	ldr	r3, [pc, #76]	; (800104c <MX_TIM6_Init+0x64>)
 8001000:	220f      	movs	r2, #15
 8001002:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001004:	4b11      	ldr	r3, [pc, #68]	; (800104c <MX_TIM6_Init+0x64>)
 8001006:	2200      	movs	r2, #0
 8001008:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 800100a:	4b10      	ldr	r3, [pc, #64]	; (800104c <MX_TIM6_Init+0x64>)
 800100c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001010:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001012:	4b0e      	ldr	r3, [pc, #56]	; (800104c <MX_TIM6_Init+0x64>)
 8001014:	2200      	movs	r2, #0
 8001016:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001018:	480c      	ldr	r0, [pc, #48]	; (800104c <MX_TIM6_Init+0x64>)
 800101a:	f004 fa0d 	bl	8005438 <HAL_TIM_Base_Init>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001024:	f000 fae8 	bl	80015f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001028:	2300      	movs	r3, #0
 800102a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800102c:	2300      	movs	r3, #0
 800102e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001030:	1d3b      	adds	r3, r7, #4
 8001032:	4619      	mov	r1, r3
 8001034:	4805      	ldr	r0, [pc, #20]	; (800104c <MX_TIM6_Init+0x64>)
 8001036:	f005 fbe5 	bl	8006804 <HAL_TIMEx_MasterConfigSynchronization>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001040:	f000 fada 	bl	80015f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001044:	bf00      	nop
 8001046:	3710      	adds	r7, #16
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	200003e4 	.word	0x200003e4
 8001050:	40001000 	.word	0x40001000

08001054 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08c      	sub	sp, #48	; 0x30
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800105a:	f107 030c 	add.w	r3, r7, #12
 800105e:	2224      	movs	r2, #36	; 0x24
 8001060:	2100      	movs	r1, #0
 8001062:	4618      	mov	r0, r3
 8001064:	f006 ff62 	bl	8007f2c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001068:	463b      	mov	r3, r7
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001072:	4b23      	ldr	r3, [pc, #140]	; (8001100 <MX_TIM8_Init+0xac>)
 8001074:	4a23      	ldr	r2, [pc, #140]	; (8001104 <MX_TIM8_Init+0xb0>)
 8001076:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001078:	4b21      	ldr	r3, [pc, #132]	; (8001100 <MX_TIM8_Init+0xac>)
 800107a:	2200      	movs	r2, #0
 800107c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800107e:	4b20      	ldr	r3, [pc, #128]	; (8001100 <MX_TIM8_Init+0xac>)
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001084:	4b1e      	ldr	r3, [pc, #120]	; (8001100 <MX_TIM8_Init+0xac>)
 8001086:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800108a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800108c:	4b1c      	ldr	r3, [pc, #112]	; (8001100 <MX_TIM8_Init+0xac>)
 800108e:	2200      	movs	r2, #0
 8001090:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001092:	4b1b      	ldr	r3, [pc, #108]	; (8001100 <MX_TIM8_Init+0xac>)
 8001094:	2200      	movs	r2, #0
 8001096:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001098:	4b19      	ldr	r3, [pc, #100]	; (8001100 <MX_TIM8_Init+0xac>)
 800109a:	2200      	movs	r2, #0
 800109c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800109e:	2303      	movs	r3, #3
 80010a0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80010a2:	2300      	movs	r3, #0
 80010a4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80010a6:	2301      	movs	r3, #1
 80010a8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010aa:	2300      	movs	r3, #0
 80010ac:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80010b2:	2300      	movs	r3, #0
 80010b4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010b6:	2301      	movs	r3, #1
 80010b8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010ba:	2300      	movs	r3, #0
 80010bc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80010be:	2300      	movs	r3, #0
 80010c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80010c2:	f107 030c 	add.w	r3, r7, #12
 80010c6:	4619      	mov	r1, r3
 80010c8:	480d      	ldr	r0, [pc, #52]	; (8001100 <MX_TIM8_Init+0xac>)
 80010ca:	f004 fbe1 	bl	8005890 <HAL_TIM_Encoder_Init>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 80010d4:	f000 fa90 	bl	80015f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010d8:	2300      	movs	r3, #0
 80010da:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80010dc:	2300      	movs	r3, #0
 80010de:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010e0:	2300      	movs	r3, #0
 80010e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80010e4:	463b      	mov	r3, r7
 80010e6:	4619      	mov	r1, r3
 80010e8:	4805      	ldr	r0, [pc, #20]	; (8001100 <MX_TIM8_Init+0xac>)
 80010ea:	f005 fb8b 	bl	8006804 <HAL_TIMEx_MasterConfigSynchronization>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80010f4:	f000 fa80 	bl	80015f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80010f8:	bf00      	nop
 80010fa:	3730      	adds	r7, #48	; 0x30
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000430 	.word	0x20000430
 8001104:	40013400 	.word	0x40013400

08001108 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b098      	sub	sp, #96	; 0x60
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800110e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800111a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	605a      	str	r2, [r3, #4]
 8001124:	609a      	str	r2, [r3, #8]
 8001126:	60da      	str	r2, [r3, #12]
 8001128:	611a      	str	r2, [r3, #16]
 800112a:	615a      	str	r2, [r3, #20]
 800112c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800112e:	1d3b      	adds	r3, r7, #4
 8001130:	2234      	movs	r2, #52	; 0x34
 8001132:	2100      	movs	r1, #0
 8001134:	4618      	mov	r0, r3
 8001136:	f006 fef9 	bl	8007f2c <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800113a:	4b3a      	ldr	r3, [pc, #232]	; (8001224 <MX_TIM15_Init+0x11c>)
 800113c:	4a3a      	ldr	r2, [pc, #232]	; (8001228 <MX_TIM15_Init+0x120>)
 800113e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 15;
 8001140:	4b38      	ldr	r3, [pc, #224]	; (8001224 <MX_TIM15_Init+0x11c>)
 8001142:	220f      	movs	r2, #15
 8001144:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001146:	4b37      	ldr	r3, [pc, #220]	; (8001224 <MX_TIM15_Init+0x11c>)
 8001148:	2200      	movs	r2, #0
 800114a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 19999;
 800114c:	4b35      	ldr	r3, [pc, #212]	; (8001224 <MX_TIM15_Init+0x11c>)
 800114e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001152:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001154:	4b33      	ldr	r3, [pc, #204]	; (8001224 <MX_TIM15_Init+0x11c>)
 8001156:	2200      	movs	r2, #0
 8001158:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800115a:	4b32      	ldr	r3, [pc, #200]	; (8001224 <MX_TIM15_Init+0x11c>)
 800115c:	2200      	movs	r2, #0
 800115e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001160:	4b30      	ldr	r3, [pc, #192]	; (8001224 <MX_TIM15_Init+0x11c>)
 8001162:	2200      	movs	r2, #0
 8001164:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001166:	482f      	ldr	r0, [pc, #188]	; (8001224 <MX_TIM15_Init+0x11c>)
 8001168:	f004 fa2e 	bl	80055c8 <HAL_TIM_PWM_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8001172:	f000 fa41 	bl	80015f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001176:	2300      	movs	r3, #0
 8001178:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800117a:	2300      	movs	r3, #0
 800117c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800117e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001182:	4619      	mov	r1, r3
 8001184:	4827      	ldr	r0, [pc, #156]	; (8001224 <MX_TIM15_Init+0x11c>)
 8001186:	f005 fb3d 	bl	8006804 <HAL_TIMEx_MasterConfigSynchronization>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8001190:	f000 fa32 	bl	80015f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001194:	2360      	movs	r3, #96	; 0x60
 8001196:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001198:	2300      	movs	r3, #0
 800119a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800119c:	2300      	movs	r3, #0
 800119e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011a0:	2300      	movs	r3, #0
 80011a2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011a4:	2300      	movs	r3, #0
 80011a6:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011a8:	2300      	movs	r3, #0
 80011aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011ac:	2300      	movs	r3, #0
 80011ae:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011b0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80011b4:	2200      	movs	r2, #0
 80011b6:	4619      	mov	r1, r3
 80011b8:	481a      	ldr	r0, [pc, #104]	; (8001224 <MX_TIM15_Init+0x11c>)
 80011ba:	f004 fded 	bl	8005d98 <HAL_TIM_PWM_ConfigChannel>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 80011c4:	f000 fa18 	bl	80015f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011c8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80011cc:	2204      	movs	r2, #4
 80011ce:	4619      	mov	r1, r3
 80011d0:	4814      	ldr	r0, [pc, #80]	; (8001224 <MX_TIM15_Init+0x11c>)
 80011d2:	f004 fde1 	bl	8005d98 <HAL_TIM_PWM_ConfigChannel>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 80011dc:	f000 fa0c 	bl	80015f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011e0:	2300      	movs	r3, #0
 80011e2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011e4:	2300      	movs	r3, #0
 80011e6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011e8:	2300      	movs	r3, #0
 80011ea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011ec:	2300      	movs	r3, #0
 80011ee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011f8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80011fa:	2300      	movs	r3, #0
 80011fc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011fe:	2300      	movs	r3, #0
 8001200:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001202:	1d3b      	adds	r3, r7, #4
 8001204:	4619      	mov	r1, r3
 8001206:	4807      	ldr	r0, [pc, #28]	; (8001224 <MX_TIM15_Init+0x11c>)
 8001208:	f005 fb8a 	bl	8006920 <HAL_TIMEx_ConfigBreakDeadTime>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8001212:	f000 f9f1 	bl	80015f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001216:	4803      	ldr	r0, [pc, #12]	; (8001224 <MX_TIM15_Init+0x11c>)
 8001218:	f001 f830 	bl	800227c <HAL_TIM_MspPostInit>

}
 800121c:	bf00      	nop
 800121e:	3760      	adds	r7, #96	; 0x60
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	2000047c 	.word	0x2000047c
 8001228:	40014000 	.word	0x40014000

0800122c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001230:	4b0f      	ldr	r3, [pc, #60]	; (8001270 <MX_TIM16_Init+0x44>)
 8001232:	4a10      	ldr	r2, [pc, #64]	; (8001274 <MX_TIM16_Init+0x48>)
 8001234:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001236:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <MX_TIM16_Init+0x44>)
 8001238:	2200      	movs	r2, #0
 800123a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800123c:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <MX_TIM16_Init+0x44>)
 800123e:	2200      	movs	r2, #0
 8001240:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001242:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <MX_TIM16_Init+0x44>)
 8001244:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001248:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800124a:	4b09      	ldr	r3, [pc, #36]	; (8001270 <MX_TIM16_Init+0x44>)
 800124c:	2200      	movs	r2, #0
 800124e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001250:	4b07      	ldr	r3, [pc, #28]	; (8001270 <MX_TIM16_Init+0x44>)
 8001252:	2200      	movs	r2, #0
 8001254:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001256:	4b06      	ldr	r3, [pc, #24]	; (8001270 <MX_TIM16_Init+0x44>)
 8001258:	2200      	movs	r2, #0
 800125a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800125c:	4804      	ldr	r0, [pc, #16]	; (8001270 <MX_TIM16_Init+0x44>)
 800125e:	f004 f8eb 	bl	8005438 <HAL_TIM_Base_Init>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001268:	f000 f9c6 	bl	80015f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800126c:	bf00      	nop
 800126e:	bd80      	pop	{r7, pc}
 8001270:	200004c8 	.word	0x200004c8
 8001274:	40014400 	.word	0x40014400

08001278 <MX_TIM20_Init>:
  * @brief TIM20 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM20_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b08c      	sub	sp, #48	; 0x30
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800127e:	f107 030c 	add.w	r3, r7, #12
 8001282:	2224      	movs	r2, #36	; 0x24
 8001284:	2100      	movs	r1, #0
 8001286:	4618      	mov	r0, r3
 8001288:	f006 fe50 	bl	8007f2c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800128c:	463b      	mov	r3, r7
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 8001296:	4b23      	ldr	r3, [pc, #140]	; (8001324 <MX_TIM20_Init+0xac>)
 8001298:	4a23      	ldr	r2, [pc, #140]	; (8001328 <MX_TIM20_Init+0xb0>)
 800129a:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 0;
 800129c:	4b21      	ldr	r3, [pc, #132]	; (8001324 <MX_TIM20_Init+0xac>)
 800129e:	2200      	movs	r2, #0
 80012a0:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012a2:	4b20      	ldr	r3, [pc, #128]	; (8001324 <MX_TIM20_Init+0xac>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 65535;
 80012a8:	4b1e      	ldr	r3, [pc, #120]	; (8001324 <MX_TIM20_Init+0xac>)
 80012aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012ae:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b0:	4b1c      	ldr	r3, [pc, #112]	; (8001324 <MX_TIM20_Init+0xac>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 80012b6:	4b1b      	ldr	r3, [pc, #108]	; (8001324 <MX_TIM20_Init+0xac>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012bc:	4b19      	ldr	r3, [pc, #100]	; (8001324 <MX_TIM20_Init+0xac>)
 80012be:	2200      	movs	r2, #0
 80012c0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80012c2:	2301      	movs	r3, #1
 80012c4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012c6:	2300      	movs	r3, #0
 80012c8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012ca:	2301      	movs	r3, #1
 80012cc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80012d2:	2300      	movs	r3, #0
 80012d4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012d6:	2300      	movs	r3, #0
 80012d8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012da:	2301      	movs	r3, #1
 80012dc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012de:	2300      	movs	r3, #0
 80012e0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80012e2:	2300      	movs	r3, #0
 80012e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim20, &sConfig) != HAL_OK)
 80012e6:	f107 030c 	add.w	r3, r7, #12
 80012ea:	4619      	mov	r1, r3
 80012ec:	480d      	ldr	r0, [pc, #52]	; (8001324 <MX_TIM20_Init+0xac>)
 80012ee:	f004 facf 	bl	8005890 <HAL_TIM_Encoder_Init>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_TIM20_Init+0x84>
  {
    Error_Handler();
 80012f8:	f000 f97e 	bl	80015f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012fc:	2300      	movs	r3, #0
 80012fe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001300:	2300      	movs	r3, #0
 8001302:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001304:	2300      	movs	r3, #0
 8001306:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8001308:	463b      	mov	r3, r7
 800130a:	4619      	mov	r1, r3
 800130c:	4805      	ldr	r0, [pc, #20]	; (8001324 <MX_TIM20_Init+0xac>)
 800130e:	f005 fa79 	bl	8006804 <HAL_TIMEx_MasterConfigSynchronization>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_TIM20_Init+0xa4>
  {
    Error_Handler();
 8001318:	f000 f96e 	bl	80015f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */

}
 800131c:	bf00      	nop
 800131e:	3730      	adds	r7, #48	; 0x30
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	20000514 	.word	0x20000514
 8001328:	40015000 	.word	0x40015000

0800132c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001330:	4b22      	ldr	r3, [pc, #136]	; (80013bc <MX_UART4_Init+0x90>)
 8001332:	4a23      	ldr	r2, [pc, #140]	; (80013c0 <MX_UART4_Init+0x94>)
 8001334:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001336:	4b21      	ldr	r3, [pc, #132]	; (80013bc <MX_UART4_Init+0x90>)
 8001338:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800133c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800133e:	4b1f      	ldr	r3, [pc, #124]	; (80013bc <MX_UART4_Init+0x90>)
 8001340:	2200      	movs	r2, #0
 8001342:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001344:	4b1d      	ldr	r3, [pc, #116]	; (80013bc <MX_UART4_Init+0x90>)
 8001346:	2200      	movs	r2, #0
 8001348:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800134a:	4b1c      	ldr	r3, [pc, #112]	; (80013bc <MX_UART4_Init+0x90>)
 800134c:	2200      	movs	r2, #0
 800134e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001350:	4b1a      	ldr	r3, [pc, #104]	; (80013bc <MX_UART4_Init+0x90>)
 8001352:	220c      	movs	r2, #12
 8001354:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001356:	4b19      	ldr	r3, [pc, #100]	; (80013bc <MX_UART4_Init+0x90>)
 8001358:	2200      	movs	r2, #0
 800135a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800135c:	4b17      	ldr	r3, [pc, #92]	; (80013bc <MX_UART4_Init+0x90>)
 800135e:	2200      	movs	r2, #0
 8001360:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001362:	4b16      	ldr	r3, [pc, #88]	; (80013bc <MX_UART4_Init+0x90>)
 8001364:	2200      	movs	r2, #0
 8001366:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001368:	4b14      	ldr	r3, [pc, #80]	; (80013bc <MX_UART4_Init+0x90>)
 800136a:	2200      	movs	r2, #0
 800136c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800136e:	4b13      	ldr	r3, [pc, #76]	; (80013bc <MX_UART4_Init+0x90>)
 8001370:	2200      	movs	r2, #0
 8001372:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001374:	4811      	ldr	r0, [pc, #68]	; (80013bc <MX_UART4_Init+0x90>)
 8001376:	f005 fbad 	bl	8006ad4 <HAL_UART_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001380:	f000 f93a 	bl	80015f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001384:	2100      	movs	r1, #0
 8001386:	480d      	ldr	r0, [pc, #52]	; (80013bc <MX_UART4_Init+0x90>)
 8001388:	f006 fce1 	bl	8007d4e <HAL_UARTEx_SetTxFifoThreshold>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001392:	f000 f931 	bl	80015f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001396:	2100      	movs	r1, #0
 8001398:	4808      	ldr	r0, [pc, #32]	; (80013bc <MX_UART4_Init+0x90>)
 800139a:	f006 fd16 	bl	8007dca <HAL_UARTEx_SetRxFifoThreshold>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80013a4:	f000 f928 	bl	80015f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80013a8:	4804      	ldr	r0, [pc, #16]	; (80013bc <MX_UART4_Init+0x90>)
 80013aa:	f006 fc97 	bl	8007cdc <HAL_UARTEx_DisableFifoMode>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80013b4:	f000 f920 	bl	80015f8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80013b8:	bf00      	nop
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	20000560 	.word	0x20000560
 80013c0:	40004c00 	.word	0x40004c00

080013c4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80013c8:	4b22      	ldr	r3, [pc, #136]	; (8001454 <MX_UART5_Init+0x90>)
 80013ca:	4a23      	ldr	r2, [pc, #140]	; (8001458 <MX_UART5_Init+0x94>)
 80013cc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 80013ce:	4b21      	ldr	r3, [pc, #132]	; (8001454 <MX_UART5_Init+0x90>)
 80013d0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80013d4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80013d6:	4b1f      	ldr	r3, [pc, #124]	; (8001454 <MX_UART5_Init+0x90>)
 80013d8:	2200      	movs	r2, #0
 80013da:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80013dc:	4b1d      	ldr	r3, [pc, #116]	; (8001454 <MX_UART5_Init+0x90>)
 80013de:	2200      	movs	r2, #0
 80013e0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80013e2:	4b1c      	ldr	r3, [pc, #112]	; (8001454 <MX_UART5_Init+0x90>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80013e8:	4b1a      	ldr	r3, [pc, #104]	; (8001454 <MX_UART5_Init+0x90>)
 80013ea:	220c      	movs	r2, #12
 80013ec:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ee:	4b19      	ldr	r3, [pc, #100]	; (8001454 <MX_UART5_Init+0x90>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80013f4:	4b17      	ldr	r3, [pc, #92]	; (8001454 <MX_UART5_Init+0x90>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013fa:	4b16      	ldr	r3, [pc, #88]	; (8001454 <MX_UART5_Init+0x90>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001400:	4b14      	ldr	r3, [pc, #80]	; (8001454 <MX_UART5_Init+0x90>)
 8001402:	2200      	movs	r2, #0
 8001404:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001406:	4b13      	ldr	r3, [pc, #76]	; (8001454 <MX_UART5_Init+0x90>)
 8001408:	2200      	movs	r2, #0
 800140a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800140c:	4811      	ldr	r0, [pc, #68]	; (8001454 <MX_UART5_Init+0x90>)
 800140e:	f005 fb61 	bl	8006ad4 <HAL_UART_Init>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8001418:	f000 f8ee 	bl	80015f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800141c:	2100      	movs	r1, #0
 800141e:	480d      	ldr	r0, [pc, #52]	; (8001454 <MX_UART5_Init+0x90>)
 8001420:	f006 fc95 	bl	8007d4e <HAL_UARTEx_SetTxFifoThreshold>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 800142a:	f000 f8e5 	bl	80015f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800142e:	2100      	movs	r1, #0
 8001430:	4808      	ldr	r0, [pc, #32]	; (8001454 <MX_UART5_Init+0x90>)
 8001432:	f006 fcca 	bl	8007dca <HAL_UARTEx_SetRxFifoThreshold>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 800143c:	f000 f8dc 	bl	80015f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8001440:	4804      	ldr	r0, [pc, #16]	; (8001454 <MX_UART5_Init+0x90>)
 8001442:	f006 fc4b 	bl	8007cdc <HAL_UARTEx_DisableFifoMode>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 800144c:	f000 f8d4 	bl	80015f8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001450:	bf00      	nop
 8001452:	bd80      	pop	{r7, pc}
 8001454:	200005f4 	.word	0x200005f4
 8001458:	40005000 	.word	0x40005000

0800145c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001460:	4b22      	ldr	r3, [pc, #136]	; (80014ec <MX_USART3_UART_Init+0x90>)
 8001462:	4a23      	ldr	r2, [pc, #140]	; (80014f0 <MX_USART3_UART_Init+0x94>)
 8001464:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 500000;
 8001466:	4b21      	ldr	r3, [pc, #132]	; (80014ec <MX_USART3_UART_Init+0x90>)
 8001468:	4a22      	ldr	r2, [pc, #136]	; (80014f4 <MX_USART3_UART_Init+0x98>)
 800146a:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800146c:	4b1f      	ldr	r3, [pc, #124]	; (80014ec <MX_USART3_UART_Init+0x90>)
 800146e:	2200      	movs	r2, #0
 8001470:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001472:	4b1e      	ldr	r3, [pc, #120]	; (80014ec <MX_USART3_UART_Init+0x90>)
 8001474:	2200      	movs	r2, #0
 8001476:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001478:	4b1c      	ldr	r3, [pc, #112]	; (80014ec <MX_USART3_UART_Init+0x90>)
 800147a:	2200      	movs	r2, #0
 800147c:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800147e:	4b1b      	ldr	r3, [pc, #108]	; (80014ec <MX_USART3_UART_Init+0x90>)
 8001480:	220c      	movs	r2, #12
 8001482:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001484:	4b19      	ldr	r3, [pc, #100]	; (80014ec <MX_USART3_UART_Init+0x90>)
 8001486:	2200      	movs	r2, #0
 8001488:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800148a:	4b18      	ldr	r3, [pc, #96]	; (80014ec <MX_USART3_UART_Init+0x90>)
 800148c:	2200      	movs	r2, #0
 800148e:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001490:	4b16      	ldr	r3, [pc, #88]	; (80014ec <MX_USART3_UART_Init+0x90>)
 8001492:	2200      	movs	r2, #0
 8001494:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001496:	4b15      	ldr	r3, [pc, #84]	; (80014ec <MX_USART3_UART_Init+0x90>)
 8001498:	2200      	movs	r2, #0
 800149a:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800149c:	4b13      	ldr	r3, [pc, #76]	; (80014ec <MX_USART3_UART_Init+0x90>)
 800149e:	2200      	movs	r2, #0
 80014a0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80014a2:	4812      	ldr	r0, [pc, #72]	; (80014ec <MX_USART3_UART_Init+0x90>)
 80014a4:	f005 fb16 	bl	8006ad4 <HAL_UART_Init>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 80014ae:	f000 f8a3 	bl	80015f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014b2:	2100      	movs	r1, #0
 80014b4:	480d      	ldr	r0, [pc, #52]	; (80014ec <MX_USART3_UART_Init+0x90>)
 80014b6:	f006 fc4a 	bl	8007d4e <HAL_UARTEx_SetTxFifoThreshold>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 80014c0:	f000 f89a 	bl	80015f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014c4:	2100      	movs	r1, #0
 80014c6:	4809      	ldr	r0, [pc, #36]	; (80014ec <MX_USART3_UART_Init+0x90>)
 80014c8:	f006 fc7f 	bl	8007dca <HAL_UARTEx_SetRxFifoThreshold>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 80014d2:	f000 f891 	bl	80015f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80014d6:	4805      	ldr	r0, [pc, #20]	; (80014ec <MX_USART3_UART_Init+0x90>)
 80014d8:	f006 fc00 	bl	8007cdc <HAL_UARTEx_DisableFifoMode>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 80014e2:	f000 f889 	bl	80015f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20000688 	.word	0x20000688
 80014f0:	40004800 	.word	0x40004800
 80014f4:	0007a120 	.word	0x0007a120

080014f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80014fe:	4b12      	ldr	r3, [pc, #72]	; (8001548 <MX_DMA_Init+0x50>)
 8001500:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001502:	4a11      	ldr	r2, [pc, #68]	; (8001548 <MX_DMA_Init+0x50>)
 8001504:	f043 0304 	orr.w	r3, r3, #4
 8001508:	6493      	str	r3, [r2, #72]	; 0x48
 800150a:	4b0f      	ldr	r3, [pc, #60]	; (8001548 <MX_DMA_Init+0x50>)
 800150c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800150e:	f003 0304 	and.w	r3, r3, #4
 8001512:	607b      	str	r3, [r7, #4]
 8001514:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001516:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <MX_DMA_Init+0x50>)
 8001518:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800151a:	4a0b      	ldr	r2, [pc, #44]	; (8001548 <MX_DMA_Init+0x50>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	6493      	str	r3, [r2, #72]	; 0x48
 8001522:	4b09      	ldr	r3, [pc, #36]	; (8001548 <MX_DMA_Init+0x50>)
 8001524:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	603b      	str	r3, [r7, #0]
 800152c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800152e:	2200      	movs	r2, #0
 8001530:	2100      	movs	r1, #0
 8001532:	200d      	movs	r0, #13
 8001534:	f002 fb29 	bl	8003b8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001538:	200d      	movs	r0, #13
 800153a:	f002 fb40 	bl	8003bbe <HAL_NVIC_EnableIRQ>

}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40021000 	.word	0x40021000

0800154c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b08a      	sub	sp, #40	; 0x28
 8001550:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001552:	f107 0314 	add.w	r3, r7, #20
 8001556:	2200      	movs	r2, #0
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	605a      	str	r2, [r3, #4]
 800155c:	609a      	str	r2, [r3, #8]
 800155e:	60da      	str	r2, [r3, #12]
 8001560:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001562:	4b23      	ldr	r3, [pc, #140]	; (80015f0 <MX_GPIO_Init+0xa4>)
 8001564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001566:	4a22      	ldr	r2, [pc, #136]	; (80015f0 <MX_GPIO_Init+0xa4>)
 8001568:	f043 0304 	orr.w	r3, r3, #4
 800156c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800156e:	4b20      	ldr	r3, [pc, #128]	; (80015f0 <MX_GPIO_Init+0xa4>)
 8001570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001572:	f003 0304 	and.w	r3, r3, #4
 8001576:	613b      	str	r3, [r7, #16]
 8001578:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800157a:	4b1d      	ldr	r3, [pc, #116]	; (80015f0 <MX_GPIO_Init+0xa4>)
 800157c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800157e:	4a1c      	ldr	r2, [pc, #112]	; (80015f0 <MX_GPIO_Init+0xa4>)
 8001580:	f043 0301 	orr.w	r3, r3, #1
 8001584:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001586:	4b1a      	ldr	r3, [pc, #104]	; (80015f0 <MX_GPIO_Init+0xa4>)
 8001588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001592:	4b17      	ldr	r3, [pc, #92]	; (80015f0 <MX_GPIO_Init+0xa4>)
 8001594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001596:	4a16      	ldr	r2, [pc, #88]	; (80015f0 <MX_GPIO_Init+0xa4>)
 8001598:	f043 0302 	orr.w	r3, r3, #2
 800159c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800159e:	4b14      	ldr	r3, [pc, #80]	; (80015f0 <MX_GPIO_Init+0xa4>)
 80015a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	60bb      	str	r3, [r7, #8]
 80015a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015aa:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <MX_GPIO_Init+0xa4>)
 80015ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ae:	4a10      	ldr	r2, [pc, #64]	; (80015f0 <MX_GPIO_Init+0xa4>)
 80015b0:	f043 0308 	orr.w	r3, r3, #8
 80015b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015b6:	4b0e      	ldr	r3, [pc, #56]	; (80015f0 <MX_GPIO_Init+0xa4>)
 80015b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ba:	f003 0308 	and.w	r3, r3, #8
 80015be:	607b      	str	r3, [r7, #4]
 80015c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80015c2:	2200      	movs	r2, #0
 80015c4:	21f0      	movs	r1, #240	; 0xf0
 80015c6:	480b      	ldr	r0, [pc, #44]	; (80015f4 <MX_GPIO_Init+0xa8>)
 80015c8:	f002 ff10 	bl	80043ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB4 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80015cc:	23f0      	movs	r3, #240	; 0xf0
 80015ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d0:	2301      	movs	r3, #1
 80015d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d8:	2300      	movs	r3, #0
 80015da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015dc:	f107 0314 	add.w	r3, r7, #20
 80015e0:	4619      	mov	r1, r3
 80015e2:	4804      	ldr	r0, [pc, #16]	; (80015f4 <MX_GPIO_Init+0xa8>)
 80015e4:	f002 fd80 	bl	80040e8 <HAL_GPIO_Init>

}
 80015e8:	bf00      	nop
 80015ea:	3728      	adds	r7, #40	; 0x28
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	40021000 	.word	0x40021000
 80015f4:	48000400 	.word	0x48000400

080015f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015fc:	b672      	cpsid	i
}
 80015fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001600:	e7fe      	b.n	8001600 <Error_Handler+0x8>

08001602 <main_function>:
float sp[2];
int tx = 0, rx = 0;
float speed1, speed2;
uint8_t buffer_RX[2 * sizeof(float)];
bool state [5];
void main_function(){
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0
	//servo_setup();
	//motor_setup();
	//while(1){
	//path(sp);
	//}
}
 8001606:	bf00      	nop
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <setup>:
void setup(){
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
	DCmotor_setup();
 8001614:	f000 f858 	bl	80016c8 <_Z13DCmotor_setupv>
	servo_setup();
 8001618:	f000 faf2 	bl	8001c00 <_Z11servo_setupv>
	HAL_TIM_Base_Start_IT(&htim6);
 800161c:	4802      	ldr	r0, [pc, #8]	; (8001628 <setup+0x18>)
 800161e:	f003 ff63 	bl	80054e8 <HAL_TIM_Base_Start_IT>
}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	200003e4 	.word	0x200003e4

0800162c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]

	if(huart -> Instance == UART5)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a06      	ldr	r2, [pc, #24]	; (8001654 <HAL_UART_TxCpltCallback+0x28>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d104      	bne.n	8001648 <HAL_UART_TxCpltCallback+0x1c>
        tx++;
 800163e:	4b06      	ldr	r3, [pc, #24]	; (8001658 <HAL_UART_TxCpltCallback+0x2c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	3301      	adds	r3, #1
 8001644:	4a04      	ldr	r2, [pc, #16]	; (8001658 <HAL_UART_TxCpltCallback+0x2c>)
 8001646:	6013      	str	r3, [r2, #0]

}
 8001648:	bf00      	nop
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	40005000 	.word	0x40005000
 8001658:	2000071c 	.word	0x2000071c

0800165c <HAL_TIM_PeriodElapsedCallback>:

		rx++;
	}
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef*htim){
 800165c:	b5b0      	push	{r4, r5, r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af02      	add	r7, sp, #8
 8001662:	6078      	str	r0, [r7, #4]

	if (htim -> Instance == TIM6){
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a0d      	ldr	r2, [pc, #52]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d113      	bne.n	8001696 <HAL_TIM_PeriodElapsedCallback+0x3a>

		//timer++;
		//UART_Transmit_Two_Floats_DMA(&huart5,sp[0],sp[1]);
		blockState(state[0],state[1],state[2],state[3],state[4],state[5]);/////git add
 800166e:	4b0d      	ldr	r3, [pc, #52]	; (80016a4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001670:	7818      	ldrb	r0, [r3, #0]
 8001672:	4b0c      	ldr	r3, [pc, #48]	; (80016a4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001674:	7859      	ldrb	r1, [r3, #1]
 8001676:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001678:	789c      	ldrb	r4, [r3, #2]
 800167a:	4b0a      	ldr	r3, [pc, #40]	; (80016a4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800167c:	78dd      	ldrb	r5, [r3, #3]
 800167e:	4b09      	ldr	r3, [pc, #36]	; (80016a4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001680:	791b      	ldrb	r3, [r3, #4]
 8001682:	4a08      	ldr	r2, [pc, #32]	; (80016a4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001684:	7952      	ldrb	r2, [r2, #5]
 8001686:	9201      	str	r2, [sp, #4]
 8001688:	9300      	str	r3, [sp, #0]
 800168a:	462b      	mov	r3, r5
 800168c:	4622      	mov	r2, r4
 800168e:	f000 fae3 	bl	8001c58 <_Z10blockStatebbbbbb>
		DCmotor_run();//////////
 8001692:	f000 f9f7 	bl	8001a84 <_Z11DCmotor_runv>
		//arm_run();

	}
}
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bdb0      	pop	{r4, r5, r7, pc}
 800169e:	bf00      	nop
 80016a0:	40001000 	.word	0x40001000
 80016a4:	20000720 	.word	0x20000720

080016a8 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	ed87 0a01 	vstr	s0, [r7, #4]
 80016b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80016b6:	eef0 7ae7 	vabs.f32	s15, s15
 80016ba:	eeb0 0a67 	vmov.f32	s0, s15
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <_Z13DCmotor_setupv>:
	{&motors[1],&htim2,0,0,0,20.8},
	{&motors[2],&htim20,0,0,0,64},
	{&motors[3],&htim4,0,0,0,64}
};

void DCmotor_setup(){
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_2);//motor[1]
 80016cc:	2104      	movs	r1, #4
 80016ce:	4818      	ldr	r0, [pc, #96]	; (8001730 <_Z13DCmotor_setupv+0x68>)
 80016d0:	f004 f984 	bl	80059dc <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1);
 80016d4:	2100      	movs	r1, #0
 80016d6:	4816      	ldr	r0, [pc, #88]	; (8001730 <_Z13DCmotor_setupv+0x68>)
 80016d8:	f004 f980 	bl	80059dc <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_2);//motor[2]
 80016dc:	2104      	movs	r1, #4
 80016de:	4815      	ldr	r0, [pc, #84]	; (8001734 <_Z13DCmotor_setupv+0x6c>)
 80016e0:	f004 f97c 	bl	80059dc <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_1);
 80016e4:	2100      	movs	r1, #0
 80016e6:	4813      	ldr	r0, [pc, #76]	; (8001734 <_Z13DCmotor_setupv+0x6c>)
 80016e8:	f004 f978 	bl	80059dc <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim20, TIM_CHANNEL_2);//motor[3]
 80016ec:	2104      	movs	r1, #4
 80016ee:	4812      	ldr	r0, [pc, #72]	; (8001738 <_Z13DCmotor_setupv+0x70>)
 80016f0:	f004 f974 	bl	80059dc <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim20, TIM_CHANNEL_1);
 80016f4:	2100      	movs	r1, #0
 80016f6:	4810      	ldr	r0, [pc, #64]	; (8001738 <_Z13DCmotor_setupv+0x70>)
 80016f8:	f004 f970 	bl	80059dc <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_2);//motor[3]
 80016fc:	2104      	movs	r1, #4
 80016fe:	480f      	ldr	r0, [pc, #60]	; (800173c <_Z13DCmotor_setupv+0x74>)
 8001700:	f004 f96c 	bl	80059dc <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 8001704:	2100      	movs	r1, #0
 8001706:	480d      	ldr	r0, [pc, #52]	; (800173c <_Z13DCmotor_setupv+0x74>)
 8001708:	f004 f968 	bl	80059dc <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800170c:	2100      	movs	r1, #0
 800170e:	480c      	ldr	r0, [pc, #48]	; (8001740 <_Z13DCmotor_setupv+0x78>)
 8001710:	f003 ffb2 	bl	8005678 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001714:	2104      	movs	r1, #4
 8001716:	480a      	ldr	r0, [pc, #40]	; (8001740 <_Z13DCmotor_setupv+0x78>)
 8001718:	f003 ffae 	bl	8005678 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800171c:	2108      	movs	r1, #8
 800171e:	4808      	ldr	r0, [pc, #32]	; (8001740 <_Z13DCmotor_setupv+0x78>)
 8001720:	f003 ffaa 	bl	8005678 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001724:	210c      	movs	r1, #12
 8001726:	4806      	ldr	r0, [pc, #24]	; (8001740 <_Z13DCmotor_setupv+0x78>)
 8001728:	f003 ffa6 	bl	8005678 <HAL_TIM_PWM_Start>

}
 800172c:	bf00      	nop
 800172e:	bd80      	pop	{r7, pc}
 8001730:	20000300 	.word	0x20000300
 8001734:	20000430 	.word	0x20000430
 8001738:	20000514 	.word	0x20000514
 800173c:	20000398 	.word	0x20000398
 8001740:	200002b4 	.word	0x200002b4

08001744 <_Z14PI_control_runP14PID_controllerP8DC_motor>:

void PI_control_run(PID_controller *motor,DC_motor *lifter ) {
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
    float error, u_a = 0;
 800174e:	f04f 0300 	mov.w	r3, #0
 8001752:	617b      	str	r3, [r7, #20]
    int pul = 0;
 8001754:	2300      	movs	r3, #0
 8001756:	613b      	str	r3, [r7, #16]
    float bound = 1 / motor->ki;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	ed93 7a01 	vldr	s14, [r3, #4]
 800175e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001762:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001766:	edc7 7a03 	vstr	s15, [r7, #12]

    error = motor->setpoint - lifter->speed;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	ed93 7a04 	vldr	s14, [r3, #16]
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	edd3 7a02 	vldr	s15, [r3, #8]
 8001776:	ee77 7a67 	vsub.f32	s15, s14, s15
 800177a:	edc7 7a02 	vstr	s15, [r7, #8]
    motor->integral += error * motor->span;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	ed93 7a02 	vldr	s14, [r3, #8]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	edd3 6a03 	vldr	s13, [r3, #12]
 800178a:	edd7 7a02 	vldr	s15, [r7, #8]
 800178e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001792:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	edc3 7a02 	vstr	s15, [r3, #8]
    if (motor->integral > bound) motor->integral = bound;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	edd3 7a02 	vldr	s15, [r3, #8]
 80017a2:	ed97 7a03 	vldr	s14, [r7, #12]
 80017a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ae:	d503      	bpl.n	80017b8 <_Z14PI_control_runP14PID_controllerP8DC_motor+0x74>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	609a      	str	r2, [r3, #8]
 80017b6:	e012      	b.n	80017de <_Z14PI_control_runP14PID_controllerP8DC_motor+0x9a>
    else if (motor->integral < -bound) motor->integral = -bound;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	ed93 7a02 	vldr	s14, [r3, #8]
 80017be:	edd7 7a03 	vldr	s15, [r7, #12]
 80017c2:	eef1 7a67 	vneg.f32	s15, s15
 80017c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ce:	d506      	bpl.n	80017de <_Z14PI_control_runP14PID_controllerP8DC_motor+0x9a>
 80017d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80017d4:	eef1 7a67 	vneg.f32	s15, s15
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	edc3 7a02 	vstr	s15, [r3, #8]

    u_a = motor->kp * error + motor->ki * motor->integral;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	ed93 7a00 	vldr	s14, [r3]
 80017e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80017e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	edd3 6a01 	vldr	s13, [r3, #4]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	edd3 7a02 	vldr	s15, [r3, #8]
 80017f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001800:	edc7 7a05 	vstr	s15, [r7, #20]
    if (u_a > 1) u_a = 1;
 8001804:	edd7 7a05 	vldr	s15, [r7, #20]
 8001808:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800180c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001814:	dd03      	ble.n	800181e <_Z14PI_control_runP14PID_controllerP8DC_motor+0xda>
 8001816:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800181a:	617b      	str	r3, [r7, #20]
 800181c:	e00a      	b.n	8001834 <_Z14PI_control_runP14PID_controllerP8DC_motor+0xf0>
    else if (u_a < -1) u_a = -1;
 800181e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001822:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001826:	eef4 7ac7 	vcmpe.f32	s15, s14
 800182a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800182e:	d501      	bpl.n	8001834 <_Z14PI_control_runP14PID_controllerP8DC_motor+0xf0>
 8001830:	4b3f      	ldr	r3, [pc, #252]	; (8001930 <_Z14PI_control_runP14PID_controllerP8DC_motor+0x1ec>)
 8001832:	617b      	str	r3, [r7, #20]

    if (u_a > 0) {
 8001834:	edd7 7a05 	vldr	s15, [r7, #20]
 8001838:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800183c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001840:	dd17      	ble.n	8001872 <_Z14PI_control_runP14PID_controllerP8DC_motor+0x12e>
        pul = (int)(u_a * motor->arr);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	695b      	ldr	r3, [r3, #20]
 8001846:	ee07 3a90 	vmov	s15, r3
 800184a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800184e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001856:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800185a:	ee17 3a90 	vmov	r3, s15
 800185e:	613b      	str	r3, [r7, #16]
        HAL_GPIO_WritePin(motor->gpioPort, motor->gpioPin, GPIO_PIN_SET);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6998      	ldr	r0, [r3, #24]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	8b9b      	ldrh	r3, [r3, #28]
 8001868:	2201      	movs	r2, #1
 800186a:	4619      	mov	r1, r3
 800186c:	f002 fdbe 	bl	80043ec <HAL_GPIO_WritePin>
 8001870:	e022      	b.n	80018b8 <_Z14PI_control_runP14PID_controllerP8DC_motor+0x174>
    } else if (u_a < 0) {
 8001872:	edd7 7a05 	vldr	s15, [r7, #20]
 8001876:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800187a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800187e:	d519      	bpl.n	80018b4 <_Z14PI_control_runP14PID_controllerP8DC_motor+0x170>
        pul = (int)(-u_a * motor->arr);
 8001880:	edd7 7a05 	vldr	s15, [r7, #20]
 8001884:	eeb1 7a67 	vneg.f32	s14, s15
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	695b      	ldr	r3, [r3, #20]
 800188c:	ee07 3a90 	vmov	s15, r3
 8001890:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001894:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001898:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800189c:	ee17 3a90 	vmov	r3, s15
 80018a0:	613b      	str	r3, [r7, #16]
        HAL_GPIO_WritePin(motor->gpioPort, motor->gpioPin, GPIO_PIN_RESET);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6998      	ldr	r0, [r3, #24]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	8b9b      	ldrh	r3, [r3, #28]
 80018aa:	2200      	movs	r2, #0
 80018ac:	4619      	mov	r1, r3
 80018ae:	f002 fd9d 	bl	80043ec <HAL_GPIO_WritePin>
 80018b2:	e001      	b.n	80018b8 <_Z14PI_control_runP14PID_controllerP8DC_motor+0x174>
    } else {
        pul = 0;
 80018b4:	2300      	movs	r3, #0
 80018b6:	613b      	str	r3, [r7, #16]
    }
    __HAL_TIM_SET_COMPARE(motor->htim, motor->TIM_CHANNEL, pul);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d105      	bne.n	80018cc <_Z14PI_control_runP14PID_controllerP8DC_motor+0x188>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6a1b      	ldr	r3, [r3, #32]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80018ca:	e02c      	b.n	8001926 <_Z14PI_control_runP14PID_controllerP8DC_motor+0x1e2>
    __HAL_TIM_SET_COMPARE(motor->htim, motor->TIM_CHANNEL, pul);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d0:	2b04      	cmp	r3, #4
 80018d2:	d105      	bne.n	80018e0 <_Z14PI_control_runP14PID_controllerP8DC_motor+0x19c>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a1b      	ldr	r3, [r3, #32]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	639a      	str	r2, [r3, #56]	; 0x38
}
 80018de:	e022      	b.n	8001926 <_Z14PI_control_runP14PID_controllerP8DC_motor+0x1e2>
    __HAL_TIM_SET_COMPARE(motor->htim, motor->TIM_CHANNEL, pul);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e4:	2b08      	cmp	r3, #8
 80018e6:	d105      	bne.n	80018f4 <_Z14PI_control_runP14PID_controllerP8DC_motor+0x1b0>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6a1b      	ldr	r3, [r3, #32]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80018f2:	e018      	b.n	8001926 <_Z14PI_control_runP14PID_controllerP8DC_motor+0x1e2>
    __HAL_TIM_SET_COMPARE(motor->htim, motor->TIM_CHANNEL, pul);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f8:	2b0c      	cmp	r3, #12
 80018fa:	d105      	bne.n	8001908 <_Z14PI_control_runP14PID_controllerP8DC_motor+0x1c4>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6a1b      	ldr	r3, [r3, #32]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001906:	e00e      	b.n	8001926 <_Z14PI_control_runP14PID_controllerP8DC_motor+0x1e2>
    __HAL_TIM_SET_COMPARE(motor->htim, motor->TIM_CHANNEL, pul);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190c:	2b10      	cmp	r3, #16
 800190e:	d105      	bne.n	800191c <_Z14PI_control_runP14PID_controllerP8DC_motor+0x1d8>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6a1b      	ldr	r3, [r3, #32]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	649a      	str	r2, [r3, #72]	; 0x48
}
 800191a:	e004      	b.n	8001926 <_Z14PI_control_runP14PID_controllerP8DC_motor+0x1e2>
    __HAL_TIM_SET_COMPARE(motor->htim, motor->TIM_CHANNEL, pul);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6a1b      	ldr	r3, [r3, #32]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001926:	bf00      	nop
 8001928:	3718      	adds	r7, #24
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	bf800000 	.word	0xbf800000

08001934 <_Z8getStateP8DC_motori>:

void getState(DC_motor *lifter,int sign){
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
	int16_t enc ;
	enc = __HAL_TIM_GetCounter(lifter->htim);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001946:	81fb      	strh	r3, [r7, #14]
	lifter->speed = (float)enc /(4*resolution*lifter->reduction_ratio*span);
 8001948:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800194c:	ee07 3a90 	vmov	s15, r3
 8001950:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	edd3 7a05 	vldr	s15, [r3, #20]
 800195a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80019bc <_Z8getStateP8DC_motori+0x88>
 800195e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001962:	4b17      	ldr	r3, [pc, #92]	; (80019c0 <_Z8getStateP8DC_motori+0x8c>)
 8001964:	edd3 7a00 	vldr	s15, [r3]
 8001968:	ee27 7a27 	vmul.f32	s14, s14, s15
 800196c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	edc3 7a02 	vstr	s15, [r3, #8]
	__HAL_TIM_SetCounter(lifter->htim,0);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2200      	movs	r2, #0
 800197e:	625a      	str	r2, [r3, #36]	; 0x24
	lifter->currentHeight += lifter->speed*span*sign;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	ed93 7a03 	vldr	s14, [r3, #12]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	edd3 6a02 	vldr	s13, [r3, #8]
 800198c:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <_Z8getStateP8DC_motori+0x8c>)
 800198e:	edd3 7a00 	vldr	s15, [r3]
 8001992:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	ee07 3a90 	vmov	s15, r3
 800199c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	edc3 7a03 	vstr	s15, [r3, #12]
}
 80019ae:	bf00      	nop
 80019b0:	3714      	adds	r7, #20
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	45000000 	.word	0x45000000
 80019c0:	20000014 	.word	0x20000014
 80019c4:	00000000 	.word	0x00000000

080019c8 <_Z14set_goalHeightP14PID_controllerP8DC_motorf>:
void set_goalHeight(PID_controller *motor, DC_motor *lifter,float height_setpoint){
 80019c8:	b590      	push	{r4, r7, lr}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	ed87 0a01 	vstr	s0, [r7, #4]
	lifter->goalHeight = height_setpoint;
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	611a      	str	r2, [r3, #16]
	if (abs(lifter->currentHeight - lifter->goalHeight) >= epsilon){
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	ed93 7a03 	vldr	s14, [r3, #12]
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	edd3 7a04 	vldr	s15, [r3, #16]
 80019e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019ec:	eeb0 0a67 	vmov.f32	s0, s15
 80019f0:	f7ff fe5a 	bl	80016a8 <_ZSt3absf>
 80019f4:	ee10 3a10 	vmov	r3, s0
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7fe fd71 	bl	80004e0 <__aeabi_f2d>
 80019fe:	2301      	movs	r3, #1
 8001a00:	461c      	mov	r4, r3
 8001a02:	a31e      	add	r3, pc, #120	; (adr r3, 8001a7c <_Z14set_goalHeightP14PID_controllerP8DC_motorf+0xb4>)
 8001a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a08:	f7fe fe36 	bl	8000678 <__aeabi_dcmpge>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d101      	bne.n	8001a16 <_Z14set_goalHeightP14PID_controllerP8DC_motorf+0x4e>
 8001a12:	2300      	movs	r3, #0
 8001a14:	461c      	mov	r4, r3
 8001a16:	b2e3      	uxtb	r3, r4
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d020      	beq.n	8001a5e <_Z14set_goalHeightP14PID_controllerP8DC_motorf+0x96>
		if(lifter->goalHeight >= lifter->currentHeight){
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	edd3 7a03 	vldr	s15, [r3, #12]
 8001a28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a30:	db04      	blt.n	8001a3c <_Z14set_goalHeightP14PID_controllerP8DC_motorf+0x74>
		    motor->setpoint = -0.5;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	f04f 423f 	mov.w	r2, #3204448256	; 0xbf000000
 8001a38:	611a      	str	r2, [r3, #16]
			motor->setpoint = 0.5;
		}
	}else{
		motor->setpoint = 0;l++;
	}
}
 8001a3a:	e019      	b.n	8001a70 <_Z14set_goalHeightP14PID_controllerP8DC_motorf+0xa8>
		}else if(lifter->goalHeight <= lifter->currentHeight){
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	edd3 7a03 	vldr	s15, [r3, #12]
 8001a48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a50:	d900      	bls.n	8001a54 <_Z14set_goalHeightP14PID_controllerP8DC_motorf+0x8c>
}
 8001a52:	e00d      	b.n	8001a70 <_Z14set_goalHeightP14PID_controllerP8DC_motorf+0xa8>
			motor->setpoint = 0.5;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001a5a:	611a      	str	r2, [r3, #16]
}
 8001a5c:	e008      	b.n	8001a70 <_Z14set_goalHeightP14PID_controllerP8DC_motorf+0xa8>
		motor->setpoint = 0;l++;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f04f 0200 	mov.w	r2, #0
 8001a64:	611a      	str	r2, [r3, #16]
 8001a66:	4b04      	ldr	r3, [pc, #16]	; (8001a78 <_Z14set_goalHeightP14PID_controllerP8DC_motorf+0xb0>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	4a02      	ldr	r2, [pc, #8]	; (8001a78 <_Z14set_goalHeightP14PID_controllerP8DC_motorf+0xb0>)
 8001a6e:	6013      	str	r3, [r2, #0]
}
 8001a70:	bf00      	nop
 8001a72:	3714      	adds	r7, #20
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd90      	pop	{r4, r7, pc}
 8001a78:	2000073c 	.word	0x2000073c
 8001a7c:	47ae147b 	.word	0x47ae147b
 8001a80:	3f847ae1 	.word	0x3f847ae1

08001a84 <_Z11DCmotor_runv>:
void DCmotor_run(){
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
	getState(&DCmotorlifer[0],-1);//encoder1
 8001a88:	f04f 31ff 	mov.w	r1, #4294967295
 8001a8c:	4824      	ldr	r0, [pc, #144]	; (8001b20 <_Z11DCmotor_runv+0x9c>)
 8001a8e:	f7ff ff51 	bl	8001934 <_Z8getStateP8DC_motori>
	getState(&DCmotorlifer[1],1);//encoder2//left,- when+
 8001a92:	2101      	movs	r1, #1
 8001a94:	4823      	ldr	r0, [pc, #140]	; (8001b24 <_Z11DCmotor_runv+0xa0>)
 8001a96:	f7ff ff4d 	bl	8001934 <_Z8getStateP8DC_motori>
	getState(&DCmotorlifer[2],1);//encoder4//right,+ when +
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	4822      	ldr	r0, [pc, #136]	; (8001b28 <_Z11DCmotor_runv+0xa4>)
 8001a9e:	f7ff ff49 	bl	8001934 <_Z8getStateP8DC_motori>
	getState(&DCmotorlifer[3],1);
 8001aa2:	2101      	movs	r1, #1
 8001aa4:	4821      	ldr	r0, [pc, #132]	; (8001b2c <_Z11DCmotor_runv+0xa8>)
 8001aa6:	f7ff ff45 	bl	8001934 <_Z8getStateP8DC_motori>
	PI_control_run(&motors[0], &DCmotorlifer[0]);
 8001aaa:	491d      	ldr	r1, [pc, #116]	; (8001b20 <_Z11DCmotor_runv+0x9c>)
 8001aac:	4820      	ldr	r0, [pc, #128]	; (8001b30 <_Z11DCmotor_runv+0xac>)
 8001aae:	f7ff fe49 	bl	8001744 <_Z14PI_control_runP14PID_controllerP8DC_motor>
	PI_control_run(&motors[1], &DCmotorlifer[1]);
 8001ab2:	491c      	ldr	r1, [pc, #112]	; (8001b24 <_Z11DCmotor_runv+0xa0>)
 8001ab4:	481f      	ldr	r0, [pc, #124]	; (8001b34 <_Z11DCmotor_runv+0xb0>)
 8001ab6:	f7ff fe45 	bl	8001744 <_Z14PI_control_runP14PID_controllerP8DC_motor>
	PI_control_run(&motors[2], &DCmotorlifer[2]);
 8001aba:	491b      	ldr	r1, [pc, #108]	; (8001b28 <_Z11DCmotor_runv+0xa4>)
 8001abc:	481e      	ldr	r0, [pc, #120]	; (8001b38 <_Z11DCmotor_runv+0xb4>)
 8001abe:	f7ff fe41 	bl	8001744 <_Z14PI_control_runP14PID_controllerP8DC_motor>
	PI_control_run(&motors[2], &DCmotorlifer[3]);
 8001ac2:	491a      	ldr	r1, [pc, #104]	; (8001b2c <_Z11DCmotor_runv+0xa8>)
 8001ac4:	481c      	ldr	r0, [pc, #112]	; (8001b38 <_Z11DCmotor_runv+0xb4>)
 8001ac6:	f7ff fe3d 	bl	8001744 <_Z14PI_control_runP14PID_controllerP8DC_motor>
	set_goalHeight(&motors[0], &DCmotorlifer[0],goalHeight[0]);
 8001aca:	4b1c      	ldr	r3, [pc, #112]	; (8001b3c <_Z11DCmotor_runv+0xb8>)
 8001acc:	edd3 7a00 	vldr	s15, [r3]
 8001ad0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ad4:	4912      	ldr	r1, [pc, #72]	; (8001b20 <_Z11DCmotor_runv+0x9c>)
 8001ad6:	4816      	ldr	r0, [pc, #88]	; (8001b30 <_Z11DCmotor_runv+0xac>)
 8001ad8:	f7ff ff76 	bl	80019c8 <_Z14set_goalHeightP14PID_controllerP8DC_motorf>
	set_goalHeight(&motors[1], &DCmotorlifer[1],goalHeight[1]);
 8001adc:	4b17      	ldr	r3, [pc, #92]	; (8001b3c <_Z11DCmotor_runv+0xb8>)
 8001ade:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ae2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ae6:	490f      	ldr	r1, [pc, #60]	; (8001b24 <_Z11DCmotor_runv+0xa0>)
 8001ae8:	4812      	ldr	r0, [pc, #72]	; (8001b34 <_Z11DCmotor_runv+0xb0>)
 8001aea:	f7ff ff6d 	bl	80019c8 <_Z14set_goalHeightP14PID_controllerP8DC_motorf>
	set_goalHeight(&motors[2], &DCmotorlifer[2],goalHeight[2]);
 8001aee:	4b13      	ldr	r3, [pc, #76]	; (8001b3c <_Z11DCmotor_runv+0xb8>)
 8001af0:	edd3 7a02 	vldr	s15, [r3, #8]
 8001af4:	eeb0 0a67 	vmov.f32	s0, s15
 8001af8:	490b      	ldr	r1, [pc, #44]	; (8001b28 <_Z11DCmotor_runv+0xa4>)
 8001afa:	480f      	ldr	r0, [pc, #60]	; (8001b38 <_Z11DCmotor_runv+0xb4>)
 8001afc:	f7ff ff64 	bl	80019c8 <_Z14set_goalHeightP14PID_controllerP8DC_motorf>
	set_goalHeight(&motors[3], &DCmotorlifer[3],goalHeight[3]);
 8001b00:	4b0e      	ldr	r3, [pc, #56]	; (8001b3c <_Z11DCmotor_runv+0xb8>)
 8001b02:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b06:	eeb0 0a67 	vmov.f32	s0, s15
 8001b0a:	4908      	ldr	r1, [pc, #32]	; (8001b2c <_Z11DCmotor_runv+0xa8>)
 8001b0c:	480c      	ldr	r0, [pc, #48]	; (8001b40 <_Z11DCmotor_runv+0xbc>)
 8001b0e:	f7ff ff5b 	bl	80019c8 <_Z14set_goalHeightP14PID_controllerP8DC_motorf>
	motor_run++;
 8001b12:	4b0c      	ldr	r3, [pc, #48]	; (8001b44 <_Z11DCmotor_runv+0xc0>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	3301      	adds	r3, #1
 8001b18:	4a0a      	ldr	r2, [pc, #40]	; (8001b44 <_Z11DCmotor_runv+0xc0>)
 8001b1a:	6013      	str	r3, [r2, #0]
	}
 8001b1c:	bf00      	nop
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	200000b8 	.word	0x200000b8
 8001b24:	200000d0 	.word	0x200000d0
 8001b28:	200000e8 	.word	0x200000e8
 8001b2c:	20000100 	.word	0x20000100
 8001b30:	20000018 	.word	0x20000018
 8001b34:	20000040 	.word	0x20000040
 8001b38:	20000068 	.word	0x20000068
 8001b3c:	2000072c 	.word	0x2000072c
 8001b40:	20000090 	.word	0x20000090
 8001b44:	20000728 	.word	0x20000728

08001b48 <_Z41__static_initialization_and_destruction_0ii>:
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d136      	bne.n	8001bc6 <_Z41__static_initialization_and_destruction_0ii+0x7e>
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d131      	bne.n	8001bc6 <_Z41__static_initialization_and_destruction_0ii+0x7e>
};
 8001b62:	4b1c      	ldr	r3, [pc, #112]	; (8001bd4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a1c      	ldr	r2, [pc, #112]	; (8001bd8 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8001b68:	6013      	str	r3, [r2, #0]
 8001b6a:	4b1c      	ldr	r3, [pc, #112]	; (8001bdc <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a1a      	ldr	r2, [pc, #104]	; (8001bd8 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8001b70:	6053      	str	r3, [r2, #4]
 8001b72:	4b1b      	ldr	r3, [pc, #108]	; (8001be0 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a18      	ldr	r2, [pc, #96]	; (8001bd8 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8001b78:	60d3      	str	r3, [r2, #12]
 8001b7a:	4b1a      	ldr	r3, [pc, #104]	; (8001be4 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a16      	ldr	r2, [pc, #88]	; (8001bd8 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8001b80:	6153      	str	r3, [r2, #20]
 8001b82:	4b19      	ldr	r3, [pc, #100]	; (8001be8 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a14      	ldr	r2, [pc, #80]	; (8001bd8 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8001b88:	6293      	str	r3, [r2, #40]	; 0x28
 8001b8a:	4b18      	ldr	r3, [pc, #96]	; (8001bec <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a12      	ldr	r2, [pc, #72]	; (8001bd8 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8001b90:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001b92:	4b13      	ldr	r3, [pc, #76]	; (8001be0 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a10      	ldr	r2, [pc, #64]	; (8001bd8 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8001b98:	6353      	str	r3, [r2, #52]	; 0x34
 8001b9a:	4b12      	ldr	r3, [pc, #72]	; (8001be4 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a0e      	ldr	r2, [pc, #56]	; (8001bd8 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8001ba0:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001ba2:	4b0f      	ldr	r3, [pc, #60]	; (8001be0 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a0c      	ldr	r2, [pc, #48]	; (8001bd8 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8001ba8:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001baa:	4b0e      	ldr	r3, [pc, #56]	; (8001be4 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a0a      	ldr	r2, [pc, #40]	; (8001bd8 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8001bb0:	6653      	str	r3, [r2, #100]	; 0x64
 8001bb2:	4b0b      	ldr	r3, [pc, #44]	; (8001be0 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a08      	ldr	r2, [pc, #32]	; (8001bd8 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8001bb8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8001bbc:	4b09      	ldr	r3, [pc, #36]	; (8001be4 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a05      	ldr	r2, [pc, #20]	; (8001bd8 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8001bc2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	}
 8001bc6:	bf00      	nop
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	2000000c 	.word	0x2000000c
 8001bd8:	20000018 	.word	0x20000018
 8001bdc:	20000004 	.word	0x20000004
 8001be0:	20000014 	.word	0x20000014
 8001be4:	20000010 	.word	0x20000010
 8001be8:	20000008 	.word	0x20000008
 8001bec:	20000000 	.word	0x20000000

08001bf0 <_GLOBAL__sub_I_ki>:
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001bf8:	2001      	movs	r0, #1
 8001bfa:	f7ff ffa5 	bl	8001b48 <_Z41__static_initialization_and_destruction_0ii>
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <_Z11servo_setupv>:
servo servo_c{0,0,0,2000,true, &htim3, TIM_CHANNEL_3 };//FL
servo servo_d{0,0,0,2000,true, &htim3, TIM_CHANNEL_4 };//BR
servo servo_e{0,0,0,2000,true, &htim15, TIM_CHANNEL_1 };//BM
servo servo_f{0,0,0,2000,true, &htim15, TIM_CHANNEL_2 };//BL
//servo servo_a{0,0,0,2000,true, &htim3, TIM_CHANNEL_1 };
void servo_setup(){
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001c04:	2100      	movs	r1, #0
 8001c06:	4808      	ldr	r0, [pc, #32]	; (8001c28 <_Z11servo_setupv+0x28>)
 8001c08:	f003 fd36 	bl	8005678 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001c0c:	2104      	movs	r1, #4
 8001c0e:	4806      	ldr	r0, [pc, #24]	; (8001c28 <_Z11servo_setupv+0x28>)
 8001c10:	f003 fd32 	bl	8005678 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001c14:	2108      	movs	r1, #8
 8001c16:	4804      	ldr	r0, [pc, #16]	; (8001c28 <_Z11servo_setupv+0x28>)
 8001c18:	f003 fd2e 	bl	8005678 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001c1c:	210c      	movs	r1, #12
 8001c1e:	4802      	ldr	r0, [pc, #8]	; (8001c28 <_Z11servo_setupv+0x28>)
 8001c20:	f003 fd2a 	bl	8005678 <HAL_TIM_PWM_Start>
	//HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
	//HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
}
 8001c24:	bf00      	nop
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	2000034c 	.word	0x2000034c

08001c2c <_Z10servo_moveP5servofi>:
void servo_move(servo*servo,float goalAngle,int responseTime){
 8001c2c:	b480      	push	{r7}
 8001c2e:	b085      	sub	sp, #20
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	ed87 0a02 	vstr	s0, [r7, #8]
 8001c38:	6079      	str	r1, [r7, #4]
	servo -> goalAngle = goalAngle;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	68ba      	ldr	r2, [r7, #8]
 8001c3e:	605a      	str	r2, [r3, #4]
	servo -> responseTime = responseTime;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	60da      	str	r2, [r3, #12]
	servo -> move = true;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	741a      	strb	r2, [r3, #16]
}
 8001c4c:	bf00      	nop
 8001c4e:	3714      	adds	r7, #20
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <_Z10blockStatebbbbbb>:
         t++;
        }
	}
}

void blockState(bool state_a,bool state_b,bool state_c,bool state_d,bool state_e,bool state_f){
 8001c58:	b590      	push	{r4, r7, lr}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	4604      	mov	r4, r0
 8001c60:	4608      	mov	r0, r1
 8001c62:	4611      	mov	r1, r2
 8001c64:	461a      	mov	r2, r3
 8001c66:	4623      	mov	r3, r4
 8001c68:	71fb      	strb	r3, [r7, #7]
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	71bb      	strb	r3, [r7, #6]
 8001c6e:	460b      	mov	r3, r1
 8001c70:	717b      	strb	r3, [r7, #5]
 8001c72:	4613      	mov	r3, r2
 8001c74:	713b      	strb	r3, [r7, #4]
	//true open ,false close
	if (state_a == true){
 8001c76:	79fb      	ldrb	r3, [r7, #7]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d107      	bne.n	8001c8c <_Z10blockStatebbbbbb+0x34>
		servo_move(&servo_a, 180,1000);
 8001c7c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c80:	ed9f 0a35 	vldr	s0, [pc, #212]	; 8001d58 <_Z10blockStatebbbbbb+0x100>
 8001c84:	4835      	ldr	r0, [pc, #212]	; (8001d5c <_Z10blockStatebbbbbb+0x104>)
 8001c86:	f7ff ffd1 	bl	8001c2c <_Z10servo_moveP5servofi>
 8001c8a:	e006      	b.n	8001c9a <_Z10blockStatebbbbbb+0x42>
	}else{
		servo_move(&servo_a, 1,1000);
 8001c8c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c90:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001c94:	4831      	ldr	r0, [pc, #196]	; (8001d5c <_Z10blockStatebbbbbb+0x104>)
 8001c96:	f7ff ffc9 	bl	8001c2c <_Z10servo_moveP5servofi>
	}
	if (state_b == true){
 8001c9a:	79bb      	ldrb	r3, [r7, #6]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d107      	bne.n	8001cb0 <_Z10blockStatebbbbbb+0x58>
		servo_move(&servo_b, 40,1000);
 8001ca0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001ca4:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8001d60 <_Z10blockStatebbbbbb+0x108>
 8001ca8:	482e      	ldr	r0, [pc, #184]	; (8001d64 <_Z10blockStatebbbbbb+0x10c>)
 8001caa:	f7ff ffbf 	bl	8001c2c <_Z10servo_moveP5servofi>
 8001cae:	e006      	b.n	8001cbe <_Z10blockStatebbbbbb+0x66>
	}else{
		servo_move(&servo_b, 180,1000);
 8001cb0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001cb4:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8001d58 <_Z10blockStatebbbbbb+0x100>
 8001cb8:	482a      	ldr	r0, [pc, #168]	; (8001d64 <_Z10blockStatebbbbbb+0x10c>)
 8001cba:	f7ff ffb7 	bl	8001c2c <_Z10servo_moveP5servofi>
		}
	if (state_c == true){
 8001cbe:	797b      	ldrb	r3, [r7, #5]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d107      	bne.n	8001cd4 <_Z10blockStatebbbbbb+0x7c>
		servo_move(&servo_c, 40,1000);
 8001cc4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001cc8:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8001d60 <_Z10blockStatebbbbbb+0x108>
 8001ccc:	4826      	ldr	r0, [pc, #152]	; (8001d68 <_Z10blockStatebbbbbb+0x110>)
 8001cce:	f7ff ffad 	bl	8001c2c <_Z10servo_moveP5servofi>
 8001cd2:	e006      	b.n	8001ce2 <_Z10blockStatebbbbbb+0x8a>
	}else{
		servo_move(&servo_c, 180,1000);
 8001cd4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001cd8:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8001d58 <_Z10blockStatebbbbbb+0x100>
 8001cdc:	4822      	ldr	r0, [pc, #136]	; (8001d68 <_Z10blockStatebbbbbb+0x110>)
 8001cde:	f7ff ffa5 	bl	8001c2c <_Z10servo_moveP5servofi>
	}
	if (state_d == true){
 8001ce2:	793b      	ldrb	r3, [r7, #4]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d107      	bne.n	8001cf8 <_Z10blockStatebbbbbb+0xa0>
		servo_move(&servo_d, 1,1000);
 8001ce8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001cec:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001cf0:	481e      	ldr	r0, [pc, #120]	; (8001d6c <_Z10blockStatebbbbbb+0x114>)
 8001cf2:	f7ff ff9b 	bl	8001c2c <_Z10servo_moveP5servofi>
 8001cf6:	e006      	b.n	8001d06 <_Z10blockStatebbbbbb+0xae>
	}else{
		servo_move(&servo_d, 180,1000);
 8001cf8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001cfc:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8001d58 <_Z10blockStatebbbbbb+0x100>
 8001d00:	481a      	ldr	r0, [pc, #104]	; (8001d6c <_Z10blockStatebbbbbb+0x114>)
 8001d02:	f7ff ff93 	bl	8001c2c <_Z10servo_moveP5servofi>
		}
	if (state_e == true){
 8001d06:	7e3b      	ldrb	r3, [r7, #24]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d107      	bne.n	8001d1c <_Z10blockStatebbbbbb+0xc4>
		servo_move(&servo_e, 180,1000);
 8001d0c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d10:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8001d58 <_Z10blockStatebbbbbb+0x100>
 8001d14:	4816      	ldr	r0, [pc, #88]	; (8001d70 <_Z10blockStatebbbbbb+0x118>)
 8001d16:	f7ff ff89 	bl	8001c2c <_Z10servo_moveP5servofi>
 8001d1a:	e006      	b.n	8001d2a <_Z10blockStatebbbbbb+0xd2>
	}else{
		servo_move(&servo_e, 40,1000);
 8001d1c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d20:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8001d60 <_Z10blockStatebbbbbb+0x108>
 8001d24:	4812      	ldr	r0, [pc, #72]	; (8001d70 <_Z10blockStatebbbbbb+0x118>)
 8001d26:	f7ff ff81 	bl	8001c2c <_Z10servo_moveP5servofi>
		}
	if (state_f == true){
 8001d2a:	7f3b      	ldrb	r3, [r7, #28]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d107      	bne.n	8001d40 <_Z10blockStatebbbbbb+0xe8>
		servo_move(&servo_f, 180,1000);
 8001d30:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d34:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8001d58 <_Z10blockStatebbbbbb+0x100>
 8001d38:	480e      	ldr	r0, [pc, #56]	; (8001d74 <_Z10blockStatebbbbbb+0x11c>)
 8001d3a:	f7ff ff77 	bl	8001c2c <_Z10servo_moveP5servofi>
	}else{
		servo_move(&servo_f, 40,1000);
		}
}
 8001d3e:	e006      	b.n	8001d4e <_Z10blockStatebbbbbb+0xf6>
		servo_move(&servo_f, 40,1000);
 8001d40:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d44:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8001d60 <_Z10blockStatebbbbbb+0x108>
 8001d48:	480a      	ldr	r0, [pc, #40]	; (8001d74 <_Z10blockStatebbbbbb+0x11c>)
 8001d4a:	f7ff ff6f 	bl	8001c2c <_Z10servo_moveP5servofi>
}
 8001d4e:	bf00      	nop
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd90      	pop	{r4, r7, pc}
 8001d56:	bf00      	nop
 8001d58:	43340000 	.word	0x43340000
 8001d5c:	20000118 	.word	0x20000118
 8001d60:	42200000 	.word	0x42200000
 8001d64:	20000134 	.word	0x20000134
 8001d68:	20000150 	.word	0x20000150
 8001d6c:	2000016c 	.word	0x2000016c
 8001d70:	20000188 	.word	0x20000188
 8001d74:	200001a4 	.word	0x200001a4

08001d78 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d7e:	4b0f      	ldr	r3, [pc, #60]	; (8001dbc <HAL_MspInit+0x44>)
 8001d80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d82:	4a0e      	ldr	r2, [pc, #56]	; (8001dbc <HAL_MspInit+0x44>)
 8001d84:	f043 0301 	orr.w	r3, r3, #1
 8001d88:	6613      	str	r3, [r2, #96]	; 0x60
 8001d8a:	4b0c      	ldr	r3, [pc, #48]	; (8001dbc <HAL_MspInit+0x44>)
 8001d8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	607b      	str	r3, [r7, #4]
 8001d94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d96:	4b09      	ldr	r3, [pc, #36]	; (8001dbc <HAL_MspInit+0x44>)
 8001d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d9a:	4a08      	ldr	r2, [pc, #32]	; (8001dbc <HAL_MspInit+0x44>)
 8001d9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001da0:	6593      	str	r3, [r2, #88]	; 0x58
 8001da2:	4b06      	ldr	r3, [pc, #24]	; (8001dbc <HAL_MspInit+0x44>)
 8001da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001daa:	603b      	str	r3, [r7, #0]
 8001dac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	40021000 	.word	0x40021000

08001dc0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b0a0      	sub	sp, #128	; 0x80
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	605a      	str	r2, [r3, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
 8001dd4:	60da      	str	r2, [r3, #12]
 8001dd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001dd8:	f107 031c 	add.w	r3, r7, #28
 8001ddc:	2250      	movs	r2, #80	; 0x50
 8001dde:	2100      	movs	r1, #0
 8001de0:	4618      	mov	r0, r3
 8001de2:	f006 f8a3 	bl	8007f2c <memset>
  if(hadc->Instance==ADC1)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001dee:	f040 8091 	bne.w	8001f14 <HAL_ADC_MspInit+0x154>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001df2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001df6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001df8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001dfc:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dfe:	f107 031c 	add.w	r3, r7, #28
 8001e02:	4618      	mov	r0, r3
 8001e04:	f003 f8dc 	bl	8004fc0 <HAL_RCCEx_PeriphCLKConfig>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8001e0e:	f7ff fbf3 	bl	80015f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001e12:	4b42      	ldr	r3, [pc, #264]	; (8001f1c <HAL_ADC_MspInit+0x15c>)
 8001e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e16:	4a41      	ldr	r2, [pc, #260]	; (8001f1c <HAL_ADC_MspInit+0x15c>)
 8001e18:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e1e:	4b3f      	ldr	r3, [pc, #252]	; (8001f1c <HAL_ADC_MspInit+0x15c>)
 8001e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e26:	61bb      	str	r3, [r7, #24]
 8001e28:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e2a:	4b3c      	ldr	r3, [pc, #240]	; (8001f1c <HAL_ADC_MspInit+0x15c>)
 8001e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e2e:	4a3b      	ldr	r2, [pc, #236]	; (8001f1c <HAL_ADC_MspInit+0x15c>)
 8001e30:	f043 0304 	orr.w	r3, r3, #4
 8001e34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e36:	4b39      	ldr	r3, [pc, #228]	; (8001f1c <HAL_ADC_MspInit+0x15c>)
 8001e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e3a:	f003 0304 	and.w	r3, r3, #4
 8001e3e:	617b      	str	r3, [r7, #20]
 8001e40:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e42:	4b36      	ldr	r3, [pc, #216]	; (8001f1c <HAL_ADC_MspInit+0x15c>)
 8001e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e46:	4a35      	ldr	r2, [pc, #212]	; (8001f1c <HAL_ADC_MspInit+0x15c>)
 8001e48:	f043 0301 	orr.w	r3, r3, #1
 8001e4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e4e:	4b33      	ldr	r3, [pc, #204]	; (8001f1c <HAL_ADC_MspInit+0x15c>)
 8001e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	613b      	str	r3, [r7, #16]
 8001e58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e5a:	4b30      	ldr	r3, [pc, #192]	; (8001f1c <HAL_ADC_MspInit+0x15c>)
 8001e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e5e:	4a2f      	ldr	r2, [pc, #188]	; (8001f1c <HAL_ADC_MspInit+0x15c>)
 8001e60:	f043 0302 	orr.w	r3, r3, #2
 8001e64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e66:	4b2d      	ldr	r3, [pc, #180]	; (8001f1c <HAL_ADC_MspInit+0x15c>)
 8001e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB11     ------> ADC1_IN14
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e72:	2303      	movs	r3, #3
 8001e74:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e76:	2303      	movs	r3, #3
 8001e78:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e7e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e82:	4619      	mov	r1, r3
 8001e84:	4826      	ldr	r0, [pc, #152]	; (8001f20 <HAL_ADC_MspInit+0x160>)
 8001e86:	f002 f92f 	bl	80040e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e92:	2300      	movs	r3, #0
 8001e94:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e96:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ea0:	f002 f922 	bl	80040e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_11|GPIO_PIN_12;
 8001ea4:	f641 0301 	movw	r3, #6145	; 0x1801
 8001ea8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	481a      	ldr	r0, [pc, #104]	; (8001f24 <HAL_ADC_MspInit+0x164>)
 8001eba:	f002 f915 	bl	80040e8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 8001ebe:	4b1a      	ldr	r3, [pc, #104]	; (8001f28 <HAL_ADC_MspInit+0x168>)
 8001ec0:	4a1a      	ldr	r2, [pc, #104]	; (8001f2c <HAL_ADC_MspInit+0x16c>)
 8001ec2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001ec4:	4b18      	ldr	r3, [pc, #96]	; (8001f28 <HAL_ADC_MspInit+0x168>)
 8001ec6:	2205      	movs	r2, #5
 8001ec8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001eca:	4b17      	ldr	r3, [pc, #92]	; (8001f28 <HAL_ADC_MspInit+0x168>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ed0:	4b15      	ldr	r3, [pc, #84]	; (8001f28 <HAL_ADC_MspInit+0x168>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001ed6:	4b14      	ldr	r3, [pc, #80]	; (8001f28 <HAL_ADC_MspInit+0x168>)
 8001ed8:	2280      	movs	r2, #128	; 0x80
 8001eda:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001edc:	4b12      	ldr	r3, [pc, #72]	; (8001f28 <HAL_ADC_MspInit+0x168>)
 8001ede:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ee2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ee4:	4b10      	ldr	r3, [pc, #64]	; (8001f28 <HAL_ADC_MspInit+0x168>)
 8001ee6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001eea:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001eec:	4b0e      	ldr	r3, [pc, #56]	; (8001f28 <HAL_ADC_MspInit+0x168>)
 8001eee:	2220      	movs	r2, #32
 8001ef0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001ef2:	4b0d      	ldr	r3, [pc, #52]	; (8001f28 <HAL_ADC_MspInit+0x168>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001ef8:	480b      	ldr	r0, [pc, #44]	; (8001f28 <HAL_ADC_MspInit+0x168>)
 8001efa:	f001 fe7b 	bl	8003bf4 <HAL_DMA_Init>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <HAL_ADC_MspInit+0x148>
    {
      Error_Handler();
 8001f04:	f7ff fb78 	bl	80015f8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a07      	ldr	r2, [pc, #28]	; (8001f28 <HAL_ADC_MspInit+0x168>)
 8001f0c:	655a      	str	r2, [r3, #84]	; 0x54
 8001f0e:	4a06      	ldr	r2, [pc, #24]	; (8001f28 <HAL_ADC_MspInit+0x168>)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001f14:	bf00      	nop
 8001f16:	3780      	adds	r7, #128	; 0x80
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	48000800 	.word	0x48000800
 8001f24:	48000400 	.word	0x48000400
 8001f28:	20000254 	.word	0x20000254
 8001f2c:	40020030 	.word	0x40020030

08001f30 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a27      	ldr	r2, [pc, #156]	; (8001fdc <HAL_TIM_PWM_MspInit+0xac>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d114      	bne.n	8001f6c <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f42:	4b27      	ldr	r3, [pc, #156]	; (8001fe0 <HAL_TIM_PWM_MspInit+0xb0>)
 8001f44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f46:	4a26      	ldr	r2, [pc, #152]	; (8001fe0 <HAL_TIM_PWM_MspInit+0xb0>)
 8001f48:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f4c:	6613      	str	r3, [r2, #96]	; 0x60
 8001f4e:	4b24      	ldr	r3, [pc, #144]	; (8001fe0 <HAL_TIM_PWM_MspInit+0xb0>)
 8001f50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f56:	617b      	str	r3, [r7, #20]
 8001f58:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	2018      	movs	r0, #24
 8001f60:	f001 fe13 	bl	8003b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001f64:	2018      	movs	r0, #24
 8001f66:	f001 fe2a 	bl	8003bbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001f6a:	e032      	b.n	8001fd2 <HAL_TIM_PWM_MspInit+0xa2>
  else if(htim_pwm->Instance==TIM3)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a1c      	ldr	r2, [pc, #112]	; (8001fe4 <HAL_TIM_PWM_MspInit+0xb4>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d114      	bne.n	8001fa0 <HAL_TIM_PWM_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f76:	4b1a      	ldr	r3, [pc, #104]	; (8001fe0 <HAL_TIM_PWM_MspInit+0xb0>)
 8001f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f7a:	4a19      	ldr	r2, [pc, #100]	; (8001fe0 <HAL_TIM_PWM_MspInit+0xb0>)
 8001f7c:	f043 0302 	orr.w	r3, r3, #2
 8001f80:	6593      	str	r3, [r2, #88]	; 0x58
 8001f82:	4b17      	ldr	r3, [pc, #92]	; (8001fe0 <HAL_TIM_PWM_MspInit+0xb0>)
 8001f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	613b      	str	r3, [r7, #16]
 8001f8c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001f8e:	2200      	movs	r2, #0
 8001f90:	2100      	movs	r1, #0
 8001f92:	201d      	movs	r0, #29
 8001f94:	f001 fdf9 	bl	8003b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f98:	201d      	movs	r0, #29
 8001f9a:	f001 fe10 	bl	8003bbe <HAL_NVIC_EnableIRQ>
}
 8001f9e:	e018      	b.n	8001fd2 <HAL_TIM_PWM_MspInit+0xa2>
  else if(htim_pwm->Instance==TIM15)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a10      	ldr	r2, [pc, #64]	; (8001fe8 <HAL_TIM_PWM_MspInit+0xb8>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d113      	bne.n	8001fd2 <HAL_TIM_PWM_MspInit+0xa2>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001faa:	4b0d      	ldr	r3, [pc, #52]	; (8001fe0 <HAL_TIM_PWM_MspInit+0xb0>)
 8001fac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fae:	4a0c      	ldr	r2, [pc, #48]	; (8001fe0 <HAL_TIM_PWM_MspInit+0xb0>)
 8001fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fb4:	6613      	str	r3, [r2, #96]	; 0x60
 8001fb6:	4b0a      	ldr	r3, [pc, #40]	; (8001fe0 <HAL_TIM_PWM_MspInit+0xb0>)
 8001fb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fbe:	60fb      	str	r3, [r7, #12]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	2018      	movs	r0, #24
 8001fc8:	f001 fddf 	bl	8003b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001fcc:	2018      	movs	r0, #24
 8001fce:	f001 fdf6 	bl	8003bbe <HAL_NVIC_EnableIRQ>
}
 8001fd2:	bf00      	nop
 8001fd4:	3718      	adds	r7, #24
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	40012c00 	.word	0x40012c00
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	40000400 	.word	0x40000400
 8001fe8:	40014000 	.word	0x40014000

08001fec <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b092      	sub	sp, #72	; 0x48
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	605a      	str	r2, [r3, #4]
 8001ffe:	609a      	str	r2, [r3, #8]
 8002000:	60da      	str	r2, [r3, #12]
 8002002:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800200c:	d145      	bne.n	800209a <HAL_TIM_Encoder_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800200e:	4b78      	ldr	r3, [pc, #480]	; (80021f0 <HAL_TIM_Encoder_MspInit+0x204>)
 8002010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002012:	4a77      	ldr	r2, [pc, #476]	; (80021f0 <HAL_TIM_Encoder_MspInit+0x204>)
 8002014:	f043 0301 	orr.w	r3, r3, #1
 8002018:	6593      	str	r3, [r2, #88]	; 0x58
 800201a:	4b75      	ldr	r3, [pc, #468]	; (80021f0 <HAL_TIM_Encoder_MspInit+0x204>)
 800201c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	633b      	str	r3, [r7, #48]	; 0x30
 8002024:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002026:	4b72      	ldr	r3, [pc, #456]	; (80021f0 <HAL_TIM_Encoder_MspInit+0x204>)
 8002028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800202a:	4a71      	ldr	r2, [pc, #452]	; (80021f0 <HAL_TIM_Encoder_MspInit+0x204>)
 800202c:	f043 0301 	orr.w	r3, r3, #1
 8002030:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002032:	4b6f      	ldr	r3, [pc, #444]	; (80021f0 <HAL_TIM_Encoder_MspInit+0x204>)
 8002034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800203c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800203e:	4b6c      	ldr	r3, [pc, #432]	; (80021f0 <HAL_TIM_Encoder_MspInit+0x204>)
 8002040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002042:	4a6b      	ldr	r2, [pc, #428]	; (80021f0 <HAL_TIM_Encoder_MspInit+0x204>)
 8002044:	f043 0302 	orr.w	r3, r3, #2
 8002048:	64d3      	str	r3, [r2, #76]	; 0x4c
 800204a:	4b69      	ldr	r3, [pc, #420]	; (80021f0 <HAL_TIM_Encoder_MspInit+0x204>)
 800204c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	62bb      	str	r3, [r7, #40]	; 0x28
 8002054:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002056:	2320      	movs	r3, #32
 8002058:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205a:	2302      	movs	r3, #2
 800205c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205e:	2300      	movs	r3, #0
 8002060:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002062:	2300      	movs	r3, #0
 8002064:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002066:	2301      	movs	r3, #1
 8002068:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800206a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800206e:	4619      	mov	r1, r3
 8002070:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002074:	f002 f838 	bl	80040e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002078:	2308      	movs	r3, #8
 800207a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207c:	2302      	movs	r3, #2
 800207e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002080:	2300      	movs	r3, #0
 8002082:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002084:	2300      	movs	r3, #0
 8002086:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002088:	2301      	movs	r3, #1
 800208a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800208c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002090:	4619      	mov	r1, r3
 8002092:	4858      	ldr	r0, [pc, #352]	; (80021f4 <HAL_TIM_Encoder_MspInit+0x208>)
 8002094:	f002 f828 	bl	80040e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }

}
 8002098:	e0a6      	b.n	80021e8 <HAL_TIM_Encoder_MspInit+0x1fc>
  else if(htim_encoder->Instance==TIM4)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a56      	ldr	r2, [pc, #344]	; (80021f8 <HAL_TIM_Encoder_MspInit+0x20c>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d12a      	bne.n	80020fa <HAL_TIM_Encoder_MspInit+0x10e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80020a4:	4b52      	ldr	r3, [pc, #328]	; (80021f0 <HAL_TIM_Encoder_MspInit+0x204>)
 80020a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a8:	4a51      	ldr	r2, [pc, #324]	; (80021f0 <HAL_TIM_Encoder_MspInit+0x204>)
 80020aa:	f043 0304 	orr.w	r3, r3, #4
 80020ae:	6593      	str	r3, [r2, #88]	; 0x58
 80020b0:	4b4f      	ldr	r3, [pc, #316]	; (80021f0 <HAL_TIM_Encoder_MspInit+0x204>)
 80020b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b4:	f003 0304 	and.w	r3, r3, #4
 80020b8:	627b      	str	r3, [r7, #36]	; 0x24
 80020ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020bc:	4b4c      	ldr	r3, [pc, #304]	; (80021f0 <HAL_TIM_Encoder_MspInit+0x204>)
 80020be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c0:	4a4b      	ldr	r2, [pc, #300]	; (80021f0 <HAL_TIM_Encoder_MspInit+0x204>)
 80020c2:	f043 0301 	orr.w	r3, r3, #1
 80020c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020c8:	4b49      	ldr	r3, [pc, #292]	; (80021f0 <HAL_TIM_Encoder_MspInit+0x204>)
 80020ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020cc:	f003 0301 	and.w	r3, r3, #1
 80020d0:	623b      	str	r3, [r7, #32]
 80020d2:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80020d4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80020d8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020da:	2302      	movs	r3, #2
 80020dc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020de:	2300      	movs	r3, #0
 80020e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e2:	2300      	movs	r3, #0
 80020e4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80020e6:	230a      	movs	r3, #10
 80020e8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80020ee:	4619      	mov	r1, r3
 80020f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020f4:	f001 fff8 	bl	80040e8 <HAL_GPIO_Init>
}
 80020f8:	e076      	b.n	80021e8 <HAL_TIM_Encoder_MspInit+0x1fc>
  else if(htim_encoder->Instance==TIM8)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a3f      	ldr	r2, [pc, #252]	; (80021fc <HAL_TIM_Encoder_MspInit+0x210>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d128      	bne.n	8002156 <HAL_TIM_Encoder_MspInit+0x16a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002104:	4b3a      	ldr	r3, [pc, #232]	; (80021f0 <HAL_TIM_Encoder_MspInit+0x204>)
 8002106:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002108:	4a39      	ldr	r2, [pc, #228]	; (80021f0 <HAL_TIM_Encoder_MspInit+0x204>)
 800210a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800210e:	6613      	str	r3, [r2, #96]	; 0x60
 8002110:	4b37      	ldr	r3, [pc, #220]	; (80021f0 <HAL_TIM_Encoder_MspInit+0x204>)
 8002112:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002114:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002118:	61fb      	str	r3, [r7, #28]
 800211a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800211c:	4b34      	ldr	r3, [pc, #208]	; (80021f0 <HAL_TIM_Encoder_MspInit+0x204>)
 800211e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002120:	4a33      	ldr	r2, [pc, #204]	; (80021f0 <HAL_TIM_Encoder_MspInit+0x204>)
 8002122:	f043 0304 	orr.w	r3, r3, #4
 8002126:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002128:	4b31      	ldr	r3, [pc, #196]	; (80021f0 <HAL_TIM_Encoder_MspInit+0x204>)
 800212a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800212c:	f003 0304 	and.w	r3, r3, #4
 8002130:	61bb      	str	r3, [r7, #24]
 8002132:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002134:	23c0      	movs	r3, #192	; 0xc0
 8002136:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002138:	2302      	movs	r3, #2
 800213a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213c:	2300      	movs	r3, #0
 800213e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002140:	2300      	movs	r3, #0
 8002142:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8002144:	2304      	movs	r3, #4
 8002146:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002148:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800214c:	4619      	mov	r1, r3
 800214e:	482c      	ldr	r0, [pc, #176]	; (8002200 <HAL_TIM_Encoder_MspInit+0x214>)
 8002150:	f001 ffca 	bl	80040e8 <HAL_GPIO_Init>
}
 8002154:	e048      	b.n	80021e8 <HAL_TIM_Encoder_MspInit+0x1fc>
  else if(htim_encoder->Instance==TIM20)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a2a      	ldr	r2, [pc, #168]	; (8002204 <HAL_TIM_Encoder_MspInit+0x218>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d143      	bne.n	80021e8 <HAL_TIM_Encoder_MspInit+0x1fc>
    __HAL_RCC_TIM20_CLK_ENABLE();
 8002160:	4b23      	ldr	r3, [pc, #140]	; (80021f0 <HAL_TIM_Encoder_MspInit+0x204>)
 8002162:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002164:	4a22      	ldr	r2, [pc, #136]	; (80021f0 <HAL_TIM_Encoder_MspInit+0x204>)
 8002166:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800216a:	6613      	str	r3, [r2, #96]	; 0x60
 800216c:	4b20      	ldr	r3, [pc, #128]	; (80021f0 <HAL_TIM_Encoder_MspInit+0x204>)
 800216e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002170:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002174:	617b      	str	r3, [r7, #20]
 8002176:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002178:	4b1d      	ldr	r3, [pc, #116]	; (80021f0 <HAL_TIM_Encoder_MspInit+0x204>)
 800217a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800217c:	4a1c      	ldr	r2, [pc, #112]	; (80021f0 <HAL_TIM_Encoder_MspInit+0x204>)
 800217e:	f043 0304 	orr.w	r3, r3, #4
 8002182:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002184:	4b1a      	ldr	r3, [pc, #104]	; (80021f0 <HAL_TIM_Encoder_MspInit+0x204>)
 8002186:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002188:	f003 0304 	and.w	r3, r3, #4
 800218c:	613b      	str	r3, [r7, #16]
 800218e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002190:	4b17      	ldr	r3, [pc, #92]	; (80021f0 <HAL_TIM_Encoder_MspInit+0x204>)
 8002192:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002194:	4a16      	ldr	r2, [pc, #88]	; (80021f0 <HAL_TIM_Encoder_MspInit+0x204>)
 8002196:	f043 0302 	orr.w	r3, r3, #2
 800219a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800219c:	4b14      	ldr	r3, [pc, #80]	; (80021f0 <HAL_TIM_Encoder_MspInit+0x204>)
 800219e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	60fb      	str	r3, [r7, #12]
 80021a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80021a8:	2304      	movs	r3, #4
 80021aa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ac:	2302      	movs	r3, #2
 80021ae:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b0:	2300      	movs	r3, #0
 80021b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b4:	2300      	movs	r3, #0
 80021b6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM20;
 80021b8:	2306      	movs	r3, #6
 80021ba:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021bc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80021c0:	4619      	mov	r1, r3
 80021c2:	480f      	ldr	r0, [pc, #60]	; (8002200 <HAL_TIM_Encoder_MspInit+0x214>)
 80021c4:	f001 ff90 	bl	80040e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80021c8:	2304      	movs	r3, #4
 80021ca:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021cc:	2302      	movs	r3, #2
 80021ce:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d0:	2300      	movs	r3, #0
 80021d2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d4:	2300      	movs	r3, #0
 80021d6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 80021d8:	2303      	movs	r3, #3
 80021da:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021dc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80021e0:	4619      	mov	r1, r3
 80021e2:	4804      	ldr	r0, [pc, #16]	; (80021f4 <HAL_TIM_Encoder_MspInit+0x208>)
 80021e4:	f001 ff80 	bl	80040e8 <HAL_GPIO_Init>
}
 80021e8:	bf00      	nop
 80021ea:	3748      	adds	r7, #72	; 0x48
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	40021000 	.word	0x40021000
 80021f4:	48000400 	.word	0x48000400
 80021f8:	40000800 	.word	0x40000800
 80021fc:	40013400 	.word	0x40013400
 8002200:	48000800 	.word	0x48000800
 8002204:	40015000 	.word	0x40015000

08002208 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a16      	ldr	r2, [pc, #88]	; (8002270 <HAL_TIM_Base_MspInit+0x68>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d114      	bne.n	8002244 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800221a:	4b16      	ldr	r3, [pc, #88]	; (8002274 <HAL_TIM_Base_MspInit+0x6c>)
 800221c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221e:	4a15      	ldr	r2, [pc, #84]	; (8002274 <HAL_TIM_Base_MspInit+0x6c>)
 8002220:	f043 0310 	orr.w	r3, r3, #16
 8002224:	6593      	str	r3, [r2, #88]	; 0x58
 8002226:	4b13      	ldr	r3, [pc, #76]	; (8002274 <HAL_TIM_Base_MspInit+0x6c>)
 8002228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800222a:	f003 0310 	and.w	r3, r3, #16
 800222e:	60fb      	str	r3, [r7, #12]
 8002230:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002232:	2200      	movs	r2, #0
 8002234:	2100      	movs	r1, #0
 8002236:	2036      	movs	r0, #54	; 0x36
 8002238:	f001 fca7 	bl	8003b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800223c:	2036      	movs	r0, #54	; 0x36
 800223e:	f001 fcbe 	bl	8003bbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002242:	e010      	b.n	8002266 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM16)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a0b      	ldr	r2, [pc, #44]	; (8002278 <HAL_TIM_Base_MspInit+0x70>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d10b      	bne.n	8002266 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800224e:	4b09      	ldr	r3, [pc, #36]	; (8002274 <HAL_TIM_Base_MspInit+0x6c>)
 8002250:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002252:	4a08      	ldr	r2, [pc, #32]	; (8002274 <HAL_TIM_Base_MspInit+0x6c>)
 8002254:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002258:	6613      	str	r3, [r2, #96]	; 0x60
 800225a:	4b06      	ldr	r3, [pc, #24]	; (8002274 <HAL_TIM_Base_MspInit+0x6c>)
 800225c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800225e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002262:	60bb      	str	r3, [r7, #8]
 8002264:	68bb      	ldr	r3, [r7, #8]
}
 8002266:	bf00      	nop
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	40001000 	.word	0x40001000
 8002274:	40021000 	.word	0x40021000
 8002278:	40014400 	.word	0x40014400

0800227c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b08e      	sub	sp, #56	; 0x38
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002284:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	605a      	str	r2, [r3, #4]
 800228e:	609a      	str	r2, [r3, #8]
 8002290:	60da      	str	r2, [r3, #12]
 8002292:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a5f      	ldr	r2, [pc, #380]	; (8002418 <HAL_TIM_MspPostInit+0x19c>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d13a      	bne.n	8002314 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800229e:	4b5f      	ldr	r3, [pc, #380]	; (800241c <HAL_TIM_MspPostInit+0x1a0>)
 80022a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022a2:	4a5e      	ldr	r2, [pc, #376]	; (800241c <HAL_TIM_MspPostInit+0x1a0>)
 80022a4:	f043 0304 	orr.w	r3, r3, #4
 80022a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022aa:	4b5c      	ldr	r3, [pc, #368]	; (800241c <HAL_TIM_MspPostInit+0x1a0>)
 80022ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ae:	f003 0304 	and.w	r3, r3, #4
 80022b2:	623b      	str	r3, [r7, #32]
 80022b4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b6:	4b59      	ldr	r3, [pc, #356]	; (800241c <HAL_TIM_MspPostInit+0x1a0>)
 80022b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ba:	4a58      	ldr	r2, [pc, #352]	; (800241c <HAL_TIM_MspPostInit+0x1a0>)
 80022bc:	f043 0301 	orr.w	r3, r3, #1
 80022c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022c2:	4b56      	ldr	r3, [pc, #344]	; (800241c <HAL_TIM_MspPostInit+0x1a0>)
 80022c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	61fb      	str	r3, [r7, #28]
 80022cc:	69fb      	ldr	r3, [r7, #28]
    PC3     ------> TIM1_CH4
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80022ce:	2308      	movs	r3, #8
 80022d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d2:	2302      	movs	r3, #2
 80022d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d6:	2300      	movs	r3, #0
 80022d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022da:	2300      	movs	r3, #0
 80022dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80022de:	2302      	movs	r3, #2
 80022e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022e6:	4619      	mov	r1, r3
 80022e8:	484d      	ldr	r0, [pc, #308]	; (8002420 <HAL_TIM_MspPostInit+0x1a4>)
 80022ea:	f001 fefd 	bl	80040e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80022ee:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80022f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f4:	2302      	movs	r3, #2
 80022f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f8:	2300      	movs	r3, #0
 80022fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022fc:	2300      	movs	r3, #0
 80022fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002300:	2306      	movs	r3, #6
 8002302:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002304:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002308:	4619      	mov	r1, r3
 800230a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800230e:	f001 feeb 	bl	80040e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8002312:	e07d      	b.n	8002410 <HAL_TIM_MspPostInit+0x194>
  else if(htim->Instance==TIM3)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a42      	ldr	r2, [pc, #264]	; (8002424 <HAL_TIM_MspPostInit+0x1a8>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d156      	bne.n	80023cc <HAL_TIM_MspPostInit+0x150>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800231e:	4b3f      	ldr	r3, [pc, #252]	; (800241c <HAL_TIM_MspPostInit+0x1a0>)
 8002320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002322:	4a3e      	ldr	r2, [pc, #248]	; (800241c <HAL_TIM_MspPostInit+0x1a0>)
 8002324:	f043 0301 	orr.w	r3, r3, #1
 8002328:	64d3      	str	r3, [r2, #76]	; 0x4c
 800232a:	4b3c      	ldr	r3, [pc, #240]	; (800241c <HAL_TIM_MspPostInit+0x1a0>)
 800232c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	61bb      	str	r3, [r7, #24]
 8002334:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002336:	4b39      	ldr	r3, [pc, #228]	; (800241c <HAL_TIM_MspPostInit+0x1a0>)
 8002338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800233a:	4a38      	ldr	r2, [pc, #224]	; (800241c <HAL_TIM_MspPostInit+0x1a0>)
 800233c:	f043 0302 	orr.w	r3, r3, #2
 8002340:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002342:	4b36      	ldr	r3, [pc, #216]	; (800241c <HAL_TIM_MspPostInit+0x1a0>)
 8002344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	617b      	str	r3, [r7, #20]
 800234c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800234e:	4b33      	ldr	r3, [pc, #204]	; (800241c <HAL_TIM_MspPostInit+0x1a0>)
 8002350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002352:	4a32      	ldr	r2, [pc, #200]	; (800241c <HAL_TIM_MspPostInit+0x1a0>)
 8002354:	f043 0304 	orr.w	r3, r3, #4
 8002358:	64d3      	str	r3, [r2, #76]	; 0x4c
 800235a:	4b30      	ldr	r3, [pc, #192]	; (800241c <HAL_TIM_MspPostInit+0x1a0>)
 800235c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800235e:	f003 0304 	and.w	r3, r3, #4
 8002362:	613b      	str	r3, [r7, #16]
 8002364:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8002366:	2350      	movs	r3, #80	; 0x50
 8002368:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800236a:	2302      	movs	r3, #2
 800236c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236e:	2300      	movs	r3, #0
 8002370:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002372:	2300      	movs	r3, #0
 8002374:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002376:	2302      	movs	r3, #2
 8002378:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800237a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800237e:	4619      	mov	r1, r3
 8002380:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002384:	f001 feb0 	bl	80040e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002388:	2302      	movs	r3, #2
 800238a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800238c:	2302      	movs	r3, #2
 800238e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002390:	2300      	movs	r3, #0
 8002392:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002394:	2300      	movs	r3, #0
 8002396:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002398:	2302      	movs	r3, #2
 800239a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800239c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023a0:	4619      	mov	r1, r3
 80023a2:	4821      	ldr	r0, [pc, #132]	; (8002428 <HAL_TIM_MspPostInit+0x1ac>)
 80023a4:	f001 fea0 	bl	80040e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80023a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ae:	2302      	movs	r3, #2
 80023b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b2:	2300      	movs	r3, #0
 80023b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b6:	2300      	movs	r3, #0
 80023b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80023ba:	2302      	movs	r3, #2
 80023bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023c2:	4619      	mov	r1, r3
 80023c4:	4816      	ldr	r0, [pc, #88]	; (8002420 <HAL_TIM_MspPostInit+0x1a4>)
 80023c6:	f001 fe8f 	bl	80040e8 <HAL_GPIO_Init>
}
 80023ca:	e021      	b.n	8002410 <HAL_TIM_MspPostInit+0x194>
  else if(htim->Instance==TIM15)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a16      	ldr	r2, [pc, #88]	; (800242c <HAL_TIM_MspPostInit+0x1b0>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d11c      	bne.n	8002410 <HAL_TIM_MspPostInit+0x194>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023d6:	4b11      	ldr	r3, [pc, #68]	; (800241c <HAL_TIM_MspPostInit+0x1a0>)
 80023d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023da:	4a10      	ldr	r2, [pc, #64]	; (800241c <HAL_TIM_MspPostInit+0x1a0>)
 80023dc:	f043 0301 	orr.w	r3, r3, #1
 80023e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023e2:	4b0e      	ldr	r3, [pc, #56]	; (800241c <HAL_TIM_MspPostInit+0x1a0>)
 80023e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	60fb      	str	r3, [r7, #12]
 80023ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80023ee:	230c      	movs	r3, #12
 80023f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f2:	2302      	movs	r3, #2
 80023f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f6:	2300      	movs	r3, #0
 80023f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023fa:	2300      	movs	r3, #0
 80023fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 80023fe:	2309      	movs	r3, #9
 8002400:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002402:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002406:	4619      	mov	r1, r3
 8002408:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800240c:	f001 fe6c 	bl	80040e8 <HAL_GPIO_Init>
}
 8002410:	bf00      	nop
 8002412:	3738      	adds	r7, #56	; 0x38
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	40012c00 	.word	0x40012c00
 800241c:	40021000 	.word	0x40021000
 8002420:	48000800 	.word	0x48000800
 8002424:	40000400 	.word	0x40000400
 8002428:	48000400 	.word	0x48000400
 800242c:	40014000 	.word	0x40014000

08002430 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b0a2      	sub	sp, #136	; 0x88
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002438:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]
 8002440:	605a      	str	r2, [r3, #4]
 8002442:	609a      	str	r2, [r3, #8]
 8002444:	60da      	str	r2, [r3, #12]
 8002446:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002448:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800244c:	2250      	movs	r2, #80	; 0x50
 800244e:	2100      	movs	r1, #0
 8002450:	4618      	mov	r0, r3
 8002452:	f005 fd6b 	bl	8007f2c <memset>
  if(huart->Instance==UART4)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a72      	ldr	r2, [pc, #456]	; (8002624 <HAL_UART_MspInit+0x1f4>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d139      	bne.n	80024d4 <HAL_UART_MspInit+0xa4>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002460:	2308      	movs	r3, #8
 8002462:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002464:	2300      	movs	r3, #0
 8002466:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002468:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800246c:	4618      	mov	r0, r3
 800246e:	f002 fda7 	bl	8004fc0 <HAL_RCCEx_PeriphCLKConfig>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002478:	f7ff f8be 	bl	80015f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800247c:	4b6a      	ldr	r3, [pc, #424]	; (8002628 <HAL_UART_MspInit+0x1f8>)
 800247e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002480:	4a69      	ldr	r2, [pc, #420]	; (8002628 <HAL_UART_MspInit+0x1f8>)
 8002482:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002486:	6593      	str	r3, [r2, #88]	; 0x58
 8002488:	4b67      	ldr	r3, [pc, #412]	; (8002628 <HAL_UART_MspInit+0x1f8>)
 800248a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800248c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002490:	623b      	str	r3, [r7, #32]
 8002492:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002494:	4b64      	ldr	r3, [pc, #400]	; (8002628 <HAL_UART_MspInit+0x1f8>)
 8002496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002498:	4a63      	ldr	r2, [pc, #396]	; (8002628 <HAL_UART_MspInit+0x1f8>)
 800249a:	f043 0304 	orr.w	r3, r3, #4
 800249e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024a0:	4b61      	ldr	r3, [pc, #388]	; (8002628 <HAL_UART_MspInit+0x1f8>)
 80024a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024a4:	f003 0304 	and.w	r3, r3, #4
 80024a8:	61fb      	str	r3, [r7, #28]
 80024aa:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80024ac:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80024b0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b2:	2302      	movs	r3, #2
 80024b4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b6:	2300      	movs	r3, #0
 80024b8:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ba:	2300      	movs	r3, #0
 80024bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 80024c0:	2305      	movs	r3, #5
 80024c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024c6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80024ca:	4619      	mov	r1, r3
 80024cc:	4857      	ldr	r0, [pc, #348]	; (800262c <HAL_UART_MspInit+0x1fc>)
 80024ce:	f001 fe0b 	bl	80040e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80024d2:	e0a2      	b.n	800261a <HAL_UART_MspInit+0x1ea>
  else if(huart->Instance==UART5)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a55      	ldr	r2, [pc, #340]	; (8002630 <HAL_UART_MspInit+0x200>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d15f      	bne.n	800259e <HAL_UART_MspInit+0x16e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80024de:	2310      	movs	r3, #16
 80024e0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80024e2:	2300      	movs	r3, #0
 80024e4:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024ea:	4618      	mov	r0, r3
 80024ec:	f002 fd68 	bl	8004fc0 <HAL_RCCEx_PeriphCLKConfig>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <HAL_UART_MspInit+0xca>
      Error_Handler();
 80024f6:	f7ff f87f 	bl	80015f8 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 80024fa:	4b4b      	ldr	r3, [pc, #300]	; (8002628 <HAL_UART_MspInit+0x1f8>)
 80024fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fe:	4a4a      	ldr	r2, [pc, #296]	; (8002628 <HAL_UART_MspInit+0x1f8>)
 8002500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002504:	6593      	str	r3, [r2, #88]	; 0x58
 8002506:	4b48      	ldr	r3, [pc, #288]	; (8002628 <HAL_UART_MspInit+0x1f8>)
 8002508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800250a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800250e:	61bb      	str	r3, [r7, #24]
 8002510:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002512:	4b45      	ldr	r3, [pc, #276]	; (8002628 <HAL_UART_MspInit+0x1f8>)
 8002514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002516:	4a44      	ldr	r2, [pc, #272]	; (8002628 <HAL_UART_MspInit+0x1f8>)
 8002518:	f043 0304 	orr.w	r3, r3, #4
 800251c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800251e:	4b42      	ldr	r3, [pc, #264]	; (8002628 <HAL_UART_MspInit+0x1f8>)
 8002520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002522:	f003 0304 	and.w	r3, r3, #4
 8002526:	617b      	str	r3, [r7, #20]
 8002528:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800252a:	4b3f      	ldr	r3, [pc, #252]	; (8002628 <HAL_UART_MspInit+0x1f8>)
 800252c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800252e:	4a3e      	ldr	r2, [pc, #248]	; (8002628 <HAL_UART_MspInit+0x1f8>)
 8002530:	f043 0308 	orr.w	r3, r3, #8
 8002534:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002536:	4b3c      	ldr	r3, [pc, #240]	; (8002628 <HAL_UART_MspInit+0x1f8>)
 8002538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800253a:	f003 0308 	and.w	r3, r3, #8
 800253e:	613b      	str	r3, [r7, #16]
 8002540:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002542:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002546:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002548:	2302      	movs	r3, #2
 800254a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254c:	2300      	movs	r3, #0
 800254e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002550:	2300      	movs	r3, #0
 8002552:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8002556:	2305      	movs	r3, #5
 8002558:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800255c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002560:	4619      	mov	r1, r3
 8002562:	4832      	ldr	r0, [pc, #200]	; (800262c <HAL_UART_MspInit+0x1fc>)
 8002564:	f001 fdc0 	bl	80040e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002568:	2304      	movs	r3, #4
 800256a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800256c:	2302      	movs	r3, #2
 800256e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002570:	2300      	movs	r3, #0
 8002572:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002574:	2300      	movs	r3, #0
 8002576:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 800257a:	2305      	movs	r3, #5
 800257c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002580:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002584:	4619      	mov	r1, r3
 8002586:	482b      	ldr	r0, [pc, #172]	; (8002634 <HAL_UART_MspInit+0x204>)
 8002588:	f001 fdae 	bl	80040e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 800258c:	2200      	movs	r2, #0
 800258e:	2100      	movs	r1, #0
 8002590:	2035      	movs	r0, #53	; 0x35
 8002592:	f001 fafa 	bl	8003b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002596:	2035      	movs	r0, #53	; 0x35
 8002598:	f001 fb11 	bl	8003bbe <HAL_NVIC_EnableIRQ>
}
 800259c:	e03d      	b.n	800261a <HAL_UART_MspInit+0x1ea>
  else if(huart->Instance==USART3)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a25      	ldr	r2, [pc, #148]	; (8002638 <HAL_UART_MspInit+0x208>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d138      	bne.n	800261a <HAL_UART_MspInit+0x1ea>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80025a8:	2304      	movs	r3, #4
 80025aa:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80025ac:	2300      	movs	r3, #0
 80025ae:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025b4:	4618      	mov	r0, r3
 80025b6:	f002 fd03 	bl	8004fc0 <HAL_RCCEx_PeriphCLKConfig>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <HAL_UART_MspInit+0x194>
      Error_Handler();
 80025c0:	f7ff f81a 	bl	80015f8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80025c4:	4b18      	ldr	r3, [pc, #96]	; (8002628 <HAL_UART_MspInit+0x1f8>)
 80025c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c8:	4a17      	ldr	r2, [pc, #92]	; (8002628 <HAL_UART_MspInit+0x1f8>)
 80025ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025ce:	6593      	str	r3, [r2, #88]	; 0x58
 80025d0:	4b15      	ldr	r3, [pc, #84]	; (8002628 <HAL_UART_MspInit+0x1f8>)
 80025d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025d8:	60fb      	str	r3, [r7, #12]
 80025da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025dc:	4b12      	ldr	r3, [pc, #72]	; (8002628 <HAL_UART_MspInit+0x1f8>)
 80025de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025e0:	4a11      	ldr	r2, [pc, #68]	; (8002628 <HAL_UART_MspInit+0x1f8>)
 80025e2:	f043 0302 	orr.w	r3, r3, #2
 80025e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025e8:	4b0f      	ldr	r3, [pc, #60]	; (8002628 <HAL_UART_MspInit+0x1f8>)
 80025ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	60bb      	str	r3, [r7, #8]
 80025f2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_8;
 80025f4:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80025f8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025fa:	2302      	movs	r3, #2
 80025fc:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fe:	2300      	movs	r3, #0
 8002600:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002602:	2300      	movs	r3, #0
 8002604:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002608:	2307      	movs	r3, #7
 800260a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800260e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002612:	4619      	mov	r1, r3
 8002614:	4809      	ldr	r0, [pc, #36]	; (800263c <HAL_UART_MspInit+0x20c>)
 8002616:	f001 fd67 	bl	80040e8 <HAL_GPIO_Init>
}
 800261a:	bf00      	nop
 800261c:	3788      	adds	r7, #136	; 0x88
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	40004c00 	.word	0x40004c00
 8002628:	40021000 	.word	0x40021000
 800262c:	48000800 	.word	0x48000800
 8002630:	40005000 	.word	0x40005000
 8002634:	48000c00 	.word	0x48000c00
 8002638:	40004800 	.word	0x40004800
 800263c:	48000400 	.word	0x48000400

08002640 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002644:	e7fe      	b.n	8002644 <NMI_Handler+0x4>

08002646 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002646:	b480      	push	{r7}
 8002648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800264a:	e7fe      	b.n	800264a <HardFault_Handler+0x4>

0800264c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002650:	e7fe      	b.n	8002650 <MemManage_Handler+0x4>

08002652 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002652:	b480      	push	{r7}
 8002654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002656:	e7fe      	b.n	8002656 <BusFault_Handler+0x4>

08002658 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800265c:	e7fe      	b.n	800265c <UsageFault_Handler+0x4>

0800265e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800265e:	b480      	push	{r7}
 8002660:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002662:	bf00      	nop
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002670:	bf00      	nop
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr

0800267a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800267a:	b480      	push	{r7}
 800267c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800267e:	bf00      	nop
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800268c:	f000 f8c6 	bl	800281c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002690:	bf00      	nop
 8002692:	bd80      	pop	{r7, pc}

08002694 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002698:	4802      	ldr	r0, [pc, #8]	; (80026a4 <DMA1_Channel3_IRQHandler+0x10>)
 800269a:	f001 fc13 	bl	8003ec4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800269e:	bf00      	nop
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	20000254 	.word	0x20000254

080026a8 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80026ac:	4803      	ldr	r0, [pc, #12]	; (80026bc <TIM1_BRK_TIM15_IRQHandler+0x14>)
 80026ae:	f003 fa23 	bl	8005af8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 80026b2:	4803      	ldr	r0, [pc, #12]	; (80026c0 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 80026b4:	f003 fa20 	bl	8005af8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80026b8:	bf00      	nop
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	200002b4 	.word	0x200002b4
 80026c0:	2000047c 	.word	0x2000047c

080026c4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80026c8:	4802      	ldr	r0, [pc, #8]	; (80026d4 <TIM3_IRQHandler+0x10>)
 80026ca:	f003 fa15 	bl	8005af8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80026ce:	bf00      	nop
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	2000034c 	.word	0x2000034c

080026d8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt / UART5 wake-up interrupt through EXTI line 35.
  */
void UART5_IRQHandler(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80026dc:	4802      	ldr	r0, [pc, #8]	; (80026e8 <UART5_IRQHandler+0x10>)
 80026de:	f004 fa49 	bl	8006b74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80026e2:	bf00      	nop
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	200005f4 	.word	0x200005f4

080026ec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80026f0:	4802      	ldr	r0, [pc, #8]	; (80026fc <TIM6_DAC_IRQHandler+0x10>)
 80026f2:	f003 fa01 	bl	8005af8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80026f6:	bf00      	nop
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	200003e4 	.word	0x200003e4

08002700 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002704:	4b06      	ldr	r3, [pc, #24]	; (8002720 <SystemInit+0x20>)
 8002706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800270a:	4a05      	ldr	r2, [pc, #20]	; (8002720 <SystemInit+0x20>)
 800270c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002710:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002714:	bf00      	nop
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	e000ed00 	.word	0xe000ed00

08002724 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002724:	480d      	ldr	r0, [pc, #52]	; (800275c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002726:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002728:	f7ff ffea 	bl	8002700 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800272c:	480c      	ldr	r0, [pc, #48]	; (8002760 <LoopForever+0x6>)
  ldr r1, =_edata
 800272e:	490d      	ldr	r1, [pc, #52]	; (8002764 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002730:	4a0d      	ldr	r2, [pc, #52]	; (8002768 <LoopForever+0xe>)
  movs r3, #0
 8002732:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002734:	e002      	b.n	800273c <LoopCopyDataInit>

08002736 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002736:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002738:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800273a:	3304      	adds	r3, #4

0800273c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800273c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800273e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002740:	d3f9      	bcc.n	8002736 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002742:	4a0a      	ldr	r2, [pc, #40]	; (800276c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002744:	4c0a      	ldr	r4, [pc, #40]	; (8002770 <LoopForever+0x16>)
  movs r3, #0
 8002746:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002748:	e001      	b.n	800274e <LoopFillZerobss>

0800274a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800274a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800274c:	3204      	adds	r2, #4

0800274e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800274e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002750:	d3fb      	bcc.n	800274a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002752:	f005 fbc7 	bl	8007ee4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002756:	f7fe f925 	bl	80009a4 <main>

0800275a <LoopForever>:

LoopForever:
    b LoopForever
 800275a:	e7fe      	b.n	800275a <LoopForever>
  ldr   r0, =_estack
 800275c:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8002760:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002764:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 8002768:	08007fa8 	.word	0x08007fa8
  ldr r2, =_sbss
 800276c:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8002770:	20000744 	.word	0x20000744

08002774 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002774:	e7fe      	b.n	8002774 <ADC1_2_IRQHandler>

08002776 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	b082      	sub	sp, #8
 800277a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800277c:	2300      	movs	r3, #0
 800277e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002780:	2003      	movs	r0, #3
 8002782:	f001 f9f7 	bl	8003b74 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002786:	200f      	movs	r0, #15
 8002788:	f000 f80e 	bl	80027a8 <HAL_InitTick>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d002      	beq.n	8002798 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	71fb      	strb	r3, [r7, #7]
 8002796:	e001      	b.n	800279c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002798:	f7ff faee 	bl	8001d78 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800279c:	79fb      	ldrb	r3, [r7, #7]

}
 800279e:	4618      	mov	r0, r3
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
	...

080027a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80027b0:	2300      	movs	r3, #0
 80027b2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80027b4:	4b16      	ldr	r3, [pc, #88]	; (8002810 <HAL_InitTick+0x68>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d022      	beq.n	8002802 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80027bc:	4b15      	ldr	r3, [pc, #84]	; (8002814 <HAL_InitTick+0x6c>)
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	4b13      	ldr	r3, [pc, #76]	; (8002810 <HAL_InitTick+0x68>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80027c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80027cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d0:	4618      	mov	r0, r3
 80027d2:	f001 fa02 	bl	8003bda <HAL_SYSTICK_Config>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d10f      	bne.n	80027fc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2b0f      	cmp	r3, #15
 80027e0:	d809      	bhi.n	80027f6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027e2:	2200      	movs	r2, #0
 80027e4:	6879      	ldr	r1, [r7, #4]
 80027e6:	f04f 30ff 	mov.w	r0, #4294967295
 80027ea:	f001 f9ce 	bl	8003b8a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80027ee:	4a0a      	ldr	r2, [pc, #40]	; (8002818 <HAL_InitTick+0x70>)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6013      	str	r3, [r2, #0]
 80027f4:	e007      	b.n	8002806 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	73fb      	strb	r3, [r7, #15]
 80027fa:	e004      	b.n	8002806 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	73fb      	strb	r3, [r7, #15]
 8002800:	e001      	b.n	8002806 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002806:	7bfb      	ldrb	r3, [r7, #15]
}
 8002808:	4618      	mov	r0, r3
 800280a:	3710      	adds	r7, #16
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	200001c8 	.word	0x200001c8
 8002814:	200001c0 	.word	0x200001c0
 8002818:	200001c4 	.word	0x200001c4

0800281c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002820:	4b05      	ldr	r3, [pc, #20]	; (8002838 <HAL_IncTick+0x1c>)
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	4b05      	ldr	r3, [pc, #20]	; (800283c <HAL_IncTick+0x20>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4413      	add	r3, r2
 800282a:	4a03      	ldr	r2, [pc, #12]	; (8002838 <HAL_IncTick+0x1c>)
 800282c:	6013      	str	r3, [r2, #0]
}
 800282e:	bf00      	nop
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr
 8002838:	20000740 	.word	0x20000740
 800283c:	200001c8 	.word	0x200001c8

08002840 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  return uwTick;
 8002844:	4b03      	ldr	r3, [pc, #12]	; (8002854 <HAL_GetTick+0x14>)
 8002846:	681b      	ldr	r3, [r3, #0]
}
 8002848:	4618      	mov	r0, r3
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	20000740 	.word	0x20000740

08002858 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	431a      	orrs	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	609a      	str	r2, [r3, #8]
}
 8002872:	bf00      	nop
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr

0800287e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800287e:	b480      	push	{r7}
 8002880:	b083      	sub	sp, #12
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
 8002886:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	431a      	orrs	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	609a      	str	r2, [r3, #8]
}
 8002898:	bf00      	nop
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b087      	sub	sp, #28
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
 80028cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	3360      	adds	r3, #96	; 0x60
 80028d2:	461a      	mov	r2, r3
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4413      	add	r3, r2
 80028da:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	4b08      	ldr	r3, [pc, #32]	; (8002904 <LL_ADC_SetOffset+0x44>)
 80028e2:	4013      	ands	r3, r2
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80028ea:	683a      	ldr	r2, [r7, #0]
 80028ec:	430a      	orrs	r2, r1
 80028ee:	4313      	orrs	r3, r2
 80028f0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80028f8:	bf00      	nop
 80028fa:	371c      	adds	r7, #28
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr
 8002904:	03fff000 	.word	0x03fff000

08002908 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	3360      	adds	r3, #96	; 0x60
 8002916:	461a      	mov	r2, r3
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	4413      	add	r3, r2
 800291e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002928:	4618      	mov	r0, r3
 800292a:	3714      	adds	r7, #20
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002934:	b480      	push	{r7}
 8002936:	b087      	sub	sp, #28
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	3360      	adds	r3, #96	; 0x60
 8002944:	461a      	mov	r2, r3
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	4413      	add	r3, r2
 800294c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	431a      	orrs	r2, r3
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800295e:	bf00      	nop
 8002960:	371c      	adds	r7, #28
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr

0800296a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800296a:	b480      	push	{r7}
 800296c:	b087      	sub	sp, #28
 800296e:	af00      	add	r7, sp, #0
 8002970:	60f8      	str	r0, [r7, #12]
 8002972:	60b9      	str	r1, [r7, #8]
 8002974:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	3360      	adds	r3, #96	; 0x60
 800297a:	461a      	mov	r2, r3
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	4413      	add	r3, r2
 8002982:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	431a      	orrs	r2, r3
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002994:	bf00      	nop
 8002996:	371c      	adds	r7, #28
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b087      	sub	sp, #28
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	3360      	adds	r3, #96	; 0x60
 80029b0:	461a      	mov	r2, r3
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	4413      	add	r3, r2
 80029b8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	431a      	orrs	r2, r3
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80029ca:	bf00      	nop
 80029cc:	371c      	adds	r7, #28
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr

080029d6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80029d6:	b480      	push	{r7}
 80029d8:	b083      	sub	sp, #12
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
 80029de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	431a      	orrs	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	615a      	str	r2, [r3, #20]
}
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b087      	sub	sp, #28
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	3330      	adds	r3, #48	; 0x30
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	0a1b      	lsrs	r3, r3, #8
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	f003 030c 	and.w	r3, r3, #12
 8002a18:	4413      	add	r3, r2
 8002a1a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	f003 031f 	and.w	r3, r3, #31
 8002a26:	211f      	movs	r1, #31
 8002a28:	fa01 f303 	lsl.w	r3, r1, r3
 8002a2c:	43db      	mvns	r3, r3
 8002a2e:	401a      	ands	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	0e9b      	lsrs	r3, r3, #26
 8002a34:	f003 011f 	and.w	r1, r3, #31
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	f003 031f 	and.w	r3, r3, #31
 8002a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a42:	431a      	orrs	r2, r3
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002a48:	bf00      	nop
 8002a4a:	371c      	adds	r7, #28
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b087      	sub	sp, #28
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	3314      	adds	r3, #20
 8002a64:	461a      	mov	r2, r3
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	0e5b      	lsrs	r3, r3, #25
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	f003 0304 	and.w	r3, r3, #4
 8002a70:	4413      	add	r3, r2
 8002a72:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	0d1b      	lsrs	r3, r3, #20
 8002a7c:	f003 031f 	and.w	r3, r3, #31
 8002a80:	2107      	movs	r1, #7
 8002a82:	fa01 f303 	lsl.w	r3, r1, r3
 8002a86:	43db      	mvns	r3, r3
 8002a88:	401a      	ands	r2, r3
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	0d1b      	lsrs	r3, r3, #20
 8002a8e:	f003 031f 	and.w	r3, r3, #31
 8002a92:	6879      	ldr	r1, [r7, #4]
 8002a94:	fa01 f303 	lsl.w	r3, r1, r3
 8002a98:	431a      	orrs	r2, r3
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002a9e:	bf00      	nop
 8002aa0:	371c      	adds	r7, #28
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
	...

08002aac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b085      	sub	sp, #20
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ac4:	43db      	mvns	r3, r3
 8002ac6:	401a      	ands	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f003 0318 	and.w	r3, r3, #24
 8002ace:	4908      	ldr	r1, [pc, #32]	; (8002af0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002ad0:	40d9      	lsrs	r1, r3
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	400b      	ands	r3, r1
 8002ad6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ada:	431a      	orrs	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002ae2:	bf00      	nop
 8002ae4:	3714      	adds	r7, #20
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	0007ffff 	.word	0x0007ffff

08002af4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002b04:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	6093      	str	r3, [r2, #8]
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b2c:	d101      	bne.n	8002b32 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e000      	b.n	8002b34 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002b50:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b54:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b7c:	d101      	bne.n	8002b82 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e000      	b.n	8002b84 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002b82:	2300      	movs	r3, #0
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f003 0301 	and.w	r3, r3, #1
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d101      	bne.n	8002ba8 <LL_ADC_IsEnabled+0x18>
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e000      	b.n	8002baa <LL_ADC_IsEnabled+0x1a>
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr

08002bb6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	b083      	sub	sp, #12
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f003 0304 	and.w	r3, r3, #4
 8002bc6:	2b04      	cmp	r3, #4
 8002bc8:	d101      	bne.n	8002bce <LL_ADC_REG_IsConversionOngoing+0x18>
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e000      	b.n	8002bd0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f003 0308 	and.w	r3, r3, #8
 8002bec:	2b08      	cmp	r3, #8
 8002bee:	d101      	bne.n	8002bf4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e000      	b.n	8002bf6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
	...

08002c04 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c04:	b590      	push	{r4, r7, lr}
 8002c06:	b089      	sub	sp, #36	; 0x24
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002c10:	2300      	movs	r3, #0
 8002c12:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d101      	bne.n	8002c1e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e19b      	b.n	8002f56 <HAL_ADC_Init+0x352>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d109      	bne.n	8002c40 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f7ff f8c7 	bl	8001dc0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7ff ff67 	bl	8002b18 <LL_ADC_IsDeepPowerDownEnabled>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d004      	beq.n	8002c5a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7ff ff4d 	bl	8002af4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7ff ff82 	bl	8002b68 <LL_ADC_IsInternalRegulatorEnabled>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d115      	bne.n	8002c96 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7ff ff66 	bl	8002b40 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c74:	4b97      	ldr	r3, [pc, #604]	; (8002ed4 <HAL_ADC_Init+0x2d0>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	099b      	lsrs	r3, r3, #6
 8002c7a:	4a97      	ldr	r2, [pc, #604]	; (8002ed8 <HAL_ADC_Init+0x2d4>)
 8002c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c80:	099b      	lsrs	r3, r3, #6
 8002c82:	3301      	adds	r3, #1
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002c88:	e002      	b.n	8002c90 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	3b01      	subs	r3, #1
 8002c8e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1f9      	bne.n	8002c8a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7ff ff64 	bl	8002b68 <LL_ADC_IsInternalRegulatorEnabled>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d10d      	bne.n	8002cc2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002caa:	f043 0210 	orr.w	r2, r3, #16
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cb6:	f043 0201 	orr.w	r2, r3, #1
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7ff ff75 	bl	8002bb6 <LL_ADC_REG_IsConversionOngoing>
 8002ccc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd2:	f003 0310 	and.w	r3, r3, #16
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	f040 8134 	bne.w	8002f44 <HAL_ADC_Init+0x340>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f040 8130 	bne.w	8002f44 <HAL_ADC_Init+0x340>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ce8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002cec:	f043 0202 	orr.w	r2, r3, #2
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7ff ff49 	bl	8002b90 <LL_ADC_IsEnabled>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d137      	bne.n	8002d74 <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d0c:	d004      	beq.n	8002d18 <HAL_ADC_Init+0x114>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a72      	ldr	r2, [pc, #456]	; (8002edc <HAL_ADC_Init+0x2d8>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d10f      	bne.n	8002d38 <HAL_ADC_Init+0x134>
 8002d18:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002d1c:	f7ff ff38 	bl	8002b90 <LL_ADC_IsEnabled>
 8002d20:	4604      	mov	r4, r0
 8002d22:	486e      	ldr	r0, [pc, #440]	; (8002edc <HAL_ADC_Init+0x2d8>)
 8002d24:	f7ff ff34 	bl	8002b90 <LL_ADC_IsEnabled>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	4323      	orrs	r3, r4
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	bf0c      	ite	eq
 8002d30:	2301      	moveq	r3, #1
 8002d32:	2300      	movne	r3, #0
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	e008      	b.n	8002d4a <HAL_ADC_Init+0x146>
 8002d38:	4869      	ldr	r0, [pc, #420]	; (8002ee0 <HAL_ADC_Init+0x2dc>)
 8002d3a:	f7ff ff29 	bl	8002b90 <LL_ADC_IsEnabled>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	bf0c      	ite	eq
 8002d44:	2301      	moveq	r3, #1
 8002d46:	2300      	movne	r3, #0
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d012      	beq.n	8002d74 <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d56:	d004      	beq.n	8002d62 <HAL_ADC_Init+0x15e>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a5f      	ldr	r2, [pc, #380]	; (8002edc <HAL_ADC_Init+0x2d8>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d101      	bne.n	8002d66 <HAL_ADC_Init+0x162>
 8002d62:	4a60      	ldr	r2, [pc, #384]	; (8002ee4 <HAL_ADC_Init+0x2e0>)
 8002d64:	e000      	b.n	8002d68 <HAL_ADC_Init+0x164>
 8002d66:	4a60      	ldr	r2, [pc, #384]	; (8002ee8 <HAL_ADC_Init+0x2e4>)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	4610      	mov	r0, r2
 8002d70:	f7ff fd72 	bl	8002858 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	7f5b      	ldrb	r3, [r3, #29]
 8002d78:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d7e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002d84:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002d8a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d92:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d94:	4313      	orrs	r3, r2
 8002d96:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d106      	bne.n	8002db0 <HAL_ADC_Init+0x1ac>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da6:	3b01      	subs	r3, #1
 8002da8:	045b      	lsls	r3, r3, #17
 8002daa:	69ba      	ldr	r2, [r7, #24]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d009      	beq.n	8002dcc <HAL_ADC_Init+0x1c8>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dbc:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68da      	ldr	r2, [r3, #12]
 8002dd2:	4b46      	ldr	r3, [pc, #280]	; (8002eec <HAL_ADC_Init+0x2e8>)
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	6812      	ldr	r2, [r2, #0]
 8002dda:	69b9      	ldr	r1, [r7, #24]
 8002ddc:	430b      	orrs	r3, r1
 8002dde:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	430a      	orrs	r2, r1
 8002df4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7ff feee 	bl	8002bdc <LL_ADC_INJ_IsConversionOngoing>
 8002e00:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d17b      	bne.n	8002f00 <HAL_ADC_Init+0x2fc>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d178      	bne.n	8002f00 <HAL_ADC_Init+0x2fc>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002e12:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e1a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e2a:	f023 0302 	bic.w	r3, r3, #2
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	6812      	ldr	r2, [r2, #0]
 8002e32:	69b9      	ldr	r1, [r7, #24]
 8002e34:	430b      	orrs	r3, r1
 8002e36:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d017      	beq.n	8002e70 <HAL_ADC_Init+0x26c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	691a      	ldr	r2, [r3, #16]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002e4e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002e58:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002e5c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	6911      	ldr	r1, [r2, #16]
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	6812      	ldr	r2, [r2, #0]
 8002e68:	430b      	orrs	r3, r1
 8002e6a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002e6e:	e013      	b.n	8002e98 <HAL_ADC_Init+0x294>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	691a      	ldr	r2, [r3, #16]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002e7e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	6812      	ldr	r2, [r2, #0]
 8002e8c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002e90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e94:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d126      	bne.n	8002ef0 <HAL_ADC_Init+0x2ec>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	691b      	ldr	r3, [r3, #16]
 8002ea8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002eac:	f023 0304 	bic.w	r3, r3, #4
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002eb8:	4311      	orrs	r1, r2
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002ebe:	4311      	orrs	r1, r2
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	431a      	orrs	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f042 0201 	orr.w	r2, r2, #1
 8002ed0:	611a      	str	r2, [r3, #16]
 8002ed2:	e015      	b.n	8002f00 <HAL_ADC_Init+0x2fc>
 8002ed4:	200001c0 	.word	0x200001c0
 8002ed8:	053e2d63 	.word	0x053e2d63
 8002edc:	50000100 	.word	0x50000100
 8002ee0:	50000400 	.word	0x50000400
 8002ee4:	50000300 	.word	0x50000300
 8002ee8:	50000700 	.word	0x50000700
 8002eec:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	691a      	ldr	r2, [r3, #16]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 0201 	bic.w	r2, r2, #1
 8002efe:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	695b      	ldr	r3, [r3, #20]
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d10c      	bne.n	8002f22 <HAL_ADC_Init+0x31e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0e:	f023 010f 	bic.w	r1, r3, #15
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a1b      	ldr	r3, [r3, #32]
 8002f16:	1e5a      	subs	r2, r3, #1
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	631a      	str	r2, [r3, #48]	; 0x30
 8002f20:	e007      	b.n	8002f32 <HAL_ADC_Init+0x32e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f022 020f 	bic.w	r2, r2, #15
 8002f30:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f36:	f023 0303 	bic.w	r3, r3, #3
 8002f3a:	f043 0201 	orr.w	r2, r3, #1
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	65da      	str	r2, [r3, #92]	; 0x5c
 8002f42:	e007      	b.n	8002f54 <HAL_ADC_Init+0x350>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f48:	f043 0210 	orr.w	r2, r3, #16
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002f54:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3724      	adds	r7, #36	; 0x24
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd90      	pop	{r4, r7, pc}
 8002f5e:	bf00      	nop

08002f60 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b0b6      	sub	sp, #216	; 0xd8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002f70:	2300      	movs	r3, #0
 8002f72:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d102      	bne.n	8002f84 <HAL_ADC_ConfigChannel+0x24>
 8002f7e:	2302      	movs	r3, #2
 8002f80:	f000 bc04 	b.w	800378c <HAL_ADC_ConfigChannel+0x82c>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7ff fe10 	bl	8002bb6 <LL_ADC_REG_IsConversionOngoing>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f040 83e8 	bne.w	800376e <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6818      	ldr	r0, [r3, #0]
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	6859      	ldr	r1, [r3, #4]
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	461a      	mov	r2, r3
 8002fac:	f7ff fd26 	bl	80029fc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7ff fdfe 	bl	8002bb6 <LL_ADC_REG_IsConversionOngoing>
 8002fba:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7ff fe0a 	bl	8002bdc <LL_ADC_INJ_IsConversionOngoing>
 8002fc8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002fcc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f040 81d9 	bne.w	8003388 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002fd6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	f040 81d4 	bne.w	8003388 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002fe8:	d10f      	bne.n	800300a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6818      	ldr	r0, [r3, #0]
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	f7ff fd2d 	bl	8002a54 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003002:	4618      	mov	r0, r3
 8003004:	f7ff fce7 	bl	80029d6 <LL_ADC_SetSamplingTimeCommonConfig>
 8003008:	e00e      	b.n	8003028 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6818      	ldr	r0, [r3, #0]
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	6819      	ldr	r1, [r3, #0]
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	461a      	mov	r2, r3
 8003018:	f7ff fd1c 	bl	8002a54 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2100      	movs	r1, #0
 8003022:	4618      	mov	r0, r3
 8003024:	f7ff fcd7 	bl	80029d6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	695a      	ldr	r2, [r3, #20]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	08db      	lsrs	r3, r3, #3
 8003034:	f003 0303 	and.w	r3, r3, #3
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	fa02 f303 	lsl.w	r3, r2, r3
 800303e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	2b04      	cmp	r3, #4
 8003048:	d022      	beq.n	8003090 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6818      	ldr	r0, [r3, #0]
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	6919      	ldr	r1, [r3, #16]
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800305a:	f7ff fc31 	bl	80028c0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6818      	ldr	r0, [r3, #0]
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	6919      	ldr	r1, [r3, #16]
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	461a      	mov	r2, r3
 800306c:	f7ff fc7d 	bl	800296a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6818      	ldr	r0, [r3, #0]
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800307c:	2b01      	cmp	r3, #1
 800307e:	d102      	bne.n	8003086 <HAL_ADC_ConfigChannel+0x126>
 8003080:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003084:	e000      	b.n	8003088 <HAL_ADC_ConfigChannel+0x128>
 8003086:	2300      	movs	r3, #0
 8003088:	461a      	mov	r2, r3
 800308a:	f7ff fc89 	bl	80029a0 <LL_ADC_SetOffsetSaturation>
 800308e:	e17b      	b.n	8003388 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2100      	movs	r1, #0
 8003096:	4618      	mov	r0, r3
 8003098:	f7ff fc36 	bl	8002908 <LL_ADC_GetOffsetChannel>
 800309c:	4603      	mov	r3, r0
 800309e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10a      	bne.n	80030bc <HAL_ADC_ConfigChannel+0x15c>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2100      	movs	r1, #0
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7ff fc2b 	bl	8002908 <LL_ADC_GetOffsetChannel>
 80030b2:	4603      	mov	r3, r0
 80030b4:	0e9b      	lsrs	r3, r3, #26
 80030b6:	f003 021f 	and.w	r2, r3, #31
 80030ba:	e01e      	b.n	80030fa <HAL_ADC_ConfigChannel+0x19a>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2100      	movs	r1, #0
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7ff fc20 	bl	8002908 <LL_ADC_GetOffsetChannel>
 80030c8:	4603      	mov	r3, r0
 80030ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80030d2:	fa93 f3a3 	rbit	r3, r3
 80030d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80030da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80030de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80030e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80030ea:	2320      	movs	r3, #32
 80030ec:	e004      	b.n	80030f8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80030ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80030f2:	fab3 f383 	clz	r3, r3
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003102:	2b00      	cmp	r3, #0
 8003104:	d105      	bne.n	8003112 <HAL_ADC_ConfigChannel+0x1b2>
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	0e9b      	lsrs	r3, r3, #26
 800310c:	f003 031f 	and.w	r3, r3, #31
 8003110:	e018      	b.n	8003144 <HAL_ADC_ConfigChannel+0x1e4>
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800311e:	fa93 f3a3 	rbit	r3, r3
 8003122:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003126:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800312a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800312e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003132:	2b00      	cmp	r3, #0
 8003134:	d101      	bne.n	800313a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003136:	2320      	movs	r3, #32
 8003138:	e004      	b.n	8003144 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800313a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800313e:	fab3 f383 	clz	r3, r3
 8003142:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003144:	429a      	cmp	r2, r3
 8003146:	d106      	bne.n	8003156 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2200      	movs	r2, #0
 800314e:	2100      	movs	r1, #0
 8003150:	4618      	mov	r0, r3
 8003152:	f7ff fbef 	bl	8002934 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2101      	movs	r1, #1
 800315c:	4618      	mov	r0, r3
 800315e:	f7ff fbd3 	bl	8002908 <LL_ADC_GetOffsetChannel>
 8003162:	4603      	mov	r3, r0
 8003164:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003168:	2b00      	cmp	r3, #0
 800316a:	d10a      	bne.n	8003182 <HAL_ADC_ConfigChannel+0x222>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2101      	movs	r1, #1
 8003172:	4618      	mov	r0, r3
 8003174:	f7ff fbc8 	bl	8002908 <LL_ADC_GetOffsetChannel>
 8003178:	4603      	mov	r3, r0
 800317a:	0e9b      	lsrs	r3, r3, #26
 800317c:	f003 021f 	and.w	r2, r3, #31
 8003180:	e01e      	b.n	80031c0 <HAL_ADC_ConfigChannel+0x260>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2101      	movs	r1, #1
 8003188:	4618      	mov	r0, r3
 800318a:	f7ff fbbd 	bl	8002908 <LL_ADC_GetOffsetChannel>
 800318e:	4603      	mov	r3, r0
 8003190:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003194:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003198:	fa93 f3a3 	rbit	r3, r3
 800319c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80031a0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80031a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80031a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d101      	bne.n	80031b4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80031b0:	2320      	movs	r3, #32
 80031b2:	e004      	b.n	80031be <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80031b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80031b8:	fab3 f383 	clz	r3, r3
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d105      	bne.n	80031d8 <HAL_ADC_ConfigChannel+0x278>
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	0e9b      	lsrs	r3, r3, #26
 80031d2:	f003 031f 	and.w	r3, r3, #31
 80031d6:	e018      	b.n	800320a <HAL_ADC_ConfigChannel+0x2aa>
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80031e4:	fa93 f3a3 	rbit	r3, r3
 80031e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80031ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80031f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80031f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d101      	bne.n	8003200 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80031fc:	2320      	movs	r3, #32
 80031fe:	e004      	b.n	800320a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003200:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003204:	fab3 f383 	clz	r3, r3
 8003208:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800320a:	429a      	cmp	r2, r3
 800320c:	d106      	bne.n	800321c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2200      	movs	r2, #0
 8003214:	2101      	movs	r1, #1
 8003216:	4618      	mov	r0, r3
 8003218:	f7ff fb8c 	bl	8002934 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2102      	movs	r1, #2
 8003222:	4618      	mov	r0, r3
 8003224:	f7ff fb70 	bl	8002908 <LL_ADC_GetOffsetChannel>
 8003228:	4603      	mov	r3, r0
 800322a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800322e:	2b00      	cmp	r3, #0
 8003230:	d10a      	bne.n	8003248 <HAL_ADC_ConfigChannel+0x2e8>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2102      	movs	r1, #2
 8003238:	4618      	mov	r0, r3
 800323a:	f7ff fb65 	bl	8002908 <LL_ADC_GetOffsetChannel>
 800323e:	4603      	mov	r3, r0
 8003240:	0e9b      	lsrs	r3, r3, #26
 8003242:	f003 021f 	and.w	r2, r3, #31
 8003246:	e01e      	b.n	8003286 <HAL_ADC_ConfigChannel+0x326>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2102      	movs	r1, #2
 800324e:	4618      	mov	r0, r3
 8003250:	f7ff fb5a 	bl	8002908 <LL_ADC_GetOffsetChannel>
 8003254:	4603      	mov	r3, r0
 8003256:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800325e:	fa93 f3a3 	rbit	r3, r3
 8003262:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003266:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800326a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800326e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003276:	2320      	movs	r3, #32
 8003278:	e004      	b.n	8003284 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800327a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800327e:	fab3 f383 	clz	r3, r3
 8003282:	b2db      	uxtb	r3, r3
 8003284:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800328e:	2b00      	cmp	r3, #0
 8003290:	d105      	bne.n	800329e <HAL_ADC_ConfigChannel+0x33e>
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	0e9b      	lsrs	r3, r3, #26
 8003298:	f003 031f 	and.w	r3, r3, #31
 800329c:	e016      	b.n	80032cc <HAL_ADC_ConfigChannel+0x36c>
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80032aa:	fa93 f3a3 	rbit	r3, r3
 80032ae:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80032b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80032b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80032b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d101      	bne.n	80032c2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80032be:	2320      	movs	r3, #32
 80032c0:	e004      	b.n	80032cc <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80032c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032c6:	fab3 f383 	clz	r3, r3
 80032ca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d106      	bne.n	80032de <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2200      	movs	r2, #0
 80032d6:	2102      	movs	r1, #2
 80032d8:	4618      	mov	r0, r3
 80032da:	f7ff fb2b 	bl	8002934 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2103      	movs	r1, #3
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7ff fb0f 	bl	8002908 <LL_ADC_GetOffsetChannel>
 80032ea:	4603      	mov	r3, r0
 80032ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d10a      	bne.n	800330a <HAL_ADC_ConfigChannel+0x3aa>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2103      	movs	r1, #3
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7ff fb04 	bl	8002908 <LL_ADC_GetOffsetChannel>
 8003300:	4603      	mov	r3, r0
 8003302:	0e9b      	lsrs	r3, r3, #26
 8003304:	f003 021f 	and.w	r2, r3, #31
 8003308:	e017      	b.n	800333a <HAL_ADC_ConfigChannel+0x3da>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2103      	movs	r1, #3
 8003310:	4618      	mov	r0, r3
 8003312:	f7ff faf9 	bl	8002908 <LL_ADC_GetOffsetChannel>
 8003316:	4603      	mov	r3, r0
 8003318:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800331c:	fa93 f3a3 	rbit	r3, r3
 8003320:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003322:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003324:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003326:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003328:	2b00      	cmp	r3, #0
 800332a:	d101      	bne.n	8003330 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800332c:	2320      	movs	r3, #32
 800332e:	e003      	b.n	8003338 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003330:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003332:	fab3 f383 	clz	r3, r3
 8003336:	b2db      	uxtb	r3, r3
 8003338:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003342:	2b00      	cmp	r3, #0
 8003344:	d105      	bne.n	8003352 <HAL_ADC_ConfigChannel+0x3f2>
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	0e9b      	lsrs	r3, r3, #26
 800334c:	f003 031f 	and.w	r3, r3, #31
 8003350:	e011      	b.n	8003376 <HAL_ADC_ConfigChannel+0x416>
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003358:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800335a:	fa93 f3a3 	rbit	r3, r3
 800335e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003360:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003362:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003364:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003366:	2b00      	cmp	r3, #0
 8003368:	d101      	bne.n	800336e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800336a:	2320      	movs	r3, #32
 800336c:	e003      	b.n	8003376 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800336e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003370:	fab3 f383 	clz	r3, r3
 8003374:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003376:	429a      	cmp	r2, r3
 8003378:	d106      	bne.n	8003388 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	2200      	movs	r2, #0
 8003380:	2103      	movs	r1, #3
 8003382:	4618      	mov	r0, r3
 8003384:	f7ff fad6 	bl	8002934 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4618      	mov	r0, r3
 800338e:	f7ff fbff 	bl	8002b90 <LL_ADC_IsEnabled>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	f040 813d 	bne.w	8003614 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6818      	ldr	r0, [r3, #0]
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	6819      	ldr	r1, [r3, #0]
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	461a      	mov	r2, r3
 80033a8:	f7ff fb80 	bl	8002aac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	4aa2      	ldr	r2, [pc, #648]	; (800363c <HAL_ADC_ConfigChannel+0x6dc>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	f040 812e 	bne.w	8003614 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d10b      	bne.n	80033e0 <HAL_ADC_ConfigChannel+0x480>
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	0e9b      	lsrs	r3, r3, #26
 80033ce:	3301      	adds	r3, #1
 80033d0:	f003 031f 	and.w	r3, r3, #31
 80033d4:	2b09      	cmp	r3, #9
 80033d6:	bf94      	ite	ls
 80033d8:	2301      	movls	r3, #1
 80033da:	2300      	movhi	r3, #0
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	e019      	b.n	8003414 <HAL_ADC_ConfigChannel+0x4b4>
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033e8:	fa93 f3a3 	rbit	r3, r3
 80033ec:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80033ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033f0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80033f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d101      	bne.n	80033fc <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80033f8:	2320      	movs	r3, #32
 80033fa:	e003      	b.n	8003404 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80033fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033fe:	fab3 f383 	clz	r3, r3
 8003402:	b2db      	uxtb	r3, r3
 8003404:	3301      	adds	r3, #1
 8003406:	f003 031f 	and.w	r3, r3, #31
 800340a:	2b09      	cmp	r3, #9
 800340c:	bf94      	ite	ls
 800340e:	2301      	movls	r3, #1
 8003410:	2300      	movhi	r3, #0
 8003412:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003414:	2b00      	cmp	r3, #0
 8003416:	d079      	beq.n	800350c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003420:	2b00      	cmp	r3, #0
 8003422:	d107      	bne.n	8003434 <HAL_ADC_ConfigChannel+0x4d4>
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	0e9b      	lsrs	r3, r3, #26
 800342a:	3301      	adds	r3, #1
 800342c:	069b      	lsls	r3, r3, #26
 800342e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003432:	e015      	b.n	8003460 <HAL_ADC_ConfigChannel+0x500>
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800343a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800343c:	fa93 f3a3 	rbit	r3, r3
 8003440:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003442:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003444:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003446:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003448:	2b00      	cmp	r3, #0
 800344a:	d101      	bne.n	8003450 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800344c:	2320      	movs	r3, #32
 800344e:	e003      	b.n	8003458 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003450:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003452:	fab3 f383 	clz	r3, r3
 8003456:	b2db      	uxtb	r3, r3
 8003458:	3301      	adds	r3, #1
 800345a:	069b      	lsls	r3, r3, #26
 800345c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003468:	2b00      	cmp	r3, #0
 800346a:	d109      	bne.n	8003480 <HAL_ADC_ConfigChannel+0x520>
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	0e9b      	lsrs	r3, r3, #26
 8003472:	3301      	adds	r3, #1
 8003474:	f003 031f 	and.w	r3, r3, #31
 8003478:	2101      	movs	r1, #1
 800347a:	fa01 f303 	lsl.w	r3, r1, r3
 800347e:	e017      	b.n	80034b0 <HAL_ADC_ConfigChannel+0x550>
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003486:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003488:	fa93 f3a3 	rbit	r3, r3
 800348c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800348e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003490:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003492:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003494:	2b00      	cmp	r3, #0
 8003496:	d101      	bne.n	800349c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003498:	2320      	movs	r3, #32
 800349a:	e003      	b.n	80034a4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800349c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800349e:	fab3 f383 	clz	r3, r3
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	3301      	adds	r3, #1
 80034a6:	f003 031f 	and.w	r3, r3, #31
 80034aa:	2101      	movs	r1, #1
 80034ac:	fa01 f303 	lsl.w	r3, r1, r3
 80034b0:	ea42 0103 	orr.w	r1, r2, r3
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d10a      	bne.n	80034d6 <HAL_ADC_ConfigChannel+0x576>
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	0e9b      	lsrs	r3, r3, #26
 80034c6:	3301      	adds	r3, #1
 80034c8:	f003 021f 	and.w	r2, r3, #31
 80034cc:	4613      	mov	r3, r2
 80034ce:	005b      	lsls	r3, r3, #1
 80034d0:	4413      	add	r3, r2
 80034d2:	051b      	lsls	r3, r3, #20
 80034d4:	e018      	b.n	8003508 <HAL_ADC_ConfigChannel+0x5a8>
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034de:	fa93 f3a3 	rbit	r3, r3
 80034e2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80034e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80034e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d101      	bne.n	80034f2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80034ee:	2320      	movs	r3, #32
 80034f0:	e003      	b.n	80034fa <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80034f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034f4:	fab3 f383 	clz	r3, r3
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	3301      	adds	r3, #1
 80034fc:	f003 021f 	and.w	r2, r3, #31
 8003500:	4613      	mov	r3, r2
 8003502:	005b      	lsls	r3, r3, #1
 8003504:	4413      	add	r3, r2
 8003506:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003508:	430b      	orrs	r3, r1
 800350a:	e07e      	b.n	800360a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003514:	2b00      	cmp	r3, #0
 8003516:	d107      	bne.n	8003528 <HAL_ADC_ConfigChannel+0x5c8>
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	0e9b      	lsrs	r3, r3, #26
 800351e:	3301      	adds	r3, #1
 8003520:	069b      	lsls	r3, r3, #26
 8003522:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003526:	e015      	b.n	8003554 <HAL_ADC_ConfigChannel+0x5f4>
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003530:	fa93 f3a3 	rbit	r3, r3
 8003534:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003538:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800353a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800353c:	2b00      	cmp	r3, #0
 800353e:	d101      	bne.n	8003544 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003540:	2320      	movs	r3, #32
 8003542:	e003      	b.n	800354c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003546:	fab3 f383 	clz	r3, r3
 800354a:	b2db      	uxtb	r3, r3
 800354c:	3301      	adds	r3, #1
 800354e:	069b      	lsls	r3, r3, #26
 8003550:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800355c:	2b00      	cmp	r3, #0
 800355e:	d109      	bne.n	8003574 <HAL_ADC_ConfigChannel+0x614>
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	0e9b      	lsrs	r3, r3, #26
 8003566:	3301      	adds	r3, #1
 8003568:	f003 031f 	and.w	r3, r3, #31
 800356c:	2101      	movs	r1, #1
 800356e:	fa01 f303 	lsl.w	r3, r1, r3
 8003572:	e017      	b.n	80035a4 <HAL_ADC_ConfigChannel+0x644>
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800357a:	6a3b      	ldr	r3, [r7, #32]
 800357c:	fa93 f3a3 	rbit	r3, r3
 8003580:	61fb      	str	r3, [r7, #28]
  return result;
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003588:	2b00      	cmp	r3, #0
 800358a:	d101      	bne.n	8003590 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800358c:	2320      	movs	r3, #32
 800358e:	e003      	b.n	8003598 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003592:	fab3 f383 	clz	r3, r3
 8003596:	b2db      	uxtb	r3, r3
 8003598:	3301      	adds	r3, #1
 800359a:	f003 031f 	and.w	r3, r3, #31
 800359e:	2101      	movs	r1, #1
 80035a0:	fa01 f303 	lsl.w	r3, r1, r3
 80035a4:	ea42 0103 	orr.w	r1, r2, r3
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d10d      	bne.n	80035d0 <HAL_ADC_ConfigChannel+0x670>
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	0e9b      	lsrs	r3, r3, #26
 80035ba:	3301      	adds	r3, #1
 80035bc:	f003 021f 	and.w	r2, r3, #31
 80035c0:	4613      	mov	r3, r2
 80035c2:	005b      	lsls	r3, r3, #1
 80035c4:	4413      	add	r3, r2
 80035c6:	3b1e      	subs	r3, #30
 80035c8:	051b      	lsls	r3, r3, #20
 80035ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80035ce:	e01b      	b.n	8003608 <HAL_ADC_ConfigChannel+0x6a8>
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	fa93 f3a3 	rbit	r3, r3
 80035dc:	613b      	str	r3, [r7, #16]
  return result;
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d101      	bne.n	80035ec <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80035e8:	2320      	movs	r3, #32
 80035ea:	e003      	b.n	80035f4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	fab3 f383 	clz	r3, r3
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	3301      	adds	r3, #1
 80035f6:	f003 021f 	and.w	r2, r3, #31
 80035fa:	4613      	mov	r3, r2
 80035fc:	005b      	lsls	r3, r3, #1
 80035fe:	4413      	add	r3, r2
 8003600:	3b1e      	subs	r3, #30
 8003602:	051b      	lsls	r3, r3, #20
 8003604:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003608:	430b      	orrs	r3, r1
 800360a:	683a      	ldr	r2, [r7, #0]
 800360c:	6892      	ldr	r2, [r2, #8]
 800360e:	4619      	mov	r1, r3
 8003610:	f7ff fa20 	bl	8002a54 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	4b09      	ldr	r3, [pc, #36]	; (8003640 <HAL_ADC_ConfigChannel+0x6e0>)
 800361a:	4013      	ands	r3, r2
 800361c:	2b00      	cmp	r3, #0
 800361e:	f000 80af 	beq.w	8003780 <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800362a:	d004      	beq.n	8003636 <HAL_ADC_ConfigChannel+0x6d6>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a04      	ldr	r2, [pc, #16]	; (8003644 <HAL_ADC_ConfigChannel+0x6e4>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d10a      	bne.n	800364c <HAL_ADC_ConfigChannel+0x6ec>
 8003636:	4b04      	ldr	r3, [pc, #16]	; (8003648 <HAL_ADC_ConfigChannel+0x6e8>)
 8003638:	e009      	b.n	800364e <HAL_ADC_ConfigChannel+0x6ee>
 800363a:	bf00      	nop
 800363c:	407f0000 	.word	0x407f0000
 8003640:	80080000 	.word	0x80080000
 8003644:	50000100 	.word	0x50000100
 8003648:	50000300 	.word	0x50000300
 800364c:	4b51      	ldr	r3, [pc, #324]	; (8003794 <HAL_ADC_ConfigChannel+0x834>)
 800364e:	4618      	mov	r0, r3
 8003650:	f7ff f928 	bl	80028a4 <LL_ADC_GetCommonPathInternalCh>
 8003654:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a4e      	ldr	r2, [pc, #312]	; (8003798 <HAL_ADC_ConfigChannel+0x838>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d004      	beq.n	800366c <HAL_ADC_ConfigChannel+0x70c>
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a4d      	ldr	r2, [pc, #308]	; (800379c <HAL_ADC_ConfigChannel+0x83c>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d134      	bne.n	80036d6 <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800366c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003670:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d12e      	bne.n	80036d6 <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003680:	d17e      	bne.n	8003780 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800368a:	d004      	beq.n	8003696 <HAL_ADC_ConfigChannel+0x736>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a43      	ldr	r2, [pc, #268]	; (80037a0 <HAL_ADC_ConfigChannel+0x840>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d101      	bne.n	800369a <HAL_ADC_ConfigChannel+0x73a>
 8003696:	4a43      	ldr	r2, [pc, #268]	; (80037a4 <HAL_ADC_ConfigChannel+0x844>)
 8003698:	e000      	b.n	800369c <HAL_ADC_ConfigChannel+0x73c>
 800369a:	4a3e      	ldr	r2, [pc, #248]	; (8003794 <HAL_ADC_ConfigChannel+0x834>)
 800369c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80036a4:	4619      	mov	r1, r3
 80036a6:	4610      	mov	r0, r2
 80036a8:	f7ff f8e9 	bl	800287e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80036ac:	4b3e      	ldr	r3, [pc, #248]	; (80037a8 <HAL_ADC_ConfigChannel+0x848>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	099b      	lsrs	r3, r3, #6
 80036b2:	4a3e      	ldr	r2, [pc, #248]	; (80037ac <HAL_ADC_ConfigChannel+0x84c>)
 80036b4:	fba2 2303 	umull	r2, r3, r2, r3
 80036b8:	099b      	lsrs	r3, r3, #6
 80036ba:	1c5a      	adds	r2, r3, #1
 80036bc:	4613      	mov	r3, r2
 80036be:	005b      	lsls	r3, r3, #1
 80036c0:	4413      	add	r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80036c6:	e002      	b.n	80036ce <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	3b01      	subs	r3, #1
 80036cc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1f9      	bne.n	80036c8 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80036d4:	e054      	b.n	8003780 <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a35      	ldr	r2, [pc, #212]	; (80037b0 <HAL_ADC_ConfigChannel+0x850>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d120      	bne.n	8003722 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80036e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d11a      	bne.n	8003722 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036f4:	d144      	bne.n	8003780 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036fe:	d004      	beq.n	800370a <HAL_ADC_ConfigChannel+0x7aa>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a26      	ldr	r2, [pc, #152]	; (80037a0 <HAL_ADC_ConfigChannel+0x840>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d101      	bne.n	800370e <HAL_ADC_ConfigChannel+0x7ae>
 800370a:	4a26      	ldr	r2, [pc, #152]	; (80037a4 <HAL_ADC_ConfigChannel+0x844>)
 800370c:	e000      	b.n	8003710 <HAL_ADC_ConfigChannel+0x7b0>
 800370e:	4a21      	ldr	r2, [pc, #132]	; (8003794 <HAL_ADC_ConfigChannel+0x834>)
 8003710:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003714:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003718:	4619      	mov	r1, r3
 800371a:	4610      	mov	r0, r2
 800371c:	f7ff f8af 	bl	800287e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003720:	e02e      	b.n	8003780 <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a23      	ldr	r2, [pc, #140]	; (80037b4 <HAL_ADC_ConfigChannel+0x854>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d129      	bne.n	8003780 <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800372c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003730:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d123      	bne.n	8003780 <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a18      	ldr	r2, [pc, #96]	; (80037a0 <HAL_ADC_ConfigChannel+0x840>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d01e      	beq.n	8003780 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800374a:	d004      	beq.n	8003756 <HAL_ADC_ConfigChannel+0x7f6>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a13      	ldr	r2, [pc, #76]	; (80037a0 <HAL_ADC_ConfigChannel+0x840>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d101      	bne.n	800375a <HAL_ADC_ConfigChannel+0x7fa>
 8003756:	4a13      	ldr	r2, [pc, #76]	; (80037a4 <HAL_ADC_ConfigChannel+0x844>)
 8003758:	e000      	b.n	800375c <HAL_ADC_ConfigChannel+0x7fc>
 800375a:	4a0e      	ldr	r2, [pc, #56]	; (8003794 <HAL_ADC_ConfigChannel+0x834>)
 800375c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003760:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003764:	4619      	mov	r1, r3
 8003766:	4610      	mov	r0, r2
 8003768:	f7ff f889 	bl	800287e <LL_ADC_SetCommonPathInternalCh>
 800376c:	e008      	b.n	8003780 <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003772:	f043 0220 	orr.w	r2, r3, #32
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003788:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800378c:	4618      	mov	r0, r3
 800378e:	37d8      	adds	r7, #216	; 0xd8
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	50000700 	.word	0x50000700
 8003798:	c3210000 	.word	0xc3210000
 800379c:	90c00010 	.word	0x90c00010
 80037a0:	50000100 	.word	0x50000100
 80037a4:	50000300 	.word	0x50000300
 80037a8:	200001c0 	.word	0x200001c0
 80037ac:	053e2d63 	.word	0x053e2d63
 80037b0:	c7520000 	.word	0xc7520000
 80037b4:	cb840000 	.word	0xcb840000

080037b8 <LL_ADC_IsEnabled>:
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f003 0301 	and.w	r3, r3, #1
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d101      	bne.n	80037d0 <LL_ADC_IsEnabled+0x18>
 80037cc:	2301      	movs	r3, #1
 80037ce:	e000      	b.n	80037d2 <LL_ADC_IsEnabled+0x1a>
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	370c      	adds	r7, #12
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr

080037de <LL_ADC_REG_IsConversionOngoing>:
{
 80037de:	b480      	push	{r7}
 80037e0:	b083      	sub	sp, #12
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f003 0304 	and.w	r3, r3, #4
 80037ee:	2b04      	cmp	r3, #4
 80037f0:	d101      	bne.n	80037f6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80037f2:	2301      	movs	r3, #1
 80037f4:	e000      	b.n	80037f8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003804:	b590      	push	{r4, r7, lr}
 8003806:	b0a1      	sub	sp, #132	; 0x84
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800380e:	2300      	movs	r3, #0
 8003810:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800381a:	2b01      	cmp	r3, #1
 800381c:	d101      	bne.n	8003822 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800381e:	2302      	movs	r3, #2
 8003820:	e0cb      	b.n	80039ba <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800382a:	2300      	movs	r3, #0
 800382c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800382e:	2300      	movs	r3, #0
 8003830:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800383a:	d102      	bne.n	8003842 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800383c:	4b61      	ldr	r3, [pc, #388]	; (80039c4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800383e:	60bb      	str	r3, [r7, #8]
 8003840:	e001      	b.n	8003846 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003842:	2300      	movs	r3, #0
 8003844:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d10b      	bne.n	8003864 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003850:	f043 0220 	orr.w	r2, r3, #32
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e0aa      	b.n	80039ba <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	4618      	mov	r0, r3
 8003868:	f7ff ffb9 	bl	80037de <LL_ADC_REG_IsConversionOngoing>
 800386c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4618      	mov	r0, r3
 8003874:	f7ff ffb3 	bl	80037de <LL_ADC_REG_IsConversionOngoing>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	f040 808c 	bne.w	8003998 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003880:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003882:	2b00      	cmp	r3, #0
 8003884:	f040 8088 	bne.w	8003998 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003890:	d004      	beq.n	800389c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a4b      	ldr	r2, [pc, #300]	; (80039c4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d101      	bne.n	80038a0 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 800389c:	4b4a      	ldr	r3, [pc, #296]	; (80039c8 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 800389e:	e000      	b.n	80038a2 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80038a0:	4b4a      	ldr	r3, [pc, #296]	; (80039cc <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 80038a2:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d041      	beq.n	8003930 <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80038ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	6859      	ldr	r1, [r3, #4]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80038be:	035b      	lsls	r3, r3, #13
 80038c0:	430b      	orrs	r3, r1
 80038c2:	431a      	orrs	r2, r3
 80038c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038c6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038d0:	d004      	beq.n	80038dc <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a3b      	ldr	r2, [pc, #236]	; (80039c4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d10f      	bne.n	80038fc <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 80038dc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80038e0:	f7ff ff6a 	bl	80037b8 <LL_ADC_IsEnabled>
 80038e4:	4604      	mov	r4, r0
 80038e6:	4837      	ldr	r0, [pc, #220]	; (80039c4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80038e8:	f7ff ff66 	bl	80037b8 <LL_ADC_IsEnabled>
 80038ec:	4603      	mov	r3, r0
 80038ee:	4323      	orrs	r3, r4
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	bf0c      	ite	eq
 80038f4:	2301      	moveq	r3, #1
 80038f6:	2300      	movne	r3, #0
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	e008      	b.n	800390e <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 80038fc:	4834      	ldr	r0, [pc, #208]	; (80039d0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 80038fe:	f7ff ff5b 	bl	80037b8 <LL_ADC_IsEnabled>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	bf0c      	ite	eq
 8003908:	2301      	moveq	r3, #1
 800390a:	2300      	movne	r3, #0
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b00      	cmp	r3, #0
 8003910:	d04c      	beq.n	80039ac <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003912:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800391a:	f023 030f 	bic.w	r3, r3, #15
 800391e:	683a      	ldr	r2, [r7, #0]
 8003920:	6811      	ldr	r1, [r2, #0]
 8003922:	683a      	ldr	r2, [r7, #0]
 8003924:	6892      	ldr	r2, [r2, #8]
 8003926:	430a      	orrs	r2, r1
 8003928:	431a      	orrs	r2, r3
 800392a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800392c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800392e:	e03d      	b.n	80039ac <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003930:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003938:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800393a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003944:	d004      	beq.n	8003950 <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a1e      	ldr	r2, [pc, #120]	; (80039c4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d10f      	bne.n	8003970 <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 8003950:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003954:	f7ff ff30 	bl	80037b8 <LL_ADC_IsEnabled>
 8003958:	4604      	mov	r4, r0
 800395a:	481a      	ldr	r0, [pc, #104]	; (80039c4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800395c:	f7ff ff2c 	bl	80037b8 <LL_ADC_IsEnabled>
 8003960:	4603      	mov	r3, r0
 8003962:	4323      	orrs	r3, r4
 8003964:	2b00      	cmp	r3, #0
 8003966:	bf0c      	ite	eq
 8003968:	2301      	moveq	r3, #1
 800396a:	2300      	movne	r3, #0
 800396c:	b2db      	uxtb	r3, r3
 800396e:	e008      	b.n	8003982 <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 8003970:	4817      	ldr	r0, [pc, #92]	; (80039d0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8003972:	f7ff ff21 	bl	80037b8 <LL_ADC_IsEnabled>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	bf0c      	ite	eq
 800397c:	2301      	moveq	r3, #1
 800397e:	2300      	movne	r3, #0
 8003980:	b2db      	uxtb	r3, r3
 8003982:	2b00      	cmp	r3, #0
 8003984:	d012      	beq.n	80039ac <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003986:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800398e:	f023 030f 	bic.w	r3, r3, #15
 8003992:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003994:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003996:	e009      	b.n	80039ac <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800399c:	f043 0220 	orr.w	r2, r3, #32
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80039aa:	e000      	b.n	80039ae <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80039ac:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80039b6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3784      	adds	r7, #132	; 0x84
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd90      	pop	{r4, r7, pc}
 80039c2:	bf00      	nop
 80039c4:	50000100 	.word	0x50000100
 80039c8:	50000300 	.word	0x50000300
 80039cc:	50000700 	.word	0x50000700
 80039d0:	50000400 	.word	0x50000400

080039d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f003 0307 	and.w	r3, r3, #7
 80039e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039e4:	4b0c      	ldr	r3, [pc, #48]	; (8003a18 <__NVIC_SetPriorityGrouping+0x44>)
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039ea:	68ba      	ldr	r2, [r7, #8]
 80039ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039f0:	4013      	ands	r3, r2
 80039f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a06:	4a04      	ldr	r2, [pc, #16]	; (8003a18 <__NVIC_SetPriorityGrouping+0x44>)
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	60d3      	str	r3, [r2, #12]
}
 8003a0c:	bf00      	nop
 8003a0e:	3714      	adds	r7, #20
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr
 8003a18:	e000ed00 	.word	0xe000ed00

08003a1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a20:	4b04      	ldr	r3, [pc, #16]	; (8003a34 <__NVIC_GetPriorityGrouping+0x18>)
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	0a1b      	lsrs	r3, r3, #8
 8003a26:	f003 0307 	and.w	r3, r3, #7
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr
 8003a34:	e000ed00 	.word	0xe000ed00

08003a38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	4603      	mov	r3, r0
 8003a40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	db0b      	blt.n	8003a62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a4a:	79fb      	ldrb	r3, [r7, #7]
 8003a4c:	f003 021f 	and.w	r2, r3, #31
 8003a50:	4907      	ldr	r1, [pc, #28]	; (8003a70 <__NVIC_EnableIRQ+0x38>)
 8003a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a56:	095b      	lsrs	r3, r3, #5
 8003a58:	2001      	movs	r0, #1
 8003a5a:	fa00 f202 	lsl.w	r2, r0, r2
 8003a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a62:	bf00      	nop
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	e000e100 	.word	0xe000e100

08003a74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	6039      	str	r1, [r7, #0]
 8003a7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	db0a      	blt.n	8003a9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	b2da      	uxtb	r2, r3
 8003a8c:	490c      	ldr	r1, [pc, #48]	; (8003ac0 <__NVIC_SetPriority+0x4c>)
 8003a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a92:	0112      	lsls	r2, r2, #4
 8003a94:	b2d2      	uxtb	r2, r2
 8003a96:	440b      	add	r3, r1
 8003a98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a9c:	e00a      	b.n	8003ab4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	b2da      	uxtb	r2, r3
 8003aa2:	4908      	ldr	r1, [pc, #32]	; (8003ac4 <__NVIC_SetPriority+0x50>)
 8003aa4:	79fb      	ldrb	r3, [r7, #7]
 8003aa6:	f003 030f 	and.w	r3, r3, #15
 8003aaa:	3b04      	subs	r3, #4
 8003aac:	0112      	lsls	r2, r2, #4
 8003aae:	b2d2      	uxtb	r2, r2
 8003ab0:	440b      	add	r3, r1
 8003ab2:	761a      	strb	r2, [r3, #24]
}
 8003ab4:	bf00      	nop
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr
 8003ac0:	e000e100 	.word	0xe000e100
 8003ac4:	e000ed00 	.word	0xe000ed00

08003ac8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b089      	sub	sp, #36	; 0x24
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f003 0307 	and.w	r3, r3, #7
 8003ada:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	f1c3 0307 	rsb	r3, r3, #7
 8003ae2:	2b04      	cmp	r3, #4
 8003ae4:	bf28      	it	cs
 8003ae6:	2304      	movcs	r3, #4
 8003ae8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	3304      	adds	r3, #4
 8003aee:	2b06      	cmp	r3, #6
 8003af0:	d902      	bls.n	8003af8 <NVIC_EncodePriority+0x30>
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	3b03      	subs	r3, #3
 8003af6:	e000      	b.n	8003afa <NVIC_EncodePriority+0x32>
 8003af8:	2300      	movs	r3, #0
 8003afa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003afc:	f04f 32ff 	mov.w	r2, #4294967295
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	fa02 f303 	lsl.w	r3, r2, r3
 8003b06:	43da      	mvns	r2, r3
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	401a      	ands	r2, r3
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b10:	f04f 31ff 	mov.w	r1, #4294967295
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	fa01 f303 	lsl.w	r3, r1, r3
 8003b1a:	43d9      	mvns	r1, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b20:	4313      	orrs	r3, r2
         );
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3724      	adds	r7, #36	; 0x24
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
	...

08003b30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b40:	d301      	bcc.n	8003b46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b42:	2301      	movs	r3, #1
 8003b44:	e00f      	b.n	8003b66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b46:	4a0a      	ldr	r2, [pc, #40]	; (8003b70 <SysTick_Config+0x40>)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b4e:	210f      	movs	r1, #15
 8003b50:	f04f 30ff 	mov.w	r0, #4294967295
 8003b54:	f7ff ff8e 	bl	8003a74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b58:	4b05      	ldr	r3, [pc, #20]	; (8003b70 <SysTick_Config+0x40>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b5e:	4b04      	ldr	r3, [pc, #16]	; (8003b70 <SysTick_Config+0x40>)
 8003b60:	2207      	movs	r2, #7
 8003b62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3708      	adds	r7, #8
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	e000e010 	.word	0xe000e010

08003b74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f7ff ff29 	bl	80039d4 <__NVIC_SetPriorityGrouping>
}
 8003b82:	bf00      	nop
 8003b84:	3708      	adds	r7, #8
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}

08003b8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b8a:	b580      	push	{r7, lr}
 8003b8c:	b086      	sub	sp, #24
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	4603      	mov	r3, r0
 8003b92:	60b9      	str	r1, [r7, #8]
 8003b94:	607a      	str	r2, [r7, #4]
 8003b96:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b98:	f7ff ff40 	bl	8003a1c <__NVIC_GetPriorityGrouping>
 8003b9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	68b9      	ldr	r1, [r7, #8]
 8003ba2:	6978      	ldr	r0, [r7, #20]
 8003ba4:	f7ff ff90 	bl	8003ac8 <NVIC_EncodePriority>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bae:	4611      	mov	r1, r2
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7ff ff5f 	bl	8003a74 <__NVIC_SetPriority>
}
 8003bb6:	bf00      	nop
 8003bb8:	3718      	adds	r7, #24
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}

08003bbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bbe:	b580      	push	{r7, lr}
 8003bc0:	b082      	sub	sp, #8
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7ff ff33 	bl	8003a38 <__NVIC_EnableIRQ>
}
 8003bd2:	bf00      	nop
 8003bd4:	3708      	adds	r7, #8
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b082      	sub	sp, #8
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f7ff ffa4 	bl	8003b30 <SysTick_Config>
 8003be8:	4603      	mov	r3, r0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3708      	adds	r7, #8
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
	...

08003bf4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e08d      	b.n	8003d22 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	4b47      	ldr	r3, [pc, #284]	; (8003d2c <HAL_DMA_Init+0x138>)
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d80f      	bhi.n	8003c32 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	461a      	mov	r2, r3
 8003c18:	4b45      	ldr	r3, [pc, #276]	; (8003d30 <HAL_DMA_Init+0x13c>)
 8003c1a:	4413      	add	r3, r2
 8003c1c:	4a45      	ldr	r2, [pc, #276]	; (8003d34 <HAL_DMA_Init+0x140>)
 8003c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c22:	091b      	lsrs	r3, r3, #4
 8003c24:	009a      	lsls	r2, r3, #2
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a42      	ldr	r2, [pc, #264]	; (8003d38 <HAL_DMA_Init+0x144>)
 8003c2e:	641a      	str	r2, [r3, #64]	; 0x40
 8003c30:	e00e      	b.n	8003c50 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	461a      	mov	r2, r3
 8003c38:	4b40      	ldr	r3, [pc, #256]	; (8003d3c <HAL_DMA_Init+0x148>)
 8003c3a:	4413      	add	r3, r2
 8003c3c:	4a3d      	ldr	r2, [pc, #244]	; (8003d34 <HAL_DMA_Init+0x140>)
 8003c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c42:	091b      	lsrs	r3, r3, #4
 8003c44:	009a      	lsls	r2, r3, #2
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a3c      	ldr	r2, [pc, #240]	; (8003d40 <HAL_DMA_Init+0x14c>)
 8003c4e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2202      	movs	r2, #2
 8003c54:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c6a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003c74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	699b      	ldr	r3, [r3, #24]
 8003c86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003c94:	68fa      	ldr	r2, [r7, #12]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 f9be 	bl	8004024 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cb0:	d102      	bne.n	8003cb8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	685a      	ldr	r2, [r3, #4]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cc0:	b2d2      	uxtb	r2, r2
 8003cc2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003ccc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d010      	beq.n	8003cf8 <HAL_DMA_Init+0x104>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	2b04      	cmp	r3, #4
 8003cdc:	d80c      	bhi.n	8003cf8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 f9de 	bl	80040a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ce8:	2200      	movs	r2, #0
 8003cea:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003cf4:	605a      	str	r2, [r3, #4]
 8003cf6:	e008      	b.n	8003d0a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3710      	adds	r7, #16
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	40020407 	.word	0x40020407
 8003d30:	bffdfff8 	.word	0xbffdfff8
 8003d34:	cccccccd 	.word	0xcccccccd
 8003d38:	40020000 	.word	0x40020000
 8003d3c:	bffdfbf8 	.word	0xbffdfbf8
 8003d40:	40020400 	.word	0x40020400

08003d44 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b085      	sub	sp, #20
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d005      	beq.n	8003d68 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2204      	movs	r2, #4
 8003d60:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	73fb      	strb	r3, [r7, #15]
 8003d66:	e037      	b.n	8003dd8 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f022 020e 	bic.w	r2, r2, #14
 8003d76:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d82:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d86:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f022 0201 	bic.w	r2, r2, #1
 8003d96:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d9c:	f003 021f 	and.w	r2, r3, #31
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da4:	2101      	movs	r1, #1
 8003da6:	fa01 f202 	lsl.w	r2, r1, r2
 8003daa:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003db4:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d00c      	beq.n	8003dd8 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003dcc:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003dd6:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8003de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3714      	adds	r7, #20
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr

08003df6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003df6:	b580      	push	{r7, lr}
 8003df8:	b084      	sub	sp, #16
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d00d      	beq.n	8003e2a <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2204      	movs	r2, #4
 8003e12:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	73fb      	strb	r3, [r7, #15]
 8003e28:	e047      	b.n	8003eba <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f022 020e 	bic.w	r2, r2, #14
 8003e38:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f022 0201 	bic.w	r2, r2, #1
 8003e48:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e58:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e5e:	f003 021f 	and.w	r2, r3, #31
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e66:	2101      	movs	r1, #1
 8003e68:	fa01 f202 	lsl.w	r2, r1, r2
 8003e6c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003e76:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d00c      	beq.n	8003e9a <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e8e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003e98:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d003      	beq.n	8003eba <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	4798      	blx	r3
    }
  }
  return status;
 8003eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3710      	adds	r7, #16
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ee0:	f003 031f 	and.w	r3, r3, #31
 8003ee4:	2204      	movs	r2, #4
 8003ee6:	409a      	lsls	r2, r3
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	4013      	ands	r3, r2
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d026      	beq.n	8003f3e <HAL_DMA_IRQHandler+0x7a>
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	f003 0304 	and.w	r3, r3, #4
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d021      	beq.n	8003f3e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0320 	and.w	r3, r3, #32
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d107      	bne.n	8003f18 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f022 0204 	bic.w	r2, r2, #4
 8003f16:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f1c:	f003 021f 	and.w	r2, r3, #31
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f24:	2104      	movs	r1, #4
 8003f26:	fa01 f202 	lsl.w	r2, r1, r2
 8003f2a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d071      	beq.n	8004018 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003f3c:	e06c      	b.n	8004018 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f42:	f003 031f 	and.w	r3, r3, #31
 8003f46:	2202      	movs	r2, #2
 8003f48:	409a      	lsls	r2, r3
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d02e      	beq.n	8003fb0 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	f003 0302 	and.w	r3, r3, #2
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d029      	beq.n	8003fb0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0320 	and.w	r3, r3, #32
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d10b      	bne.n	8003f82 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f022 020a 	bic.w	r2, r2, #10
 8003f78:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f86:	f003 021f 	and.w	r2, r3, #31
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8e:	2102      	movs	r1, #2
 8003f90:	fa01 f202 	lsl.w	r2, r1, r2
 8003f94:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d038      	beq.n	8004018 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003fae:	e033      	b.n	8004018 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb4:	f003 031f 	and.w	r3, r3, #31
 8003fb8:	2208      	movs	r2, #8
 8003fba:	409a      	lsls	r2, r3
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d02a      	beq.n	800401a <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	f003 0308 	and.w	r3, r3, #8
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d025      	beq.n	800401a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f022 020e 	bic.w	r2, r2, #14
 8003fdc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fe2:	f003 021f 	and.w	r2, r3, #31
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fea:	2101      	movs	r1, #1
 8003fec:	fa01 f202 	lsl.w	r2, r1, r2
 8003ff0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800400c:	2b00      	cmp	r3, #0
 800400e:	d004      	beq.n	800401a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004018:	bf00      	nop
 800401a:	bf00      	nop
}
 800401c:	3710      	adds	r7, #16
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
	...

08004024 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004024:	b480      	push	{r7}
 8004026:	b087      	sub	sp, #28
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	461a      	mov	r2, r3
 8004032:	4b16      	ldr	r3, [pc, #88]	; (800408c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004034:	429a      	cmp	r2, r3
 8004036:	d802      	bhi.n	800403e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004038:	4b15      	ldr	r3, [pc, #84]	; (8004090 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800403a:	617b      	str	r3, [r7, #20]
 800403c:	e001      	b.n	8004042 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800403e:	4b15      	ldr	r3, [pc, #84]	; (8004094 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004040:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	b2db      	uxtb	r3, r3
 800404c:	3b08      	subs	r3, #8
 800404e:	4a12      	ldr	r2, [pc, #72]	; (8004098 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004050:	fba2 2303 	umull	r2, r3, r2, r3
 8004054:	091b      	lsrs	r3, r3, #4
 8004056:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800405c:	089b      	lsrs	r3, r3, #2
 800405e:	009a      	lsls	r2, r3, #2
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	4413      	add	r3, r2
 8004064:	461a      	mov	r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a0b      	ldr	r2, [pc, #44]	; (800409c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800406e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f003 031f 	and.w	r3, r3, #31
 8004076:	2201      	movs	r2, #1
 8004078:	409a      	lsls	r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800407e:	bf00      	nop
 8004080:	371c      	adds	r7, #28
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	40020407 	.word	0x40020407
 8004090:	40020800 	.word	0x40020800
 8004094:	40020820 	.word	0x40020820
 8004098:	cccccccd 	.word	0xcccccccd
 800409c:	40020880 	.word	0x40020880

080040a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b085      	sub	sp, #20
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80040b0:	68fa      	ldr	r2, [r7, #12]
 80040b2:	4b0b      	ldr	r3, [pc, #44]	; (80040e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80040b4:	4413      	add	r3, r2
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	461a      	mov	r2, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a08      	ldr	r2, [pc, #32]	; (80040e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80040c2:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	3b01      	subs	r3, #1
 80040c8:	f003 031f 	and.w	r3, r3, #31
 80040cc:	2201      	movs	r2, #1
 80040ce:	409a      	lsls	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80040d4:	bf00      	nop
 80040d6:	3714      	adds	r7, #20
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr
 80040e0:	1000823f 	.word	0x1000823f
 80040e4:	40020940 	.word	0x40020940

080040e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b087      	sub	sp, #28
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80040f2:	2300      	movs	r3, #0
 80040f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80040f6:	e15a      	b.n	80043ae <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	2101      	movs	r1, #1
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	fa01 f303 	lsl.w	r3, r1, r3
 8004104:	4013      	ands	r3, r2
 8004106:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2b00      	cmp	r3, #0
 800410c:	f000 814c 	beq.w	80043a8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f003 0303 	and.w	r3, r3, #3
 8004118:	2b01      	cmp	r3, #1
 800411a:	d005      	beq.n	8004128 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004124:	2b02      	cmp	r3, #2
 8004126:	d130      	bne.n	800418a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	005b      	lsls	r3, r3, #1
 8004132:	2203      	movs	r2, #3
 8004134:	fa02 f303 	lsl.w	r3, r2, r3
 8004138:	43db      	mvns	r3, r3
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	4013      	ands	r3, r2
 800413e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	68da      	ldr	r2, [r3, #12]
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	005b      	lsls	r3, r3, #1
 8004148:	fa02 f303 	lsl.w	r3, r2, r3
 800414c:	693a      	ldr	r2, [r7, #16]
 800414e:	4313      	orrs	r3, r2
 8004150:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	693a      	ldr	r2, [r7, #16]
 8004156:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800415e:	2201      	movs	r2, #1
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	fa02 f303 	lsl.w	r3, r2, r3
 8004166:	43db      	mvns	r3, r3
 8004168:	693a      	ldr	r2, [r7, #16]
 800416a:	4013      	ands	r3, r2
 800416c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	091b      	lsrs	r3, r3, #4
 8004174:	f003 0201 	and.w	r2, r3, #1
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	fa02 f303 	lsl.w	r3, r2, r3
 800417e:	693a      	ldr	r2, [r7, #16]
 8004180:	4313      	orrs	r3, r2
 8004182:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	693a      	ldr	r2, [r7, #16]
 8004188:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f003 0303 	and.w	r3, r3, #3
 8004192:	2b03      	cmp	r3, #3
 8004194:	d017      	beq.n	80041c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	005b      	lsls	r3, r3, #1
 80041a0:	2203      	movs	r2, #3
 80041a2:	fa02 f303 	lsl.w	r3, r2, r3
 80041a6:	43db      	mvns	r3, r3
 80041a8:	693a      	ldr	r2, [r7, #16]
 80041aa:	4013      	ands	r3, r2
 80041ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	689a      	ldr	r2, [r3, #8]
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	005b      	lsls	r3, r3, #1
 80041b6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ba:	693a      	ldr	r2, [r7, #16]
 80041bc:	4313      	orrs	r3, r2
 80041be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	693a      	ldr	r2, [r7, #16]
 80041c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	f003 0303 	and.w	r3, r3, #3
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d123      	bne.n	800421a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	08da      	lsrs	r2, r3, #3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	3208      	adds	r2, #8
 80041da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	f003 0307 	and.w	r3, r3, #7
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	220f      	movs	r2, #15
 80041ea:	fa02 f303 	lsl.w	r3, r2, r3
 80041ee:	43db      	mvns	r3, r3
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	4013      	ands	r3, r2
 80041f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	691a      	ldr	r2, [r3, #16]
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	f003 0307 	and.w	r3, r3, #7
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	fa02 f303 	lsl.w	r3, r2, r3
 8004206:	693a      	ldr	r2, [r7, #16]
 8004208:	4313      	orrs	r3, r2
 800420a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	08da      	lsrs	r2, r3, #3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	3208      	adds	r2, #8
 8004214:	6939      	ldr	r1, [r7, #16]
 8004216:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	005b      	lsls	r3, r3, #1
 8004224:	2203      	movs	r2, #3
 8004226:	fa02 f303 	lsl.w	r3, r2, r3
 800422a:	43db      	mvns	r3, r3
 800422c:	693a      	ldr	r2, [r7, #16]
 800422e:	4013      	ands	r3, r2
 8004230:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	f003 0203 	and.w	r2, r3, #3
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	005b      	lsls	r3, r3, #1
 800423e:	fa02 f303 	lsl.w	r3, r2, r3
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	4313      	orrs	r3, r2
 8004246:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004256:	2b00      	cmp	r3, #0
 8004258:	f000 80a6 	beq.w	80043a8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800425c:	4b5b      	ldr	r3, [pc, #364]	; (80043cc <HAL_GPIO_Init+0x2e4>)
 800425e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004260:	4a5a      	ldr	r2, [pc, #360]	; (80043cc <HAL_GPIO_Init+0x2e4>)
 8004262:	f043 0301 	orr.w	r3, r3, #1
 8004266:	6613      	str	r3, [r2, #96]	; 0x60
 8004268:	4b58      	ldr	r3, [pc, #352]	; (80043cc <HAL_GPIO_Init+0x2e4>)
 800426a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800426c:	f003 0301 	and.w	r3, r3, #1
 8004270:	60bb      	str	r3, [r7, #8]
 8004272:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004274:	4a56      	ldr	r2, [pc, #344]	; (80043d0 <HAL_GPIO_Init+0x2e8>)
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	089b      	lsrs	r3, r3, #2
 800427a:	3302      	adds	r3, #2
 800427c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004280:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	f003 0303 	and.w	r3, r3, #3
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	220f      	movs	r2, #15
 800428c:	fa02 f303 	lsl.w	r3, r2, r3
 8004290:	43db      	mvns	r3, r3
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	4013      	ands	r3, r2
 8004296:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800429e:	d01f      	beq.n	80042e0 <HAL_GPIO_Init+0x1f8>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a4c      	ldr	r2, [pc, #304]	; (80043d4 <HAL_GPIO_Init+0x2ec>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d019      	beq.n	80042dc <HAL_GPIO_Init+0x1f4>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a4b      	ldr	r2, [pc, #300]	; (80043d8 <HAL_GPIO_Init+0x2f0>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d013      	beq.n	80042d8 <HAL_GPIO_Init+0x1f0>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4a4a      	ldr	r2, [pc, #296]	; (80043dc <HAL_GPIO_Init+0x2f4>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d00d      	beq.n	80042d4 <HAL_GPIO_Init+0x1ec>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	4a49      	ldr	r2, [pc, #292]	; (80043e0 <HAL_GPIO_Init+0x2f8>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d007      	beq.n	80042d0 <HAL_GPIO_Init+0x1e8>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a48      	ldr	r2, [pc, #288]	; (80043e4 <HAL_GPIO_Init+0x2fc>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d101      	bne.n	80042cc <HAL_GPIO_Init+0x1e4>
 80042c8:	2305      	movs	r3, #5
 80042ca:	e00a      	b.n	80042e2 <HAL_GPIO_Init+0x1fa>
 80042cc:	2306      	movs	r3, #6
 80042ce:	e008      	b.n	80042e2 <HAL_GPIO_Init+0x1fa>
 80042d0:	2304      	movs	r3, #4
 80042d2:	e006      	b.n	80042e2 <HAL_GPIO_Init+0x1fa>
 80042d4:	2303      	movs	r3, #3
 80042d6:	e004      	b.n	80042e2 <HAL_GPIO_Init+0x1fa>
 80042d8:	2302      	movs	r3, #2
 80042da:	e002      	b.n	80042e2 <HAL_GPIO_Init+0x1fa>
 80042dc:	2301      	movs	r3, #1
 80042de:	e000      	b.n	80042e2 <HAL_GPIO_Init+0x1fa>
 80042e0:	2300      	movs	r3, #0
 80042e2:	697a      	ldr	r2, [r7, #20]
 80042e4:	f002 0203 	and.w	r2, r2, #3
 80042e8:	0092      	lsls	r2, r2, #2
 80042ea:	4093      	lsls	r3, r2
 80042ec:	693a      	ldr	r2, [r7, #16]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80042f2:	4937      	ldr	r1, [pc, #220]	; (80043d0 <HAL_GPIO_Init+0x2e8>)
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	089b      	lsrs	r3, r3, #2
 80042f8:	3302      	adds	r3, #2
 80042fa:	693a      	ldr	r2, [r7, #16]
 80042fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004300:	4b39      	ldr	r3, [pc, #228]	; (80043e8 <HAL_GPIO_Init+0x300>)
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	43db      	mvns	r3, r3
 800430a:	693a      	ldr	r2, [r7, #16]
 800430c:	4013      	ands	r3, r2
 800430e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d003      	beq.n	8004324 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800431c:	693a      	ldr	r2, [r7, #16]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	4313      	orrs	r3, r2
 8004322:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004324:	4a30      	ldr	r2, [pc, #192]	; (80043e8 <HAL_GPIO_Init+0x300>)
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800432a:	4b2f      	ldr	r3, [pc, #188]	; (80043e8 <HAL_GPIO_Init+0x300>)
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	43db      	mvns	r3, r3
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	4013      	ands	r3, r2
 8004338:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d003      	beq.n	800434e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004346:	693a      	ldr	r2, [r7, #16]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	4313      	orrs	r3, r2
 800434c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800434e:	4a26      	ldr	r2, [pc, #152]	; (80043e8 <HAL_GPIO_Init+0x300>)
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004354:	4b24      	ldr	r3, [pc, #144]	; (80043e8 <HAL_GPIO_Init+0x300>)
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	43db      	mvns	r3, r3
 800435e:	693a      	ldr	r2, [r7, #16]
 8004360:	4013      	ands	r3, r2
 8004362:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d003      	beq.n	8004378 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004370:	693a      	ldr	r2, [r7, #16]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	4313      	orrs	r3, r2
 8004376:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004378:	4a1b      	ldr	r2, [pc, #108]	; (80043e8 <HAL_GPIO_Init+0x300>)
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800437e:	4b1a      	ldr	r3, [pc, #104]	; (80043e8 <HAL_GPIO_Init+0x300>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	43db      	mvns	r3, r3
 8004388:	693a      	ldr	r2, [r7, #16]
 800438a:	4013      	ands	r3, r2
 800438c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d003      	beq.n	80043a2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800439a:	693a      	ldr	r2, [r7, #16]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	4313      	orrs	r3, r2
 80043a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80043a2:	4a11      	ldr	r2, [pc, #68]	; (80043e8 <HAL_GPIO_Init+0x300>)
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	3301      	adds	r3, #1
 80043ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	fa22 f303 	lsr.w	r3, r2, r3
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	f47f ae9d 	bne.w	80040f8 <HAL_GPIO_Init+0x10>
  }
}
 80043be:	bf00      	nop
 80043c0:	bf00      	nop
 80043c2:	371c      	adds	r7, #28
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr
 80043cc:	40021000 	.word	0x40021000
 80043d0:	40010000 	.word	0x40010000
 80043d4:	48000400 	.word	0x48000400
 80043d8:	48000800 	.word	0x48000800
 80043dc:	48000c00 	.word	0x48000c00
 80043e0:	48001000 	.word	0x48001000
 80043e4:	48001400 	.word	0x48001400
 80043e8:	40010400 	.word	0x40010400

080043ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	460b      	mov	r3, r1
 80043f6:	807b      	strh	r3, [r7, #2]
 80043f8:	4613      	mov	r3, r2
 80043fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80043fc:	787b      	ldrb	r3, [r7, #1]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d003      	beq.n	800440a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004402:	887a      	ldrh	r2, [r7, #2]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004408:	e002      	b.n	8004410 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800440a:	887a      	ldrh	r2, [r7, #2]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800441c:	b480      	push	{r7}
 800441e:	b085      	sub	sp, #20
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d141      	bne.n	80044ae <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800442a:	4b4b      	ldr	r3, [pc, #300]	; (8004558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004432:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004436:	d131      	bne.n	800449c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004438:	4b47      	ldr	r3, [pc, #284]	; (8004558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800443a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800443e:	4a46      	ldr	r2, [pc, #280]	; (8004558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004440:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004444:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004448:	4b43      	ldr	r3, [pc, #268]	; (8004558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004450:	4a41      	ldr	r2, [pc, #260]	; (8004558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004452:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004456:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004458:	4b40      	ldr	r3, [pc, #256]	; (800455c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2232      	movs	r2, #50	; 0x32
 800445e:	fb02 f303 	mul.w	r3, r2, r3
 8004462:	4a3f      	ldr	r2, [pc, #252]	; (8004560 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004464:	fba2 2303 	umull	r2, r3, r2, r3
 8004468:	0c9b      	lsrs	r3, r3, #18
 800446a:	3301      	adds	r3, #1
 800446c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800446e:	e002      	b.n	8004476 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	3b01      	subs	r3, #1
 8004474:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004476:	4b38      	ldr	r3, [pc, #224]	; (8004558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800447e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004482:	d102      	bne.n	800448a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1f2      	bne.n	8004470 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800448a:	4b33      	ldr	r3, [pc, #204]	; (8004558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800448c:	695b      	ldr	r3, [r3, #20]
 800448e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004492:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004496:	d158      	bne.n	800454a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e057      	b.n	800454c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800449c:	4b2e      	ldr	r3, [pc, #184]	; (8004558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800449e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044a2:	4a2d      	ldr	r2, [pc, #180]	; (8004558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80044ac:	e04d      	b.n	800454a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044b4:	d141      	bne.n	800453a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80044b6:	4b28      	ldr	r3, [pc, #160]	; (8004558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80044be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044c2:	d131      	bne.n	8004528 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80044c4:	4b24      	ldr	r3, [pc, #144]	; (8004558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044ca:	4a23      	ldr	r2, [pc, #140]	; (8004558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80044d4:	4b20      	ldr	r3, [pc, #128]	; (8004558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80044dc:	4a1e      	ldr	r2, [pc, #120]	; (8004558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80044e4:	4b1d      	ldr	r3, [pc, #116]	; (800455c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2232      	movs	r2, #50	; 0x32
 80044ea:	fb02 f303 	mul.w	r3, r2, r3
 80044ee:	4a1c      	ldr	r2, [pc, #112]	; (8004560 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80044f0:	fba2 2303 	umull	r2, r3, r2, r3
 80044f4:	0c9b      	lsrs	r3, r3, #18
 80044f6:	3301      	adds	r3, #1
 80044f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80044fa:	e002      	b.n	8004502 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	3b01      	subs	r3, #1
 8004500:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004502:	4b15      	ldr	r3, [pc, #84]	; (8004558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800450a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800450e:	d102      	bne.n	8004516 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d1f2      	bne.n	80044fc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004516:	4b10      	ldr	r3, [pc, #64]	; (8004558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800451e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004522:	d112      	bne.n	800454a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e011      	b.n	800454c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004528:	4b0b      	ldr	r3, [pc, #44]	; (8004558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800452a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800452e:	4a0a      	ldr	r2, [pc, #40]	; (8004558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004530:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004534:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004538:	e007      	b.n	800454a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800453a:	4b07      	ldr	r3, [pc, #28]	; (8004558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004542:	4a05      	ldr	r2, [pc, #20]	; (8004558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004544:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004548:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800454a:	2300      	movs	r3, #0
}
 800454c:	4618      	mov	r0, r3
 800454e:	3714      	adds	r7, #20
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr
 8004558:	40007000 	.word	0x40007000
 800455c:	200001c0 	.word	0x200001c0
 8004560:	431bde83 	.word	0x431bde83

08004564 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b088      	sub	sp, #32
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d101      	bne.n	8004576 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e2fe      	b.n	8004b74 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0301 	and.w	r3, r3, #1
 800457e:	2b00      	cmp	r3, #0
 8004580:	d075      	beq.n	800466e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004582:	4b97      	ldr	r3, [pc, #604]	; (80047e0 <HAL_RCC_OscConfig+0x27c>)
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f003 030c 	and.w	r3, r3, #12
 800458a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800458c:	4b94      	ldr	r3, [pc, #592]	; (80047e0 <HAL_RCC_OscConfig+0x27c>)
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	f003 0303 	and.w	r3, r3, #3
 8004594:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	2b0c      	cmp	r3, #12
 800459a:	d102      	bne.n	80045a2 <HAL_RCC_OscConfig+0x3e>
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	2b03      	cmp	r3, #3
 80045a0:	d002      	beq.n	80045a8 <HAL_RCC_OscConfig+0x44>
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	2b08      	cmp	r3, #8
 80045a6:	d10b      	bne.n	80045c0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045a8:	4b8d      	ldr	r3, [pc, #564]	; (80047e0 <HAL_RCC_OscConfig+0x27c>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d05b      	beq.n	800466c <HAL_RCC_OscConfig+0x108>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d157      	bne.n	800466c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e2d9      	b.n	8004b74 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045c8:	d106      	bne.n	80045d8 <HAL_RCC_OscConfig+0x74>
 80045ca:	4b85      	ldr	r3, [pc, #532]	; (80047e0 <HAL_RCC_OscConfig+0x27c>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a84      	ldr	r2, [pc, #528]	; (80047e0 <HAL_RCC_OscConfig+0x27c>)
 80045d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045d4:	6013      	str	r3, [r2, #0]
 80045d6:	e01d      	b.n	8004614 <HAL_RCC_OscConfig+0xb0>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045e0:	d10c      	bne.n	80045fc <HAL_RCC_OscConfig+0x98>
 80045e2:	4b7f      	ldr	r3, [pc, #508]	; (80047e0 <HAL_RCC_OscConfig+0x27c>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a7e      	ldr	r2, [pc, #504]	; (80047e0 <HAL_RCC_OscConfig+0x27c>)
 80045e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045ec:	6013      	str	r3, [r2, #0]
 80045ee:	4b7c      	ldr	r3, [pc, #496]	; (80047e0 <HAL_RCC_OscConfig+0x27c>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a7b      	ldr	r2, [pc, #492]	; (80047e0 <HAL_RCC_OscConfig+0x27c>)
 80045f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045f8:	6013      	str	r3, [r2, #0]
 80045fa:	e00b      	b.n	8004614 <HAL_RCC_OscConfig+0xb0>
 80045fc:	4b78      	ldr	r3, [pc, #480]	; (80047e0 <HAL_RCC_OscConfig+0x27c>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a77      	ldr	r2, [pc, #476]	; (80047e0 <HAL_RCC_OscConfig+0x27c>)
 8004602:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004606:	6013      	str	r3, [r2, #0]
 8004608:	4b75      	ldr	r3, [pc, #468]	; (80047e0 <HAL_RCC_OscConfig+0x27c>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a74      	ldr	r2, [pc, #464]	; (80047e0 <HAL_RCC_OscConfig+0x27c>)
 800460e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004612:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d013      	beq.n	8004644 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800461c:	f7fe f910 	bl	8002840 <HAL_GetTick>
 8004620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004622:	e008      	b.n	8004636 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004624:	f7fe f90c 	bl	8002840 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	2b64      	cmp	r3, #100	; 0x64
 8004630:	d901      	bls.n	8004636 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e29e      	b.n	8004b74 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004636:	4b6a      	ldr	r3, [pc, #424]	; (80047e0 <HAL_RCC_OscConfig+0x27c>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d0f0      	beq.n	8004624 <HAL_RCC_OscConfig+0xc0>
 8004642:	e014      	b.n	800466e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004644:	f7fe f8fc 	bl	8002840 <HAL_GetTick>
 8004648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800464a:	e008      	b.n	800465e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800464c:	f7fe f8f8 	bl	8002840 <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b64      	cmp	r3, #100	; 0x64
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e28a      	b.n	8004b74 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800465e:	4b60      	ldr	r3, [pc, #384]	; (80047e0 <HAL_RCC_OscConfig+0x27c>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1f0      	bne.n	800464c <HAL_RCC_OscConfig+0xe8>
 800466a:	e000      	b.n	800466e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800466c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0302 	and.w	r3, r3, #2
 8004676:	2b00      	cmp	r3, #0
 8004678:	d075      	beq.n	8004766 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800467a:	4b59      	ldr	r3, [pc, #356]	; (80047e0 <HAL_RCC_OscConfig+0x27c>)
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f003 030c 	and.w	r3, r3, #12
 8004682:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004684:	4b56      	ldr	r3, [pc, #344]	; (80047e0 <HAL_RCC_OscConfig+0x27c>)
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	f003 0303 	and.w	r3, r3, #3
 800468c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	2b0c      	cmp	r3, #12
 8004692:	d102      	bne.n	800469a <HAL_RCC_OscConfig+0x136>
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	2b02      	cmp	r3, #2
 8004698:	d002      	beq.n	80046a0 <HAL_RCC_OscConfig+0x13c>
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	2b04      	cmp	r3, #4
 800469e:	d11f      	bne.n	80046e0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046a0:	4b4f      	ldr	r3, [pc, #316]	; (80047e0 <HAL_RCC_OscConfig+0x27c>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d005      	beq.n	80046b8 <HAL_RCC_OscConfig+0x154>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d101      	bne.n	80046b8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e25d      	b.n	8004b74 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046b8:	4b49      	ldr	r3, [pc, #292]	; (80047e0 <HAL_RCC_OscConfig+0x27c>)
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	061b      	lsls	r3, r3, #24
 80046c6:	4946      	ldr	r1, [pc, #280]	; (80047e0 <HAL_RCC_OscConfig+0x27c>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80046cc:	4b45      	ldr	r3, [pc, #276]	; (80047e4 <HAL_RCC_OscConfig+0x280>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4618      	mov	r0, r3
 80046d2:	f7fe f869 	bl	80027a8 <HAL_InitTick>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d043      	beq.n	8004764 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e249      	b.n	8004b74 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d023      	beq.n	8004730 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046e8:	4b3d      	ldr	r3, [pc, #244]	; (80047e0 <HAL_RCC_OscConfig+0x27c>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a3c      	ldr	r2, [pc, #240]	; (80047e0 <HAL_RCC_OscConfig+0x27c>)
 80046ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046f4:	f7fe f8a4 	bl	8002840 <HAL_GetTick>
 80046f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046fa:	e008      	b.n	800470e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046fc:	f7fe f8a0 	bl	8002840 <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	2b02      	cmp	r3, #2
 8004708:	d901      	bls.n	800470e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e232      	b.n	8004b74 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800470e:	4b34      	ldr	r3, [pc, #208]	; (80047e0 <HAL_RCC_OscConfig+0x27c>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004716:	2b00      	cmp	r3, #0
 8004718:	d0f0      	beq.n	80046fc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800471a:	4b31      	ldr	r3, [pc, #196]	; (80047e0 <HAL_RCC_OscConfig+0x27c>)
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	061b      	lsls	r3, r3, #24
 8004728:	492d      	ldr	r1, [pc, #180]	; (80047e0 <HAL_RCC_OscConfig+0x27c>)
 800472a:	4313      	orrs	r3, r2
 800472c:	604b      	str	r3, [r1, #4]
 800472e:	e01a      	b.n	8004766 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004730:	4b2b      	ldr	r3, [pc, #172]	; (80047e0 <HAL_RCC_OscConfig+0x27c>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a2a      	ldr	r2, [pc, #168]	; (80047e0 <HAL_RCC_OscConfig+0x27c>)
 8004736:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800473a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800473c:	f7fe f880 	bl	8002840 <HAL_GetTick>
 8004740:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004742:	e008      	b.n	8004756 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004744:	f7fe f87c 	bl	8002840 <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	2b02      	cmp	r3, #2
 8004750:	d901      	bls.n	8004756 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e20e      	b.n	8004b74 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004756:	4b22      	ldr	r3, [pc, #136]	; (80047e0 <HAL_RCC_OscConfig+0x27c>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800475e:	2b00      	cmp	r3, #0
 8004760:	d1f0      	bne.n	8004744 <HAL_RCC_OscConfig+0x1e0>
 8004762:	e000      	b.n	8004766 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004764:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0308 	and.w	r3, r3, #8
 800476e:	2b00      	cmp	r3, #0
 8004770:	d041      	beq.n	80047f6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	695b      	ldr	r3, [r3, #20]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d01c      	beq.n	80047b4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800477a:	4b19      	ldr	r3, [pc, #100]	; (80047e0 <HAL_RCC_OscConfig+0x27c>)
 800477c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004780:	4a17      	ldr	r2, [pc, #92]	; (80047e0 <HAL_RCC_OscConfig+0x27c>)
 8004782:	f043 0301 	orr.w	r3, r3, #1
 8004786:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800478a:	f7fe f859 	bl	8002840 <HAL_GetTick>
 800478e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004790:	e008      	b.n	80047a4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004792:	f7fe f855 	bl	8002840 <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	2b02      	cmp	r3, #2
 800479e:	d901      	bls.n	80047a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e1e7      	b.n	8004b74 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80047a4:	4b0e      	ldr	r3, [pc, #56]	; (80047e0 <HAL_RCC_OscConfig+0x27c>)
 80047a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047aa:	f003 0302 	and.w	r3, r3, #2
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d0ef      	beq.n	8004792 <HAL_RCC_OscConfig+0x22e>
 80047b2:	e020      	b.n	80047f6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047b4:	4b0a      	ldr	r3, [pc, #40]	; (80047e0 <HAL_RCC_OscConfig+0x27c>)
 80047b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047ba:	4a09      	ldr	r2, [pc, #36]	; (80047e0 <HAL_RCC_OscConfig+0x27c>)
 80047bc:	f023 0301 	bic.w	r3, r3, #1
 80047c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047c4:	f7fe f83c 	bl	8002840 <HAL_GetTick>
 80047c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047ca:	e00d      	b.n	80047e8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047cc:	f7fe f838 	bl	8002840 <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d906      	bls.n	80047e8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e1ca      	b.n	8004b74 <HAL_RCC_OscConfig+0x610>
 80047de:	bf00      	nop
 80047e0:	40021000 	.word	0x40021000
 80047e4:	200001c4 	.word	0x200001c4
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047e8:	4b8c      	ldr	r3, [pc, #560]	; (8004a1c <HAL_RCC_OscConfig+0x4b8>)
 80047ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047ee:	f003 0302 	and.w	r3, r3, #2
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1ea      	bne.n	80047cc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0304 	and.w	r3, r3, #4
 80047fe:	2b00      	cmp	r3, #0
 8004800:	f000 80a6 	beq.w	8004950 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004804:	2300      	movs	r3, #0
 8004806:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004808:	4b84      	ldr	r3, [pc, #528]	; (8004a1c <HAL_RCC_OscConfig+0x4b8>)
 800480a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800480c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004810:	2b00      	cmp	r3, #0
 8004812:	d101      	bne.n	8004818 <HAL_RCC_OscConfig+0x2b4>
 8004814:	2301      	movs	r3, #1
 8004816:	e000      	b.n	800481a <HAL_RCC_OscConfig+0x2b6>
 8004818:	2300      	movs	r3, #0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00d      	beq.n	800483a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800481e:	4b7f      	ldr	r3, [pc, #508]	; (8004a1c <HAL_RCC_OscConfig+0x4b8>)
 8004820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004822:	4a7e      	ldr	r2, [pc, #504]	; (8004a1c <HAL_RCC_OscConfig+0x4b8>)
 8004824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004828:	6593      	str	r3, [r2, #88]	; 0x58
 800482a:	4b7c      	ldr	r3, [pc, #496]	; (8004a1c <HAL_RCC_OscConfig+0x4b8>)
 800482c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800482e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004832:	60fb      	str	r3, [r7, #12]
 8004834:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004836:	2301      	movs	r3, #1
 8004838:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800483a:	4b79      	ldr	r3, [pc, #484]	; (8004a20 <HAL_RCC_OscConfig+0x4bc>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004842:	2b00      	cmp	r3, #0
 8004844:	d118      	bne.n	8004878 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004846:	4b76      	ldr	r3, [pc, #472]	; (8004a20 <HAL_RCC_OscConfig+0x4bc>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a75      	ldr	r2, [pc, #468]	; (8004a20 <HAL_RCC_OscConfig+0x4bc>)
 800484c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004850:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004852:	f7fd fff5 	bl	8002840 <HAL_GetTick>
 8004856:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004858:	e008      	b.n	800486c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800485a:	f7fd fff1 	bl	8002840 <HAL_GetTick>
 800485e:	4602      	mov	r2, r0
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	2b02      	cmp	r3, #2
 8004866:	d901      	bls.n	800486c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	e183      	b.n	8004b74 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800486c:	4b6c      	ldr	r3, [pc, #432]	; (8004a20 <HAL_RCC_OscConfig+0x4bc>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004874:	2b00      	cmp	r3, #0
 8004876:	d0f0      	beq.n	800485a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d108      	bne.n	8004892 <HAL_RCC_OscConfig+0x32e>
 8004880:	4b66      	ldr	r3, [pc, #408]	; (8004a1c <HAL_RCC_OscConfig+0x4b8>)
 8004882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004886:	4a65      	ldr	r2, [pc, #404]	; (8004a1c <HAL_RCC_OscConfig+0x4b8>)
 8004888:	f043 0301 	orr.w	r3, r3, #1
 800488c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004890:	e024      	b.n	80048dc <HAL_RCC_OscConfig+0x378>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	2b05      	cmp	r3, #5
 8004898:	d110      	bne.n	80048bc <HAL_RCC_OscConfig+0x358>
 800489a:	4b60      	ldr	r3, [pc, #384]	; (8004a1c <HAL_RCC_OscConfig+0x4b8>)
 800489c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048a0:	4a5e      	ldr	r2, [pc, #376]	; (8004a1c <HAL_RCC_OscConfig+0x4b8>)
 80048a2:	f043 0304 	orr.w	r3, r3, #4
 80048a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80048aa:	4b5c      	ldr	r3, [pc, #368]	; (8004a1c <HAL_RCC_OscConfig+0x4b8>)
 80048ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048b0:	4a5a      	ldr	r2, [pc, #360]	; (8004a1c <HAL_RCC_OscConfig+0x4b8>)
 80048b2:	f043 0301 	orr.w	r3, r3, #1
 80048b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80048ba:	e00f      	b.n	80048dc <HAL_RCC_OscConfig+0x378>
 80048bc:	4b57      	ldr	r3, [pc, #348]	; (8004a1c <HAL_RCC_OscConfig+0x4b8>)
 80048be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048c2:	4a56      	ldr	r2, [pc, #344]	; (8004a1c <HAL_RCC_OscConfig+0x4b8>)
 80048c4:	f023 0301 	bic.w	r3, r3, #1
 80048c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80048cc:	4b53      	ldr	r3, [pc, #332]	; (8004a1c <HAL_RCC_OscConfig+0x4b8>)
 80048ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048d2:	4a52      	ldr	r2, [pc, #328]	; (8004a1c <HAL_RCC_OscConfig+0x4b8>)
 80048d4:	f023 0304 	bic.w	r3, r3, #4
 80048d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d016      	beq.n	8004912 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048e4:	f7fd ffac 	bl	8002840 <HAL_GetTick>
 80048e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048ea:	e00a      	b.n	8004902 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048ec:	f7fd ffa8 	bl	8002840 <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d901      	bls.n	8004902 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e138      	b.n	8004b74 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004902:	4b46      	ldr	r3, [pc, #280]	; (8004a1c <HAL_RCC_OscConfig+0x4b8>)
 8004904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004908:	f003 0302 	and.w	r3, r3, #2
 800490c:	2b00      	cmp	r3, #0
 800490e:	d0ed      	beq.n	80048ec <HAL_RCC_OscConfig+0x388>
 8004910:	e015      	b.n	800493e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004912:	f7fd ff95 	bl	8002840 <HAL_GetTick>
 8004916:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004918:	e00a      	b.n	8004930 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800491a:	f7fd ff91 	bl	8002840 <HAL_GetTick>
 800491e:	4602      	mov	r2, r0
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	f241 3288 	movw	r2, #5000	; 0x1388
 8004928:	4293      	cmp	r3, r2
 800492a:	d901      	bls.n	8004930 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	e121      	b.n	8004b74 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004930:	4b3a      	ldr	r3, [pc, #232]	; (8004a1c <HAL_RCC_OscConfig+0x4b8>)
 8004932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004936:	f003 0302 	and.w	r3, r3, #2
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1ed      	bne.n	800491a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800493e:	7ffb      	ldrb	r3, [r7, #31]
 8004940:	2b01      	cmp	r3, #1
 8004942:	d105      	bne.n	8004950 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004944:	4b35      	ldr	r3, [pc, #212]	; (8004a1c <HAL_RCC_OscConfig+0x4b8>)
 8004946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004948:	4a34      	ldr	r2, [pc, #208]	; (8004a1c <HAL_RCC_OscConfig+0x4b8>)
 800494a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800494e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0320 	and.w	r3, r3, #32
 8004958:	2b00      	cmp	r3, #0
 800495a:	d03c      	beq.n	80049d6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	699b      	ldr	r3, [r3, #24]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d01c      	beq.n	800499e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004964:	4b2d      	ldr	r3, [pc, #180]	; (8004a1c <HAL_RCC_OscConfig+0x4b8>)
 8004966:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800496a:	4a2c      	ldr	r2, [pc, #176]	; (8004a1c <HAL_RCC_OscConfig+0x4b8>)
 800496c:	f043 0301 	orr.w	r3, r3, #1
 8004970:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004974:	f7fd ff64 	bl	8002840 <HAL_GetTick>
 8004978:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800497a:	e008      	b.n	800498e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800497c:	f7fd ff60 	bl	8002840 <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	2b02      	cmp	r3, #2
 8004988:	d901      	bls.n	800498e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e0f2      	b.n	8004b74 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800498e:	4b23      	ldr	r3, [pc, #140]	; (8004a1c <HAL_RCC_OscConfig+0x4b8>)
 8004990:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004994:	f003 0302 	and.w	r3, r3, #2
 8004998:	2b00      	cmp	r3, #0
 800499a:	d0ef      	beq.n	800497c <HAL_RCC_OscConfig+0x418>
 800499c:	e01b      	b.n	80049d6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800499e:	4b1f      	ldr	r3, [pc, #124]	; (8004a1c <HAL_RCC_OscConfig+0x4b8>)
 80049a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80049a4:	4a1d      	ldr	r2, [pc, #116]	; (8004a1c <HAL_RCC_OscConfig+0x4b8>)
 80049a6:	f023 0301 	bic.w	r3, r3, #1
 80049aa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049ae:	f7fd ff47 	bl	8002840 <HAL_GetTick>
 80049b2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80049b4:	e008      	b.n	80049c8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049b6:	f7fd ff43 	bl	8002840 <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d901      	bls.n	80049c8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e0d5      	b.n	8004b74 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80049c8:	4b14      	ldr	r3, [pc, #80]	; (8004a1c <HAL_RCC_OscConfig+0x4b8>)
 80049ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80049ce:	f003 0302 	and.w	r3, r3, #2
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d1ef      	bne.n	80049b6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	69db      	ldr	r3, [r3, #28]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	f000 80c9 	beq.w	8004b72 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049e0:	4b0e      	ldr	r3, [pc, #56]	; (8004a1c <HAL_RCC_OscConfig+0x4b8>)
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	f003 030c 	and.w	r3, r3, #12
 80049e8:	2b0c      	cmp	r3, #12
 80049ea:	f000 8083 	beq.w	8004af4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	69db      	ldr	r3, [r3, #28]
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d15e      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049f6:	4b09      	ldr	r3, [pc, #36]	; (8004a1c <HAL_RCC_OscConfig+0x4b8>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a08      	ldr	r2, [pc, #32]	; (8004a1c <HAL_RCC_OscConfig+0x4b8>)
 80049fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a02:	f7fd ff1d 	bl	8002840 <HAL_GetTick>
 8004a06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a08:	e00c      	b.n	8004a24 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a0a:	f7fd ff19 	bl	8002840 <HAL_GetTick>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d905      	bls.n	8004a24 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e0ab      	b.n	8004b74 <HAL_RCC_OscConfig+0x610>
 8004a1c:	40021000 	.word	0x40021000
 8004a20:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a24:	4b55      	ldr	r3, [pc, #340]	; (8004b7c <HAL_RCC_OscConfig+0x618>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d1ec      	bne.n	8004a0a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a30:	4b52      	ldr	r3, [pc, #328]	; (8004b7c <HAL_RCC_OscConfig+0x618>)
 8004a32:	68da      	ldr	r2, [r3, #12]
 8004a34:	4b52      	ldr	r3, [pc, #328]	; (8004b80 <HAL_RCC_OscConfig+0x61c>)
 8004a36:	4013      	ands	r3, r2
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	6a11      	ldr	r1, [r2, #32]
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a40:	3a01      	subs	r2, #1
 8004a42:	0112      	lsls	r2, r2, #4
 8004a44:	4311      	orrs	r1, r2
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004a4a:	0212      	lsls	r2, r2, #8
 8004a4c:	4311      	orrs	r1, r2
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004a52:	0852      	lsrs	r2, r2, #1
 8004a54:	3a01      	subs	r2, #1
 8004a56:	0552      	lsls	r2, r2, #21
 8004a58:	4311      	orrs	r1, r2
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a5e:	0852      	lsrs	r2, r2, #1
 8004a60:	3a01      	subs	r2, #1
 8004a62:	0652      	lsls	r2, r2, #25
 8004a64:	4311      	orrs	r1, r2
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004a6a:	06d2      	lsls	r2, r2, #27
 8004a6c:	430a      	orrs	r2, r1
 8004a6e:	4943      	ldr	r1, [pc, #268]	; (8004b7c <HAL_RCC_OscConfig+0x618>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a74:	4b41      	ldr	r3, [pc, #260]	; (8004b7c <HAL_RCC_OscConfig+0x618>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a40      	ldr	r2, [pc, #256]	; (8004b7c <HAL_RCC_OscConfig+0x618>)
 8004a7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a7e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a80:	4b3e      	ldr	r3, [pc, #248]	; (8004b7c <HAL_RCC_OscConfig+0x618>)
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	4a3d      	ldr	r2, [pc, #244]	; (8004b7c <HAL_RCC_OscConfig+0x618>)
 8004a86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a8a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a8c:	f7fd fed8 	bl	8002840 <HAL_GetTick>
 8004a90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a92:	e008      	b.n	8004aa6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a94:	f7fd fed4 	bl	8002840 <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d901      	bls.n	8004aa6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e066      	b.n	8004b74 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004aa6:	4b35      	ldr	r3, [pc, #212]	; (8004b7c <HAL_RCC_OscConfig+0x618>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d0f0      	beq.n	8004a94 <HAL_RCC_OscConfig+0x530>
 8004ab2:	e05e      	b.n	8004b72 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ab4:	4b31      	ldr	r3, [pc, #196]	; (8004b7c <HAL_RCC_OscConfig+0x618>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a30      	ldr	r2, [pc, #192]	; (8004b7c <HAL_RCC_OscConfig+0x618>)
 8004aba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004abe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ac0:	f7fd febe 	bl	8002840 <HAL_GetTick>
 8004ac4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ac6:	e008      	b.n	8004ada <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ac8:	f7fd feba 	bl	8002840 <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d901      	bls.n	8004ada <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e04c      	b.n	8004b74 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ada:	4b28      	ldr	r3, [pc, #160]	; (8004b7c <HAL_RCC_OscConfig+0x618>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d1f0      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004ae6:	4b25      	ldr	r3, [pc, #148]	; (8004b7c <HAL_RCC_OscConfig+0x618>)
 8004ae8:	68da      	ldr	r2, [r3, #12]
 8004aea:	4924      	ldr	r1, [pc, #144]	; (8004b7c <HAL_RCC_OscConfig+0x618>)
 8004aec:	4b25      	ldr	r3, [pc, #148]	; (8004b84 <HAL_RCC_OscConfig+0x620>)
 8004aee:	4013      	ands	r3, r2
 8004af0:	60cb      	str	r3, [r1, #12]
 8004af2:	e03e      	b.n	8004b72 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	69db      	ldr	r3, [r3, #28]
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d101      	bne.n	8004b00 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e039      	b.n	8004b74 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004b00:	4b1e      	ldr	r3, [pc, #120]	; (8004b7c <HAL_RCC_OscConfig+0x618>)
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	f003 0203 	and.w	r2, r3, #3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a1b      	ldr	r3, [r3, #32]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d12c      	bne.n	8004b6e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d123      	bne.n	8004b6e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b30:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d11b      	bne.n	8004b6e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b40:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d113      	bne.n	8004b6e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b50:	085b      	lsrs	r3, r3, #1
 8004b52:	3b01      	subs	r3, #1
 8004b54:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d109      	bne.n	8004b6e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b64:	085b      	lsrs	r3, r3, #1
 8004b66:	3b01      	subs	r3, #1
 8004b68:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d001      	beq.n	8004b72 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e000      	b.n	8004b74 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3720      	adds	r7, #32
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	40021000 	.word	0x40021000
 8004b80:	019f800c 	.word	0x019f800c
 8004b84:	feeefffc 	.word	0xfeeefffc

08004b88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b086      	sub	sp, #24
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004b92:	2300      	movs	r3, #0
 8004b94:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d101      	bne.n	8004ba0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e11e      	b.n	8004dde <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ba0:	4b91      	ldr	r3, [pc, #580]	; (8004de8 <HAL_RCC_ClockConfig+0x260>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 030f 	and.w	r3, r3, #15
 8004ba8:	683a      	ldr	r2, [r7, #0]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d910      	bls.n	8004bd0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bae:	4b8e      	ldr	r3, [pc, #568]	; (8004de8 <HAL_RCC_ClockConfig+0x260>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f023 020f 	bic.w	r2, r3, #15
 8004bb6:	498c      	ldr	r1, [pc, #560]	; (8004de8 <HAL_RCC_ClockConfig+0x260>)
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bbe:	4b8a      	ldr	r3, [pc, #552]	; (8004de8 <HAL_RCC_ClockConfig+0x260>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 030f 	and.w	r3, r3, #15
 8004bc6:	683a      	ldr	r2, [r7, #0]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d001      	beq.n	8004bd0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e106      	b.n	8004dde <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0301 	and.w	r3, r3, #1
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d073      	beq.n	8004cc4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	2b03      	cmp	r3, #3
 8004be2:	d129      	bne.n	8004c38 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004be4:	4b81      	ldr	r3, [pc, #516]	; (8004dec <HAL_RCC_ClockConfig+0x264>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d101      	bne.n	8004bf4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e0f4      	b.n	8004dde <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004bf4:	f000 f99e 	bl	8004f34 <RCC_GetSysClockFreqFromPLLSource>
 8004bf8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	4a7c      	ldr	r2, [pc, #496]	; (8004df0 <HAL_RCC_ClockConfig+0x268>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d93f      	bls.n	8004c82 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004c02:	4b7a      	ldr	r3, [pc, #488]	; (8004dec <HAL_RCC_ClockConfig+0x264>)
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d009      	beq.n	8004c22 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d033      	beq.n	8004c82 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d12f      	bne.n	8004c82 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004c22:	4b72      	ldr	r3, [pc, #456]	; (8004dec <HAL_RCC_ClockConfig+0x264>)
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c2a:	4a70      	ldr	r2, [pc, #448]	; (8004dec <HAL_RCC_ClockConfig+0x264>)
 8004c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c30:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004c32:	2380      	movs	r3, #128	; 0x80
 8004c34:	617b      	str	r3, [r7, #20]
 8004c36:	e024      	b.n	8004c82 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d107      	bne.n	8004c50 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c40:	4b6a      	ldr	r3, [pc, #424]	; (8004dec <HAL_RCC_ClockConfig+0x264>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d109      	bne.n	8004c60 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e0c6      	b.n	8004dde <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c50:	4b66      	ldr	r3, [pc, #408]	; (8004dec <HAL_RCC_ClockConfig+0x264>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d101      	bne.n	8004c60 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e0be      	b.n	8004dde <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004c60:	f000 f8ce 	bl	8004e00 <HAL_RCC_GetSysClockFreq>
 8004c64:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	4a61      	ldr	r2, [pc, #388]	; (8004df0 <HAL_RCC_ClockConfig+0x268>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d909      	bls.n	8004c82 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004c6e:	4b5f      	ldr	r3, [pc, #380]	; (8004dec <HAL_RCC_ClockConfig+0x264>)
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c76:	4a5d      	ldr	r2, [pc, #372]	; (8004dec <HAL_RCC_ClockConfig+0x264>)
 8004c78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c7c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004c7e:	2380      	movs	r3, #128	; 0x80
 8004c80:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c82:	4b5a      	ldr	r3, [pc, #360]	; (8004dec <HAL_RCC_ClockConfig+0x264>)
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	f023 0203 	bic.w	r2, r3, #3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	4957      	ldr	r1, [pc, #348]	; (8004dec <HAL_RCC_ClockConfig+0x264>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c94:	f7fd fdd4 	bl	8002840 <HAL_GetTick>
 8004c98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c9a:	e00a      	b.n	8004cb2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c9c:	f7fd fdd0 	bl	8002840 <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d901      	bls.n	8004cb2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e095      	b.n	8004dde <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cb2:	4b4e      	ldr	r3, [pc, #312]	; (8004dec <HAL_RCC_ClockConfig+0x264>)
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	f003 020c 	and.w	r2, r3, #12
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d1eb      	bne.n	8004c9c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 0302 	and.w	r3, r3, #2
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d023      	beq.n	8004d18 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0304 	and.w	r3, r3, #4
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d005      	beq.n	8004ce8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004cdc:	4b43      	ldr	r3, [pc, #268]	; (8004dec <HAL_RCC_ClockConfig+0x264>)
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	4a42      	ldr	r2, [pc, #264]	; (8004dec <HAL_RCC_ClockConfig+0x264>)
 8004ce2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004ce6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0308 	and.w	r3, r3, #8
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d007      	beq.n	8004d04 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004cf4:	4b3d      	ldr	r3, [pc, #244]	; (8004dec <HAL_RCC_ClockConfig+0x264>)
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004cfc:	4a3b      	ldr	r2, [pc, #236]	; (8004dec <HAL_RCC_ClockConfig+0x264>)
 8004cfe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004d02:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d04:	4b39      	ldr	r3, [pc, #228]	; (8004dec <HAL_RCC_ClockConfig+0x264>)
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	4936      	ldr	r1, [pc, #216]	; (8004dec <HAL_RCC_ClockConfig+0x264>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	608b      	str	r3, [r1, #8]
 8004d16:	e008      	b.n	8004d2a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	2b80      	cmp	r3, #128	; 0x80
 8004d1c:	d105      	bne.n	8004d2a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004d1e:	4b33      	ldr	r3, [pc, #204]	; (8004dec <HAL_RCC_ClockConfig+0x264>)
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	4a32      	ldr	r2, [pc, #200]	; (8004dec <HAL_RCC_ClockConfig+0x264>)
 8004d24:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d28:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d2a:	4b2f      	ldr	r3, [pc, #188]	; (8004de8 <HAL_RCC_ClockConfig+0x260>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 030f 	and.w	r3, r3, #15
 8004d32:	683a      	ldr	r2, [r7, #0]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d21d      	bcs.n	8004d74 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d38:	4b2b      	ldr	r3, [pc, #172]	; (8004de8 <HAL_RCC_ClockConfig+0x260>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f023 020f 	bic.w	r2, r3, #15
 8004d40:	4929      	ldr	r1, [pc, #164]	; (8004de8 <HAL_RCC_ClockConfig+0x260>)
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004d48:	f7fd fd7a 	bl	8002840 <HAL_GetTick>
 8004d4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d4e:	e00a      	b.n	8004d66 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d50:	f7fd fd76 	bl	8002840 <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d901      	bls.n	8004d66 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e03b      	b.n	8004dde <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d66:	4b20      	ldr	r3, [pc, #128]	; (8004de8 <HAL_RCC_ClockConfig+0x260>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 030f 	and.w	r3, r3, #15
 8004d6e:	683a      	ldr	r2, [r7, #0]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d1ed      	bne.n	8004d50 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0304 	and.w	r3, r3, #4
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d008      	beq.n	8004d92 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d80:	4b1a      	ldr	r3, [pc, #104]	; (8004dec <HAL_RCC_ClockConfig+0x264>)
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	4917      	ldr	r1, [pc, #92]	; (8004dec <HAL_RCC_ClockConfig+0x264>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0308 	and.w	r3, r3, #8
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d009      	beq.n	8004db2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d9e:	4b13      	ldr	r3, [pc, #76]	; (8004dec <HAL_RCC_ClockConfig+0x264>)
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	00db      	lsls	r3, r3, #3
 8004dac:	490f      	ldr	r1, [pc, #60]	; (8004dec <HAL_RCC_ClockConfig+0x264>)
 8004dae:	4313      	orrs	r3, r2
 8004db0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004db2:	f000 f825 	bl	8004e00 <HAL_RCC_GetSysClockFreq>
 8004db6:	4602      	mov	r2, r0
 8004db8:	4b0c      	ldr	r3, [pc, #48]	; (8004dec <HAL_RCC_ClockConfig+0x264>)
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	091b      	lsrs	r3, r3, #4
 8004dbe:	f003 030f 	and.w	r3, r3, #15
 8004dc2:	490c      	ldr	r1, [pc, #48]	; (8004df4 <HAL_RCC_ClockConfig+0x26c>)
 8004dc4:	5ccb      	ldrb	r3, [r1, r3]
 8004dc6:	f003 031f 	and.w	r3, r3, #31
 8004dca:	fa22 f303 	lsr.w	r3, r2, r3
 8004dce:	4a0a      	ldr	r2, [pc, #40]	; (8004df8 <HAL_RCC_ClockConfig+0x270>)
 8004dd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004dd2:	4b0a      	ldr	r3, [pc, #40]	; (8004dfc <HAL_RCC_ClockConfig+0x274>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7fd fce6 	bl	80027a8 <HAL_InitTick>
 8004ddc:	4603      	mov	r3, r0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3718      	adds	r7, #24
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	40022000 	.word	0x40022000
 8004dec:	40021000 	.word	0x40021000
 8004df0:	04c4b400 	.word	0x04c4b400
 8004df4:	08007f54 	.word	0x08007f54
 8004df8:	200001c0 	.word	0x200001c0
 8004dfc:	200001c4 	.word	0x200001c4

08004e00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b087      	sub	sp, #28
 8004e04:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004e06:	4b2c      	ldr	r3, [pc, #176]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	f003 030c 	and.w	r3, r3, #12
 8004e0e:	2b04      	cmp	r3, #4
 8004e10:	d102      	bne.n	8004e18 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004e12:	4b2a      	ldr	r3, [pc, #168]	; (8004ebc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004e14:	613b      	str	r3, [r7, #16]
 8004e16:	e047      	b.n	8004ea8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004e18:	4b27      	ldr	r3, [pc, #156]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	f003 030c 	and.w	r3, r3, #12
 8004e20:	2b08      	cmp	r3, #8
 8004e22:	d102      	bne.n	8004e2a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004e24:	4b26      	ldr	r3, [pc, #152]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004e26:	613b      	str	r3, [r7, #16]
 8004e28:	e03e      	b.n	8004ea8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004e2a:	4b23      	ldr	r3, [pc, #140]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	f003 030c 	and.w	r3, r3, #12
 8004e32:	2b0c      	cmp	r3, #12
 8004e34:	d136      	bne.n	8004ea4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e36:	4b20      	ldr	r3, [pc, #128]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	f003 0303 	and.w	r3, r3, #3
 8004e3e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e40:	4b1d      	ldr	r3, [pc, #116]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	091b      	lsrs	r3, r3, #4
 8004e46:	f003 030f 	and.w	r3, r3, #15
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2b03      	cmp	r3, #3
 8004e52:	d10c      	bne.n	8004e6e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e54:	4a1a      	ldr	r2, [pc, #104]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e5c:	4a16      	ldr	r2, [pc, #88]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e5e:	68d2      	ldr	r2, [r2, #12]
 8004e60:	0a12      	lsrs	r2, r2, #8
 8004e62:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004e66:	fb02 f303 	mul.w	r3, r2, r3
 8004e6a:	617b      	str	r3, [r7, #20]
      break;
 8004e6c:	e00c      	b.n	8004e88 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e6e:	4a13      	ldr	r2, [pc, #76]	; (8004ebc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e76:	4a10      	ldr	r2, [pc, #64]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e78:	68d2      	ldr	r2, [r2, #12]
 8004e7a:	0a12      	lsrs	r2, r2, #8
 8004e7c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004e80:	fb02 f303 	mul.w	r3, r2, r3
 8004e84:	617b      	str	r3, [r7, #20]
      break;
 8004e86:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e88:	4b0b      	ldr	r3, [pc, #44]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	0e5b      	lsrs	r3, r3, #25
 8004e8e:	f003 0303 	and.w	r3, r3, #3
 8004e92:	3301      	adds	r3, #1
 8004e94:	005b      	lsls	r3, r3, #1
 8004e96:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004e98:	697a      	ldr	r2, [r7, #20]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea0:	613b      	str	r3, [r7, #16]
 8004ea2:	e001      	b.n	8004ea8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004ea8:	693b      	ldr	r3, [r7, #16]
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	371c      	adds	r7, #28
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	40021000 	.word	0x40021000
 8004ebc:	00f42400 	.word	0x00f42400
 8004ec0:	007a1200 	.word	0x007a1200

08004ec4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ec8:	4b03      	ldr	r3, [pc, #12]	; (8004ed8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004eca:	681b      	ldr	r3, [r3, #0]
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	200001c0 	.word	0x200001c0

08004edc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004ee0:	f7ff fff0 	bl	8004ec4 <HAL_RCC_GetHCLKFreq>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	4b06      	ldr	r3, [pc, #24]	; (8004f00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	0a1b      	lsrs	r3, r3, #8
 8004eec:	f003 0307 	and.w	r3, r3, #7
 8004ef0:	4904      	ldr	r1, [pc, #16]	; (8004f04 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ef2:	5ccb      	ldrb	r3, [r1, r3]
 8004ef4:	f003 031f 	and.w	r3, r3, #31
 8004ef8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	40021000 	.word	0x40021000
 8004f04:	08007f64 	.word	0x08007f64

08004f08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004f0c:	f7ff ffda 	bl	8004ec4 <HAL_RCC_GetHCLKFreq>
 8004f10:	4602      	mov	r2, r0
 8004f12:	4b06      	ldr	r3, [pc, #24]	; (8004f2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	0adb      	lsrs	r3, r3, #11
 8004f18:	f003 0307 	and.w	r3, r3, #7
 8004f1c:	4904      	ldr	r1, [pc, #16]	; (8004f30 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004f1e:	5ccb      	ldrb	r3, [r1, r3]
 8004f20:	f003 031f 	and.w	r3, r3, #31
 8004f24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	40021000 	.word	0x40021000
 8004f30:	08007f64 	.word	0x08007f64

08004f34 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b087      	sub	sp, #28
 8004f38:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004f3a:	4b1e      	ldr	r3, [pc, #120]	; (8004fb4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	f003 0303 	and.w	r3, r3, #3
 8004f42:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f44:	4b1b      	ldr	r3, [pc, #108]	; (8004fb4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	091b      	lsrs	r3, r3, #4
 8004f4a:	f003 030f 	and.w	r3, r3, #15
 8004f4e:	3301      	adds	r3, #1
 8004f50:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	2b03      	cmp	r3, #3
 8004f56:	d10c      	bne.n	8004f72 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f58:	4a17      	ldr	r2, [pc, #92]	; (8004fb8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f60:	4a14      	ldr	r2, [pc, #80]	; (8004fb4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004f62:	68d2      	ldr	r2, [r2, #12]
 8004f64:	0a12      	lsrs	r2, r2, #8
 8004f66:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004f6a:	fb02 f303 	mul.w	r3, r2, r3
 8004f6e:	617b      	str	r3, [r7, #20]
    break;
 8004f70:	e00c      	b.n	8004f8c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f72:	4a12      	ldr	r2, [pc, #72]	; (8004fbc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f7a:	4a0e      	ldr	r2, [pc, #56]	; (8004fb4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004f7c:	68d2      	ldr	r2, [r2, #12]
 8004f7e:	0a12      	lsrs	r2, r2, #8
 8004f80:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004f84:	fb02 f303 	mul.w	r3, r2, r3
 8004f88:	617b      	str	r3, [r7, #20]
    break;
 8004f8a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f8c:	4b09      	ldr	r3, [pc, #36]	; (8004fb4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	0e5b      	lsrs	r3, r3, #25
 8004f92:	f003 0303 	and.w	r3, r3, #3
 8004f96:	3301      	adds	r3, #1
 8004f98:	005b      	lsls	r3, r3, #1
 8004f9a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004f9c:	697a      	ldr	r2, [r7, #20]
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fa4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004fa6:	687b      	ldr	r3, [r7, #4]
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	371c      	adds	r7, #28
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr
 8004fb4:	40021000 	.word	0x40021000
 8004fb8:	007a1200 	.word	0x007a1200
 8004fbc:	00f42400 	.word	0x00f42400

08004fc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b086      	sub	sp, #24
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004fc8:	2300      	movs	r3, #0
 8004fca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004fcc:	2300      	movs	r3, #0
 8004fce:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	f000 8098 	beq.w	800510e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fe2:	4b43      	ldr	r3, [pc, #268]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d10d      	bne.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fee:	4b40      	ldr	r3, [pc, #256]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ff2:	4a3f      	ldr	r2, [pc, #252]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ff4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ff8:	6593      	str	r3, [r2, #88]	; 0x58
 8004ffa:	4b3d      	ldr	r3, [pc, #244]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005002:	60bb      	str	r3, [r7, #8]
 8005004:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005006:	2301      	movs	r3, #1
 8005008:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800500a:	4b3a      	ldr	r3, [pc, #232]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a39      	ldr	r2, [pc, #228]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005010:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005014:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005016:	f7fd fc13 	bl	8002840 <HAL_GetTick>
 800501a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800501c:	e009      	b.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800501e:	f7fd fc0f 	bl	8002840 <HAL_GetTick>
 8005022:	4602      	mov	r2, r0
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	2b02      	cmp	r3, #2
 800502a:	d902      	bls.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800502c:	2303      	movs	r3, #3
 800502e:	74fb      	strb	r3, [r7, #19]
        break;
 8005030:	e005      	b.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005032:	4b30      	ldr	r3, [pc, #192]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800503a:	2b00      	cmp	r3, #0
 800503c:	d0ef      	beq.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800503e:	7cfb      	ldrb	r3, [r7, #19]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d159      	bne.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005044:	4b2a      	ldr	r3, [pc, #168]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800504a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800504e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d01e      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800505a:	697a      	ldr	r2, [r7, #20]
 800505c:	429a      	cmp	r2, r3
 800505e:	d019      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005060:	4b23      	ldr	r3, [pc, #140]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005066:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800506a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800506c:	4b20      	ldr	r3, [pc, #128]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800506e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005072:	4a1f      	ldr	r2, [pc, #124]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005078:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800507c:	4b1c      	ldr	r3, [pc, #112]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800507e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005082:	4a1b      	ldr	r2, [pc, #108]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005084:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005088:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800508c:	4a18      	ldr	r2, [pc, #96]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	f003 0301 	and.w	r3, r3, #1
 800509a:	2b00      	cmp	r3, #0
 800509c:	d016      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800509e:	f7fd fbcf 	bl	8002840 <HAL_GetTick>
 80050a2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050a4:	e00b      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050a6:	f7fd fbcb 	bl	8002840 <HAL_GetTick>
 80050aa:	4602      	mov	r2, r0
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	1ad3      	subs	r3, r2, r3
 80050b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d902      	bls.n	80050be <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	74fb      	strb	r3, [r7, #19]
            break;
 80050bc:	e006      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050be:	4b0c      	ldr	r3, [pc, #48]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050c4:	f003 0302 	and.w	r3, r3, #2
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d0ec      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80050cc:	7cfb      	ldrb	r3, [r7, #19]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d10b      	bne.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050d2:	4b07      	ldr	r3, [pc, #28]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050e0:	4903      	ldr	r1, [pc, #12]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050e2:	4313      	orrs	r3, r2
 80050e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80050e8:	e008      	b.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80050ea:	7cfb      	ldrb	r3, [r7, #19]
 80050ec:	74bb      	strb	r3, [r7, #18]
 80050ee:	e005      	b.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80050f0:	40021000 	.word	0x40021000
 80050f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050f8:	7cfb      	ldrb	r3, [r7, #19]
 80050fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050fc:	7c7b      	ldrb	r3, [r7, #17]
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d105      	bne.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005102:	4ba7      	ldr	r3, [pc, #668]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005106:	4aa6      	ldr	r2, [pc, #664]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005108:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800510c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 0301 	and.w	r3, r3, #1
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00a      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800511a:	4ba1      	ldr	r3, [pc, #644]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800511c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005120:	f023 0203 	bic.w	r2, r3, #3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	499d      	ldr	r1, [pc, #628]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800512a:	4313      	orrs	r3, r2
 800512c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 0302 	and.w	r3, r3, #2
 8005138:	2b00      	cmp	r3, #0
 800513a:	d00a      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800513c:	4b98      	ldr	r3, [pc, #608]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800513e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005142:	f023 020c 	bic.w	r2, r3, #12
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	4995      	ldr	r1, [pc, #596]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800514c:	4313      	orrs	r3, r2
 800514e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0304 	and.w	r3, r3, #4
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00a      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800515e:	4b90      	ldr	r3, [pc, #576]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005160:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005164:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	498c      	ldr	r1, [pc, #560]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800516e:	4313      	orrs	r3, r2
 8005170:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0308 	and.w	r3, r3, #8
 800517c:	2b00      	cmp	r3, #0
 800517e:	d00a      	beq.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005180:	4b87      	ldr	r3, [pc, #540]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005186:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	4984      	ldr	r1, [pc, #528]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005190:	4313      	orrs	r3, r2
 8005192:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0310 	and.w	r3, r3, #16
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d00a      	beq.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80051a2:	4b7f      	ldr	r3, [pc, #508]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	695b      	ldr	r3, [r3, #20]
 80051b0:	497b      	ldr	r1, [pc, #492]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051b2:	4313      	orrs	r3, r2
 80051b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0320 	and.w	r3, r3, #32
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d00a      	beq.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80051c4:	4b76      	ldr	r3, [pc, #472]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	699b      	ldr	r3, [r3, #24]
 80051d2:	4973      	ldr	r1, [pc, #460]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051d4:	4313      	orrs	r3, r2
 80051d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d00a      	beq.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80051e6:	4b6e      	ldr	r3, [pc, #440]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ec:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	69db      	ldr	r3, [r3, #28]
 80051f4:	496a      	ldr	r1, [pc, #424]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051f6:	4313      	orrs	r3, r2
 80051f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005204:	2b00      	cmp	r3, #0
 8005206:	d00a      	beq.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005208:	4b65      	ldr	r3, [pc, #404]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800520a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800520e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a1b      	ldr	r3, [r3, #32]
 8005216:	4962      	ldr	r1, [pc, #392]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005218:	4313      	orrs	r3, r2
 800521a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005226:	2b00      	cmp	r3, #0
 8005228:	d00a      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800522a:	4b5d      	ldr	r3, [pc, #372]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800522c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005230:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005238:	4959      	ldr	r1, [pc, #356]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800523a:	4313      	orrs	r3, r2
 800523c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005248:	2b00      	cmp	r3, #0
 800524a:	d00a      	beq.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800524c:	4b54      	ldr	r3, [pc, #336]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800524e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005252:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800525a:	4951      	ldr	r1, [pc, #324]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800525c:	4313      	orrs	r3, r2
 800525e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800526a:	2b00      	cmp	r3, #0
 800526c:	d015      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800526e:	4b4c      	ldr	r3, [pc, #304]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005270:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005274:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800527c:	4948      	ldr	r1, [pc, #288]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800527e:	4313      	orrs	r3, r2
 8005280:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005288:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800528c:	d105      	bne.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800528e:	4b44      	ldr	r3, [pc, #272]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	4a43      	ldr	r2, [pc, #268]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005294:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005298:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d015      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80052a6:	4b3e      	ldr	r3, [pc, #248]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b4:	493a      	ldr	r1, [pc, #232]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052b6:	4313      	orrs	r3, r2
 80052b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052c4:	d105      	bne.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052c6:	4b36      	ldr	r3, [pc, #216]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	4a35      	ldr	r2, [pc, #212]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052d0:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d015      	beq.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80052de:	4b30      	ldr	r3, [pc, #192]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052e4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052ec:	492c      	ldr	r1, [pc, #176]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052ee:	4313      	orrs	r3, r2
 80052f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80052fc:	d105      	bne.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052fe:	4b28      	ldr	r3, [pc, #160]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	4a27      	ldr	r2, [pc, #156]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005304:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005308:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005312:	2b00      	cmp	r3, #0
 8005314:	d015      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005316:	4b22      	ldr	r3, [pc, #136]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800531c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005324:	491e      	ldr	r1, [pc, #120]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005326:	4313      	orrs	r3, r2
 8005328:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005330:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005334:	d105      	bne.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005336:	4b1a      	ldr	r3, [pc, #104]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	4a19      	ldr	r2, [pc, #100]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800533c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005340:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800534a:	2b00      	cmp	r3, #0
 800534c:	d015      	beq.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800534e:	4b14      	ldr	r3, [pc, #80]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005354:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800535c:	4910      	ldr	r1, [pc, #64]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800535e:	4313      	orrs	r3, r2
 8005360:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005368:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800536c:	d105      	bne.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800536e:	4b0c      	ldr	r3, [pc, #48]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	4a0b      	ldr	r2, [pc, #44]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005374:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005378:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005382:	2b00      	cmp	r3, #0
 8005384:	d018      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005386:	4b06      	ldr	r3, [pc, #24]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800538c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005394:	4902      	ldr	r1, [pc, #8]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005396:	4313      	orrs	r3, r2
 8005398:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	e001      	b.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80053a0:	40021000 	.word	0x40021000
 80053a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053aa:	d105      	bne.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80053ac:	4b21      	ldr	r3, [pc, #132]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	4a20      	ldr	r2, [pc, #128]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80053b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053b6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d015      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80053c4:	4b1b      	ldr	r3, [pc, #108]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80053c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ca:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053d2:	4918      	ldr	r1, [pc, #96]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80053d4:	4313      	orrs	r3, r2
 80053d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053e2:	d105      	bne.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80053e4:	4b13      	ldr	r3, [pc, #76]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	4a12      	ldr	r2, [pc, #72]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80053ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053ee:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d015      	beq.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80053fc:	4b0d      	ldr	r3, [pc, #52]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80053fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005402:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800540a:	490a      	ldr	r1, [pc, #40]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800540c:	4313      	orrs	r3, r2
 800540e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005416:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800541a:	d105      	bne.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800541c:	4b05      	ldr	r3, [pc, #20]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	4a04      	ldr	r2, [pc, #16]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005422:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005426:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005428:	7cbb      	ldrb	r3, [r7, #18]
}
 800542a:	4618      	mov	r0, r3
 800542c:	3718      	adds	r7, #24
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	40021000 	.word	0x40021000

08005438 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b082      	sub	sp, #8
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d101      	bne.n	800544a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e049      	b.n	80054de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005450:	b2db      	uxtb	r3, r3
 8005452:	2b00      	cmp	r3, #0
 8005454:	d106      	bne.n	8005464 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f7fc fed2 	bl	8002208 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2202      	movs	r2, #2
 8005468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	3304      	adds	r3, #4
 8005474:	4619      	mov	r1, r3
 8005476:	4610      	mov	r0, r2
 8005478:	f000 fdca 	bl	8006010 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3708      	adds	r7, #8
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
	...

080054e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b085      	sub	sp, #20
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d001      	beq.n	8005500 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	e04f      	b.n	80055a0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2202      	movs	r2, #2
 8005504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	68da      	ldr	r2, [r3, #12]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f042 0201 	orr.w	r2, r2, #1
 8005516:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a23      	ldr	r2, [pc, #140]	; (80055ac <HAL_TIM_Base_Start_IT+0xc4>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d01d      	beq.n	800555e <HAL_TIM_Base_Start_IT+0x76>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800552a:	d018      	beq.n	800555e <HAL_TIM_Base_Start_IT+0x76>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a1f      	ldr	r2, [pc, #124]	; (80055b0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d013      	beq.n	800555e <HAL_TIM_Base_Start_IT+0x76>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a1e      	ldr	r2, [pc, #120]	; (80055b4 <HAL_TIM_Base_Start_IT+0xcc>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d00e      	beq.n	800555e <HAL_TIM_Base_Start_IT+0x76>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a1c      	ldr	r2, [pc, #112]	; (80055b8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d009      	beq.n	800555e <HAL_TIM_Base_Start_IT+0x76>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a1b      	ldr	r2, [pc, #108]	; (80055bc <HAL_TIM_Base_Start_IT+0xd4>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d004      	beq.n	800555e <HAL_TIM_Base_Start_IT+0x76>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a19      	ldr	r2, [pc, #100]	; (80055c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d115      	bne.n	800558a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	689a      	ldr	r2, [r3, #8]
 8005564:	4b17      	ldr	r3, [pc, #92]	; (80055c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005566:	4013      	ands	r3, r2
 8005568:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2b06      	cmp	r3, #6
 800556e:	d015      	beq.n	800559c <HAL_TIM_Base_Start_IT+0xb4>
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005576:	d011      	beq.n	800559c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f042 0201 	orr.w	r2, r2, #1
 8005586:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005588:	e008      	b.n	800559c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f042 0201 	orr.w	r2, r2, #1
 8005598:	601a      	str	r2, [r3, #0]
 800559a:	e000      	b.n	800559e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800559c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3714      	adds	r7, #20
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr
 80055ac:	40012c00 	.word	0x40012c00
 80055b0:	40000400 	.word	0x40000400
 80055b4:	40000800 	.word	0x40000800
 80055b8:	40013400 	.word	0x40013400
 80055bc:	40014000 	.word	0x40014000
 80055c0:	40015000 	.word	0x40015000
 80055c4:	00010007 	.word	0x00010007

080055c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d101      	bne.n	80055da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e049      	b.n	800566e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d106      	bne.n	80055f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f7fc fc9e 	bl	8001f30 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2202      	movs	r2, #2
 80055f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	3304      	adds	r3, #4
 8005604:	4619      	mov	r1, r3
 8005606:	4610      	mov	r0, r2
 8005608:	f000 fd02 	bl	8006010 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800566c:	2300      	movs	r3, #0
}
 800566e:	4618      	mov	r0, r3
 8005670:	3708      	adds	r7, #8
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
	...

08005678 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d109      	bne.n	800569c <HAL_TIM_PWM_Start+0x24>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800568e:	b2db      	uxtb	r3, r3
 8005690:	2b01      	cmp	r3, #1
 8005692:	bf14      	ite	ne
 8005694:	2301      	movne	r3, #1
 8005696:	2300      	moveq	r3, #0
 8005698:	b2db      	uxtb	r3, r3
 800569a:	e03c      	b.n	8005716 <HAL_TIM_PWM_Start+0x9e>
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	2b04      	cmp	r3, #4
 80056a0:	d109      	bne.n	80056b6 <HAL_TIM_PWM_Start+0x3e>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	bf14      	ite	ne
 80056ae:	2301      	movne	r3, #1
 80056b0:	2300      	moveq	r3, #0
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	e02f      	b.n	8005716 <HAL_TIM_PWM_Start+0x9e>
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	2b08      	cmp	r3, #8
 80056ba:	d109      	bne.n	80056d0 <HAL_TIM_PWM_Start+0x58>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	bf14      	ite	ne
 80056c8:	2301      	movne	r3, #1
 80056ca:	2300      	moveq	r3, #0
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	e022      	b.n	8005716 <HAL_TIM_PWM_Start+0x9e>
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	2b0c      	cmp	r3, #12
 80056d4:	d109      	bne.n	80056ea <HAL_TIM_PWM_Start+0x72>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	2b01      	cmp	r3, #1
 80056e0:	bf14      	ite	ne
 80056e2:	2301      	movne	r3, #1
 80056e4:	2300      	moveq	r3, #0
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	e015      	b.n	8005716 <HAL_TIM_PWM_Start+0x9e>
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	2b10      	cmp	r3, #16
 80056ee:	d109      	bne.n	8005704 <HAL_TIM_PWM_Start+0x8c>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	bf14      	ite	ne
 80056fc:	2301      	movne	r3, #1
 80056fe:	2300      	moveq	r3, #0
 8005700:	b2db      	uxtb	r3, r3
 8005702:	e008      	b.n	8005716 <HAL_TIM_PWM_Start+0x9e>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800570a:	b2db      	uxtb	r3, r3
 800570c:	2b01      	cmp	r3, #1
 800570e:	bf14      	ite	ne
 8005710:	2301      	movne	r3, #1
 8005712:	2300      	moveq	r3, #0
 8005714:	b2db      	uxtb	r3, r3
 8005716:	2b00      	cmp	r3, #0
 8005718:	d001      	beq.n	800571e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e0a1      	b.n	8005862 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d104      	bne.n	800572e <HAL_TIM_PWM_Start+0xb6>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2202      	movs	r2, #2
 8005728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800572c:	e023      	b.n	8005776 <HAL_TIM_PWM_Start+0xfe>
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	2b04      	cmp	r3, #4
 8005732:	d104      	bne.n	800573e <HAL_TIM_PWM_Start+0xc6>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2202      	movs	r2, #2
 8005738:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800573c:	e01b      	b.n	8005776 <HAL_TIM_PWM_Start+0xfe>
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	2b08      	cmp	r3, #8
 8005742:	d104      	bne.n	800574e <HAL_TIM_PWM_Start+0xd6>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2202      	movs	r2, #2
 8005748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800574c:	e013      	b.n	8005776 <HAL_TIM_PWM_Start+0xfe>
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	2b0c      	cmp	r3, #12
 8005752:	d104      	bne.n	800575e <HAL_TIM_PWM_Start+0xe6>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2202      	movs	r2, #2
 8005758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800575c:	e00b      	b.n	8005776 <HAL_TIM_PWM_Start+0xfe>
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	2b10      	cmp	r3, #16
 8005762:	d104      	bne.n	800576e <HAL_TIM_PWM_Start+0xf6>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2202      	movs	r2, #2
 8005768:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800576c:	e003      	b.n	8005776 <HAL_TIM_PWM_Start+0xfe>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2202      	movs	r2, #2
 8005772:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2201      	movs	r2, #1
 800577c:	6839      	ldr	r1, [r7, #0]
 800577e:	4618      	mov	r0, r3
 8005780:	f001 f81a 	bl	80067b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a38      	ldr	r2, [pc, #224]	; (800586c <HAL_TIM_PWM_Start+0x1f4>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d018      	beq.n	80057c0 <HAL_TIM_PWM_Start+0x148>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a37      	ldr	r2, [pc, #220]	; (8005870 <HAL_TIM_PWM_Start+0x1f8>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d013      	beq.n	80057c0 <HAL_TIM_PWM_Start+0x148>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a35      	ldr	r2, [pc, #212]	; (8005874 <HAL_TIM_PWM_Start+0x1fc>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d00e      	beq.n	80057c0 <HAL_TIM_PWM_Start+0x148>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a34      	ldr	r2, [pc, #208]	; (8005878 <HAL_TIM_PWM_Start+0x200>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d009      	beq.n	80057c0 <HAL_TIM_PWM_Start+0x148>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a32      	ldr	r2, [pc, #200]	; (800587c <HAL_TIM_PWM_Start+0x204>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d004      	beq.n	80057c0 <HAL_TIM_PWM_Start+0x148>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a31      	ldr	r2, [pc, #196]	; (8005880 <HAL_TIM_PWM_Start+0x208>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d101      	bne.n	80057c4 <HAL_TIM_PWM_Start+0x14c>
 80057c0:	2301      	movs	r3, #1
 80057c2:	e000      	b.n	80057c6 <HAL_TIM_PWM_Start+0x14e>
 80057c4:	2300      	movs	r3, #0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d007      	beq.n	80057da <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80057d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a23      	ldr	r2, [pc, #140]	; (800586c <HAL_TIM_PWM_Start+0x1f4>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d01d      	beq.n	8005820 <HAL_TIM_PWM_Start+0x1a8>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057ec:	d018      	beq.n	8005820 <HAL_TIM_PWM_Start+0x1a8>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a24      	ldr	r2, [pc, #144]	; (8005884 <HAL_TIM_PWM_Start+0x20c>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d013      	beq.n	8005820 <HAL_TIM_PWM_Start+0x1a8>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a22      	ldr	r2, [pc, #136]	; (8005888 <HAL_TIM_PWM_Start+0x210>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d00e      	beq.n	8005820 <HAL_TIM_PWM_Start+0x1a8>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a1a      	ldr	r2, [pc, #104]	; (8005870 <HAL_TIM_PWM_Start+0x1f8>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d009      	beq.n	8005820 <HAL_TIM_PWM_Start+0x1a8>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a18      	ldr	r2, [pc, #96]	; (8005874 <HAL_TIM_PWM_Start+0x1fc>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d004      	beq.n	8005820 <HAL_TIM_PWM_Start+0x1a8>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a19      	ldr	r2, [pc, #100]	; (8005880 <HAL_TIM_PWM_Start+0x208>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d115      	bne.n	800584c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	689a      	ldr	r2, [r3, #8]
 8005826:	4b19      	ldr	r3, [pc, #100]	; (800588c <HAL_TIM_PWM_Start+0x214>)
 8005828:	4013      	ands	r3, r2
 800582a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2b06      	cmp	r3, #6
 8005830:	d015      	beq.n	800585e <HAL_TIM_PWM_Start+0x1e6>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005838:	d011      	beq.n	800585e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f042 0201 	orr.w	r2, r2, #1
 8005848:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800584a:	e008      	b.n	800585e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f042 0201 	orr.w	r2, r2, #1
 800585a:	601a      	str	r2, [r3, #0]
 800585c:	e000      	b.n	8005860 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800585e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	3710      	adds	r7, #16
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	40012c00 	.word	0x40012c00
 8005870:	40013400 	.word	0x40013400
 8005874:	40014000 	.word	0x40014000
 8005878:	40014400 	.word	0x40014400
 800587c:	40014800 	.word	0x40014800
 8005880:	40015000 	.word	0x40015000
 8005884:	40000400 	.word	0x40000400
 8005888:	40000800 	.word	0x40000800
 800588c:	00010007 	.word	0x00010007

08005890 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b086      	sub	sp, #24
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d101      	bne.n	80058a4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	e097      	b.n	80059d4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d106      	bne.n	80058be <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f7fc fb97 	bl	8001fec <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2202      	movs	r2, #2
 80058c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	6812      	ldr	r2, [r2, #0]
 80058d0:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80058d4:	f023 0307 	bic.w	r3, r3, #7
 80058d8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	3304      	adds	r3, #4
 80058e2:	4619      	mov	r1, r3
 80058e4:	4610      	mov	r0, r2
 80058e6:	f000 fb93 	bl	8006010 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	699b      	ldr	r3, [r3, #24]
 80058f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	6a1b      	ldr	r3, [r3, #32]
 8005900:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	697a      	ldr	r2, [r7, #20]
 8005908:	4313      	orrs	r3, r2
 800590a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005912:	f023 0303 	bic.w	r3, r3, #3
 8005916:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	689a      	ldr	r2, [r3, #8]
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	699b      	ldr	r3, [r3, #24]
 8005920:	021b      	lsls	r3, r3, #8
 8005922:	4313      	orrs	r3, r2
 8005924:	693a      	ldr	r2, [r7, #16]
 8005926:	4313      	orrs	r3, r2
 8005928:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005930:	f023 030c 	bic.w	r3, r3, #12
 8005934:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800593c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005940:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	68da      	ldr	r2, [r3, #12]
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	69db      	ldr	r3, [r3, #28]
 800594a:	021b      	lsls	r3, r3, #8
 800594c:	4313      	orrs	r3, r2
 800594e:	693a      	ldr	r2, [r7, #16]
 8005950:	4313      	orrs	r3, r2
 8005952:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	691b      	ldr	r3, [r3, #16]
 8005958:	011a      	lsls	r2, r3, #4
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	6a1b      	ldr	r3, [r3, #32]
 800595e:	031b      	lsls	r3, r3, #12
 8005960:	4313      	orrs	r3, r2
 8005962:	693a      	ldr	r2, [r7, #16]
 8005964:	4313      	orrs	r3, r2
 8005966:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800596e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005976:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	685a      	ldr	r2, [r3, #4]
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	695b      	ldr	r3, [r3, #20]
 8005980:	011b      	lsls	r3, r3, #4
 8005982:	4313      	orrs	r3, r2
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	4313      	orrs	r3, r2
 8005988:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	697a      	ldr	r2, [r7, #20]
 8005990:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	693a      	ldr	r2, [r7, #16]
 8005998:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	68fa      	ldr	r2, [r7, #12]
 80059a0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2201      	movs	r2, #1
 80059a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2201      	movs	r2, #1
 80059ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2201      	movs	r2, #1
 80059b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2201      	movs	r2, #1
 80059be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2201      	movs	r2, #1
 80059c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2201      	movs	r2, #1
 80059ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059d2:	2300      	movs	r3, #0
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3718      	adds	r7, #24
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059ec:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80059f4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80059fc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a04:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d110      	bne.n	8005a2e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a0c:	7bfb      	ldrb	r3, [r7, #15]
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d102      	bne.n	8005a18 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005a12:	7b7b      	ldrb	r3, [r7, #13]
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d001      	beq.n	8005a1c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e069      	b.n	8005af0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2202      	movs	r2, #2
 8005a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2202      	movs	r2, #2
 8005a28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a2c:	e031      	b.n	8005a92 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	2b04      	cmp	r3, #4
 8005a32:	d110      	bne.n	8005a56 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a34:	7bbb      	ldrb	r3, [r7, #14]
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d102      	bne.n	8005a40 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005a3a:	7b3b      	ldrb	r3, [r7, #12]
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d001      	beq.n	8005a44 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	e055      	b.n	8005af0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2202      	movs	r2, #2
 8005a48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2202      	movs	r2, #2
 8005a50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a54:	e01d      	b.n	8005a92 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a56:	7bfb      	ldrb	r3, [r7, #15]
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d108      	bne.n	8005a6e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a5c:	7bbb      	ldrb	r3, [r7, #14]
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d105      	bne.n	8005a6e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a62:	7b7b      	ldrb	r3, [r7, #13]
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d102      	bne.n	8005a6e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005a68:	7b3b      	ldrb	r3, [r7, #12]
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d001      	beq.n	8005a72 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e03e      	b.n	8005af0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2202      	movs	r2, #2
 8005a76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2202      	movs	r2, #2
 8005a7e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2202      	movs	r2, #2
 8005a86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2202      	movs	r2, #2
 8005a8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d003      	beq.n	8005aa0 <HAL_TIM_Encoder_Start+0xc4>
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	2b04      	cmp	r3, #4
 8005a9c:	d008      	beq.n	8005ab0 <HAL_TIM_Encoder_Start+0xd4>
 8005a9e:	e00f      	b.n	8005ac0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	2100      	movs	r1, #0
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f000 fe85 	bl	80067b8 <TIM_CCxChannelCmd>
      break;
 8005aae:	e016      	b.n	8005ade <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	2104      	movs	r1, #4
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f000 fe7d 	bl	80067b8 <TIM_CCxChannelCmd>
      break;
 8005abe:	e00e      	b.n	8005ade <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	2100      	movs	r1, #0
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f000 fe75 	bl	80067b8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	2104      	movs	r1, #4
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f000 fe6e 	bl	80067b8 <TIM_CCxChannelCmd>
      break;
 8005adc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f042 0201 	orr.w	r2, r2, #1
 8005aec:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005aee:	2300      	movs	r3, #0
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3710      	adds	r7, #16
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b084      	sub	sp, #16
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	f003 0302 	and.w	r3, r3, #2
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d020      	beq.n	8005b5c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f003 0302 	and.w	r3, r3, #2
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d01b      	beq.n	8005b5c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f06f 0202 	mvn.w	r2, #2
 8005b2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2201      	movs	r2, #1
 8005b32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	699b      	ldr	r3, [r3, #24]
 8005b3a:	f003 0303 	and.w	r3, r3, #3
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d003      	beq.n	8005b4a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 fa46 	bl	8005fd4 <HAL_TIM_IC_CaptureCallback>
 8005b48:	e005      	b.n	8005b56 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 fa38 	bl	8005fc0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 fa49 	bl	8005fe8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	f003 0304 	and.w	r3, r3, #4
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d020      	beq.n	8005ba8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f003 0304 	and.w	r3, r3, #4
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d01b      	beq.n	8005ba8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f06f 0204 	mvn.w	r2, #4
 8005b78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2202      	movs	r2, #2
 8005b7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	699b      	ldr	r3, [r3, #24]
 8005b86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d003      	beq.n	8005b96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 fa20 	bl	8005fd4 <HAL_TIM_IC_CaptureCallback>
 8005b94:	e005      	b.n	8005ba2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 fa12 	bl	8005fc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f000 fa23 	bl	8005fe8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	f003 0308 	and.w	r3, r3, #8
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d020      	beq.n	8005bf4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f003 0308 	and.w	r3, r3, #8
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d01b      	beq.n	8005bf4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f06f 0208 	mvn.w	r2, #8
 8005bc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2204      	movs	r2, #4
 8005bca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	69db      	ldr	r3, [r3, #28]
 8005bd2:	f003 0303 	and.w	r3, r3, #3
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d003      	beq.n	8005be2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 f9fa 	bl	8005fd4 <HAL_TIM_IC_CaptureCallback>
 8005be0:	e005      	b.n	8005bee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 f9ec 	bl	8005fc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f000 f9fd 	bl	8005fe8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	f003 0310 	and.w	r3, r3, #16
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d020      	beq.n	8005c40 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f003 0310 	and.w	r3, r3, #16
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d01b      	beq.n	8005c40 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f06f 0210 	mvn.w	r2, #16
 8005c10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2208      	movs	r2, #8
 8005c16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	69db      	ldr	r3, [r3, #28]
 8005c1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d003      	beq.n	8005c2e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 f9d4 	bl	8005fd4 <HAL_TIM_IC_CaptureCallback>
 8005c2c:	e005      	b.n	8005c3a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 f9c6 	bl	8005fc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f000 f9d7 	bl	8005fe8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	f003 0301 	and.w	r3, r3, #1
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d00c      	beq.n	8005c64 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f003 0301 	and.w	r3, r3, #1
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d007      	beq.n	8005c64 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f06f 0201 	mvn.w	r2, #1
 8005c5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f7fb fcfc 	bl	800165c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d104      	bne.n	8005c78 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d00c      	beq.n	8005c92 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d007      	beq.n	8005c92 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8005c8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f000 fee5 	bl	8006a5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d00c      	beq.n	8005cb6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d007      	beq.n	8005cb6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005cae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f000 fedd 	bl	8006a70 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d00c      	beq.n	8005cda <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d007      	beq.n	8005cda <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005cd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f000 f991 	bl	8005ffc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	f003 0320 	and.w	r3, r3, #32
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d00c      	beq.n	8005cfe <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f003 0320 	and.w	r3, r3, #32
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d007      	beq.n	8005cfe <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f06f 0220 	mvn.w	r2, #32
 8005cf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f000 fea5 	bl	8006a48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d00c      	beq.n	8005d22 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d007      	beq.n	8005d22 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005d1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f000 feb1 	bl	8006a84 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d00c      	beq.n	8005d46 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d007      	beq.n	8005d46 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005d3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f000 fea9 	bl	8006a98 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d00c      	beq.n	8005d6a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d007      	beq.n	8005d6a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8005d62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f000 fea1 	bl	8006aac <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d00c      	beq.n	8005d8e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d007      	beq.n	8005d8e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005d86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f000 fe99 	bl	8006ac0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d8e:	bf00      	nop
 8005d90:	3710      	adds	r7, #16
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}
	...

08005d98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b086      	sub	sp, #24
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005da4:	2300      	movs	r3, #0
 8005da6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d101      	bne.n	8005db6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005db2:	2302      	movs	r3, #2
 8005db4:	e0ff      	b.n	8005fb6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2201      	movs	r2, #1
 8005dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2b14      	cmp	r3, #20
 8005dc2:	f200 80f0 	bhi.w	8005fa6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005dc6:	a201      	add	r2, pc, #4	; (adr r2, 8005dcc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dcc:	08005e21 	.word	0x08005e21
 8005dd0:	08005fa7 	.word	0x08005fa7
 8005dd4:	08005fa7 	.word	0x08005fa7
 8005dd8:	08005fa7 	.word	0x08005fa7
 8005ddc:	08005e61 	.word	0x08005e61
 8005de0:	08005fa7 	.word	0x08005fa7
 8005de4:	08005fa7 	.word	0x08005fa7
 8005de8:	08005fa7 	.word	0x08005fa7
 8005dec:	08005ea3 	.word	0x08005ea3
 8005df0:	08005fa7 	.word	0x08005fa7
 8005df4:	08005fa7 	.word	0x08005fa7
 8005df8:	08005fa7 	.word	0x08005fa7
 8005dfc:	08005ee3 	.word	0x08005ee3
 8005e00:	08005fa7 	.word	0x08005fa7
 8005e04:	08005fa7 	.word	0x08005fa7
 8005e08:	08005fa7 	.word	0x08005fa7
 8005e0c:	08005f25 	.word	0x08005f25
 8005e10:	08005fa7 	.word	0x08005fa7
 8005e14:	08005fa7 	.word	0x08005fa7
 8005e18:	08005fa7 	.word	0x08005fa7
 8005e1c:	08005f65 	.word	0x08005f65
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	68b9      	ldr	r1, [r7, #8]
 8005e26:	4618      	mov	r0, r3
 8005e28:	f000 f99c 	bl	8006164 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	699a      	ldr	r2, [r3, #24]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f042 0208 	orr.w	r2, r2, #8
 8005e3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	699a      	ldr	r2, [r3, #24]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f022 0204 	bic.w	r2, r2, #4
 8005e4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	6999      	ldr	r1, [r3, #24]
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	691a      	ldr	r2, [r3, #16]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	430a      	orrs	r2, r1
 8005e5c:	619a      	str	r2, [r3, #24]
      break;
 8005e5e:	e0a5      	b.n	8005fac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68b9      	ldr	r1, [r7, #8]
 8005e66:	4618      	mov	r0, r3
 8005e68:	f000 fa16 	bl	8006298 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	699a      	ldr	r2, [r3, #24]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	699a      	ldr	r2, [r3, #24]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	6999      	ldr	r1, [r3, #24]
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	021a      	lsls	r2, r3, #8
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	430a      	orrs	r2, r1
 8005e9e:	619a      	str	r2, [r3, #24]
      break;
 8005ea0:	e084      	b.n	8005fac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	68b9      	ldr	r1, [r7, #8]
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f000 fa89 	bl	80063c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	69da      	ldr	r2, [r3, #28]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f042 0208 	orr.w	r2, r2, #8
 8005ebc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	69da      	ldr	r2, [r3, #28]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f022 0204 	bic.w	r2, r2, #4
 8005ecc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	69d9      	ldr	r1, [r3, #28]
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	691a      	ldr	r2, [r3, #16]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	430a      	orrs	r2, r1
 8005ede:	61da      	str	r2, [r3, #28]
      break;
 8005ee0:	e064      	b.n	8005fac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	68b9      	ldr	r1, [r7, #8]
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f000 fafb 	bl	80064e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	69da      	ldr	r2, [r3, #28]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005efc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	69da      	ldr	r2, [r3, #28]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	69d9      	ldr	r1, [r3, #28]
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	691b      	ldr	r3, [r3, #16]
 8005f18:	021a      	lsls	r2, r3, #8
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	430a      	orrs	r2, r1
 8005f20:	61da      	str	r2, [r3, #28]
      break;
 8005f22:	e043      	b.n	8005fac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	68b9      	ldr	r1, [r7, #8]
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f000 fb6e 	bl	800660c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f042 0208 	orr.w	r2, r2, #8
 8005f3e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f022 0204 	bic.w	r2, r2, #4
 8005f4e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	691a      	ldr	r2, [r3, #16]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	430a      	orrs	r2, r1
 8005f60:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005f62:	e023      	b.n	8005fac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	68b9      	ldr	r1, [r7, #8]
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f000 fbb8 	bl	80066e0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f7e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f8e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	021a      	lsls	r2, r3, #8
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	430a      	orrs	r2, r1
 8005fa2:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005fa4:	e002      	b.n	8005fac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	75fb      	strb	r3, [r7, #23]
      break;
 8005faa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005fb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3718      	adds	r7, #24
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
 8005fbe:	bf00      	nop

08005fc0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005fc8:	bf00      	nop
 8005fca:	370c      	adds	r7, #12
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr

08005fd4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b083      	sub	sp, #12
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005fdc:	bf00      	nop
 8005fde:	370c      	adds	r7, #12
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ff0:	bf00      	nop
 8005ff2:	370c      	adds	r7, #12
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr

08005ffc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006004:	bf00      	nop
 8006006:	370c      	adds	r7, #12
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006010:	b480      	push	{r7}
 8006012:	b085      	sub	sp, #20
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4a48      	ldr	r2, [pc, #288]	; (8006144 <TIM_Base_SetConfig+0x134>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d013      	beq.n	8006050 <TIM_Base_SetConfig+0x40>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800602e:	d00f      	beq.n	8006050 <TIM_Base_SetConfig+0x40>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	4a45      	ldr	r2, [pc, #276]	; (8006148 <TIM_Base_SetConfig+0x138>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d00b      	beq.n	8006050 <TIM_Base_SetConfig+0x40>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	4a44      	ldr	r2, [pc, #272]	; (800614c <TIM_Base_SetConfig+0x13c>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d007      	beq.n	8006050 <TIM_Base_SetConfig+0x40>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4a43      	ldr	r2, [pc, #268]	; (8006150 <TIM_Base_SetConfig+0x140>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d003      	beq.n	8006050 <TIM_Base_SetConfig+0x40>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	4a42      	ldr	r2, [pc, #264]	; (8006154 <TIM_Base_SetConfig+0x144>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d108      	bne.n	8006062 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006056:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	68fa      	ldr	r2, [r7, #12]
 800605e:	4313      	orrs	r3, r2
 8006060:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a37      	ldr	r2, [pc, #220]	; (8006144 <TIM_Base_SetConfig+0x134>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d01f      	beq.n	80060aa <TIM_Base_SetConfig+0x9a>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006070:	d01b      	beq.n	80060aa <TIM_Base_SetConfig+0x9a>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a34      	ldr	r2, [pc, #208]	; (8006148 <TIM_Base_SetConfig+0x138>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d017      	beq.n	80060aa <TIM_Base_SetConfig+0x9a>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a33      	ldr	r2, [pc, #204]	; (800614c <TIM_Base_SetConfig+0x13c>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d013      	beq.n	80060aa <TIM_Base_SetConfig+0x9a>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4a32      	ldr	r2, [pc, #200]	; (8006150 <TIM_Base_SetConfig+0x140>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d00f      	beq.n	80060aa <TIM_Base_SetConfig+0x9a>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4a32      	ldr	r2, [pc, #200]	; (8006158 <TIM_Base_SetConfig+0x148>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d00b      	beq.n	80060aa <TIM_Base_SetConfig+0x9a>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4a31      	ldr	r2, [pc, #196]	; (800615c <TIM_Base_SetConfig+0x14c>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d007      	beq.n	80060aa <TIM_Base_SetConfig+0x9a>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4a30      	ldr	r2, [pc, #192]	; (8006160 <TIM_Base_SetConfig+0x150>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d003      	beq.n	80060aa <TIM_Base_SetConfig+0x9a>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	4a2b      	ldr	r2, [pc, #172]	; (8006154 <TIM_Base_SetConfig+0x144>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d108      	bne.n	80060bc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	68fa      	ldr	r2, [r7, #12]
 80060b8:	4313      	orrs	r3, r2
 80060ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	695b      	ldr	r3, [r3, #20]
 80060c6:	4313      	orrs	r3, r2
 80060c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	68fa      	ldr	r2, [r7, #12]
 80060ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	689a      	ldr	r2, [r3, #8]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	4a18      	ldr	r2, [pc, #96]	; (8006144 <TIM_Base_SetConfig+0x134>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d013      	beq.n	8006110 <TIM_Base_SetConfig+0x100>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	4a19      	ldr	r2, [pc, #100]	; (8006150 <TIM_Base_SetConfig+0x140>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d00f      	beq.n	8006110 <TIM_Base_SetConfig+0x100>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4a19      	ldr	r2, [pc, #100]	; (8006158 <TIM_Base_SetConfig+0x148>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d00b      	beq.n	8006110 <TIM_Base_SetConfig+0x100>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	4a18      	ldr	r2, [pc, #96]	; (800615c <TIM_Base_SetConfig+0x14c>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d007      	beq.n	8006110 <TIM_Base_SetConfig+0x100>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	4a17      	ldr	r2, [pc, #92]	; (8006160 <TIM_Base_SetConfig+0x150>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d003      	beq.n	8006110 <TIM_Base_SetConfig+0x100>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	4a12      	ldr	r2, [pc, #72]	; (8006154 <TIM_Base_SetConfig+0x144>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d103      	bne.n	8006118 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	691a      	ldr	r2, [r3, #16]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	691b      	ldr	r3, [r3, #16]
 8006122:	f003 0301 	and.w	r3, r3, #1
 8006126:	2b01      	cmp	r3, #1
 8006128:	d105      	bne.n	8006136 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	691b      	ldr	r3, [r3, #16]
 800612e:	f023 0201 	bic.w	r2, r3, #1
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	611a      	str	r2, [r3, #16]
  }
}
 8006136:	bf00      	nop
 8006138:	3714      	adds	r7, #20
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr
 8006142:	bf00      	nop
 8006144:	40012c00 	.word	0x40012c00
 8006148:	40000400 	.word	0x40000400
 800614c:	40000800 	.word	0x40000800
 8006150:	40013400 	.word	0x40013400
 8006154:	40015000 	.word	0x40015000
 8006158:	40014000 	.word	0x40014000
 800615c:	40014400 	.word	0x40014400
 8006160:	40014800 	.word	0x40014800

08006164 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006164:	b480      	push	{r7}
 8006166:	b087      	sub	sp, #28
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a1b      	ldr	r3, [r3, #32]
 8006172:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6a1b      	ldr	r3, [r3, #32]
 8006178:	f023 0201 	bic.w	r2, r3, #1
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	699b      	ldr	r3, [r3, #24]
 800618a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006196:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f023 0303 	bic.w	r3, r3, #3
 800619e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	68fa      	ldr	r2, [r7, #12]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	f023 0302 	bic.w	r3, r3, #2
 80061b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	697a      	ldr	r2, [r7, #20]
 80061b8:	4313      	orrs	r3, r2
 80061ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	4a30      	ldr	r2, [pc, #192]	; (8006280 <TIM_OC1_SetConfig+0x11c>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d013      	beq.n	80061ec <TIM_OC1_SetConfig+0x88>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	4a2f      	ldr	r2, [pc, #188]	; (8006284 <TIM_OC1_SetConfig+0x120>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d00f      	beq.n	80061ec <TIM_OC1_SetConfig+0x88>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	4a2e      	ldr	r2, [pc, #184]	; (8006288 <TIM_OC1_SetConfig+0x124>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d00b      	beq.n	80061ec <TIM_OC1_SetConfig+0x88>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	4a2d      	ldr	r2, [pc, #180]	; (800628c <TIM_OC1_SetConfig+0x128>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d007      	beq.n	80061ec <TIM_OC1_SetConfig+0x88>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	4a2c      	ldr	r2, [pc, #176]	; (8006290 <TIM_OC1_SetConfig+0x12c>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d003      	beq.n	80061ec <TIM_OC1_SetConfig+0x88>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	4a2b      	ldr	r2, [pc, #172]	; (8006294 <TIM_OC1_SetConfig+0x130>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d10c      	bne.n	8006206 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	f023 0308 	bic.w	r3, r3, #8
 80061f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	697a      	ldr	r2, [r7, #20]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	f023 0304 	bic.w	r3, r3, #4
 8006204:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4a1d      	ldr	r2, [pc, #116]	; (8006280 <TIM_OC1_SetConfig+0x11c>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d013      	beq.n	8006236 <TIM_OC1_SetConfig+0xd2>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a1c      	ldr	r2, [pc, #112]	; (8006284 <TIM_OC1_SetConfig+0x120>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d00f      	beq.n	8006236 <TIM_OC1_SetConfig+0xd2>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a1b      	ldr	r2, [pc, #108]	; (8006288 <TIM_OC1_SetConfig+0x124>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d00b      	beq.n	8006236 <TIM_OC1_SetConfig+0xd2>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	4a1a      	ldr	r2, [pc, #104]	; (800628c <TIM_OC1_SetConfig+0x128>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d007      	beq.n	8006236 <TIM_OC1_SetConfig+0xd2>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a19      	ldr	r2, [pc, #100]	; (8006290 <TIM_OC1_SetConfig+0x12c>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d003      	beq.n	8006236 <TIM_OC1_SetConfig+0xd2>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	4a18      	ldr	r2, [pc, #96]	; (8006294 <TIM_OC1_SetConfig+0x130>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d111      	bne.n	800625a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800623c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006244:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	695b      	ldr	r3, [r3, #20]
 800624a:	693a      	ldr	r2, [r7, #16]
 800624c:	4313      	orrs	r3, r2
 800624e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	699b      	ldr	r3, [r3, #24]
 8006254:	693a      	ldr	r2, [r7, #16]
 8006256:	4313      	orrs	r3, r2
 8006258:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	693a      	ldr	r2, [r7, #16]
 800625e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	68fa      	ldr	r2, [r7, #12]
 8006264:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	685a      	ldr	r2, [r3, #4]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	697a      	ldr	r2, [r7, #20]
 8006272:	621a      	str	r2, [r3, #32]
}
 8006274:	bf00      	nop
 8006276:	371c      	adds	r7, #28
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr
 8006280:	40012c00 	.word	0x40012c00
 8006284:	40013400 	.word	0x40013400
 8006288:	40014000 	.word	0x40014000
 800628c:	40014400 	.word	0x40014400
 8006290:	40014800 	.word	0x40014800
 8006294:	40015000 	.word	0x40015000

08006298 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006298:	b480      	push	{r7}
 800629a:	b087      	sub	sp, #28
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6a1b      	ldr	r3, [r3, #32]
 80062a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6a1b      	ldr	r3, [r3, #32]
 80062ac:	f023 0210 	bic.w	r2, r3, #16
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	699b      	ldr	r3, [r3, #24]
 80062be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80062c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	021b      	lsls	r3, r3, #8
 80062da:	68fa      	ldr	r2, [r7, #12]
 80062dc:	4313      	orrs	r3, r2
 80062de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	f023 0320 	bic.w	r3, r3, #32
 80062e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	011b      	lsls	r3, r3, #4
 80062ee:	697a      	ldr	r2, [r7, #20]
 80062f0:	4313      	orrs	r3, r2
 80062f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	4a2c      	ldr	r2, [pc, #176]	; (80063a8 <TIM_OC2_SetConfig+0x110>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d007      	beq.n	800630c <TIM_OC2_SetConfig+0x74>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	4a2b      	ldr	r2, [pc, #172]	; (80063ac <TIM_OC2_SetConfig+0x114>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d003      	beq.n	800630c <TIM_OC2_SetConfig+0x74>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4a2a      	ldr	r2, [pc, #168]	; (80063b0 <TIM_OC2_SetConfig+0x118>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d10d      	bne.n	8006328 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006312:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	011b      	lsls	r3, r3, #4
 800631a:	697a      	ldr	r2, [r7, #20]
 800631c:	4313      	orrs	r3, r2
 800631e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006326:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	4a1f      	ldr	r2, [pc, #124]	; (80063a8 <TIM_OC2_SetConfig+0x110>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d013      	beq.n	8006358 <TIM_OC2_SetConfig+0xc0>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	4a1e      	ldr	r2, [pc, #120]	; (80063ac <TIM_OC2_SetConfig+0x114>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d00f      	beq.n	8006358 <TIM_OC2_SetConfig+0xc0>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	4a1e      	ldr	r2, [pc, #120]	; (80063b4 <TIM_OC2_SetConfig+0x11c>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d00b      	beq.n	8006358 <TIM_OC2_SetConfig+0xc0>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	4a1d      	ldr	r2, [pc, #116]	; (80063b8 <TIM_OC2_SetConfig+0x120>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d007      	beq.n	8006358 <TIM_OC2_SetConfig+0xc0>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	4a1c      	ldr	r2, [pc, #112]	; (80063bc <TIM_OC2_SetConfig+0x124>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d003      	beq.n	8006358 <TIM_OC2_SetConfig+0xc0>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4a17      	ldr	r2, [pc, #92]	; (80063b0 <TIM_OC2_SetConfig+0x118>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d113      	bne.n	8006380 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800635e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006366:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	695b      	ldr	r3, [r3, #20]
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	693a      	ldr	r2, [r7, #16]
 8006370:	4313      	orrs	r3, r2
 8006372:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	699b      	ldr	r3, [r3, #24]
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	693a      	ldr	r2, [r7, #16]
 800637c:	4313      	orrs	r3, r2
 800637e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	693a      	ldr	r2, [r7, #16]
 8006384:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	68fa      	ldr	r2, [r7, #12]
 800638a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	685a      	ldr	r2, [r3, #4]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	697a      	ldr	r2, [r7, #20]
 8006398:	621a      	str	r2, [r3, #32]
}
 800639a:	bf00      	nop
 800639c:	371c      	adds	r7, #28
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr
 80063a6:	bf00      	nop
 80063a8:	40012c00 	.word	0x40012c00
 80063ac:	40013400 	.word	0x40013400
 80063b0:	40015000 	.word	0x40015000
 80063b4:	40014000 	.word	0x40014000
 80063b8:	40014400 	.word	0x40014400
 80063bc:	40014800 	.word	0x40014800

080063c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b087      	sub	sp, #28
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6a1b      	ldr	r3, [r3, #32]
 80063ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6a1b      	ldr	r3, [r3, #32]
 80063d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	69db      	ldr	r3, [r3, #28]
 80063e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f023 0303 	bic.w	r3, r3, #3
 80063fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	68fa      	ldr	r2, [r7, #12]
 8006402:	4313      	orrs	r3, r2
 8006404:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800640c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	021b      	lsls	r3, r3, #8
 8006414:	697a      	ldr	r2, [r7, #20]
 8006416:	4313      	orrs	r3, r2
 8006418:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a2b      	ldr	r2, [pc, #172]	; (80064cc <TIM_OC3_SetConfig+0x10c>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d007      	beq.n	8006432 <TIM_OC3_SetConfig+0x72>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	4a2a      	ldr	r2, [pc, #168]	; (80064d0 <TIM_OC3_SetConfig+0x110>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d003      	beq.n	8006432 <TIM_OC3_SetConfig+0x72>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4a29      	ldr	r2, [pc, #164]	; (80064d4 <TIM_OC3_SetConfig+0x114>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d10d      	bne.n	800644e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006438:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	021b      	lsls	r3, r3, #8
 8006440:	697a      	ldr	r2, [r7, #20]
 8006442:	4313      	orrs	r3, r2
 8006444:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800644c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	4a1e      	ldr	r2, [pc, #120]	; (80064cc <TIM_OC3_SetConfig+0x10c>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d013      	beq.n	800647e <TIM_OC3_SetConfig+0xbe>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4a1d      	ldr	r2, [pc, #116]	; (80064d0 <TIM_OC3_SetConfig+0x110>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d00f      	beq.n	800647e <TIM_OC3_SetConfig+0xbe>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4a1d      	ldr	r2, [pc, #116]	; (80064d8 <TIM_OC3_SetConfig+0x118>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d00b      	beq.n	800647e <TIM_OC3_SetConfig+0xbe>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4a1c      	ldr	r2, [pc, #112]	; (80064dc <TIM_OC3_SetConfig+0x11c>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d007      	beq.n	800647e <TIM_OC3_SetConfig+0xbe>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4a1b      	ldr	r2, [pc, #108]	; (80064e0 <TIM_OC3_SetConfig+0x120>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d003      	beq.n	800647e <TIM_OC3_SetConfig+0xbe>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	4a16      	ldr	r2, [pc, #88]	; (80064d4 <TIM_OC3_SetConfig+0x114>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d113      	bne.n	80064a6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006484:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800648c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	695b      	ldr	r3, [r3, #20]
 8006492:	011b      	lsls	r3, r3, #4
 8006494:	693a      	ldr	r2, [r7, #16]
 8006496:	4313      	orrs	r3, r2
 8006498:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	699b      	ldr	r3, [r3, #24]
 800649e:	011b      	lsls	r3, r3, #4
 80064a0:	693a      	ldr	r2, [r7, #16]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	693a      	ldr	r2, [r7, #16]
 80064aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	68fa      	ldr	r2, [r7, #12]
 80064b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	685a      	ldr	r2, [r3, #4]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	697a      	ldr	r2, [r7, #20]
 80064be:	621a      	str	r2, [r3, #32]
}
 80064c0:	bf00      	nop
 80064c2:	371c      	adds	r7, #28
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr
 80064cc:	40012c00 	.word	0x40012c00
 80064d0:	40013400 	.word	0x40013400
 80064d4:	40015000 	.word	0x40015000
 80064d8:	40014000 	.word	0x40014000
 80064dc:	40014400 	.word	0x40014400
 80064e0:	40014800 	.word	0x40014800

080064e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b087      	sub	sp, #28
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6a1b      	ldr	r3, [r3, #32]
 80064f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6a1b      	ldr	r3, [r3, #32]
 80064f8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	69db      	ldr	r3, [r3, #28]
 800650a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006512:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006516:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800651e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	021b      	lsls	r3, r3, #8
 8006526:	68fa      	ldr	r2, [r7, #12]
 8006528:	4313      	orrs	r3, r2
 800652a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006532:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	031b      	lsls	r3, r3, #12
 800653a:	697a      	ldr	r2, [r7, #20]
 800653c:	4313      	orrs	r3, r2
 800653e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4a2c      	ldr	r2, [pc, #176]	; (80065f4 <TIM_OC4_SetConfig+0x110>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d007      	beq.n	8006558 <TIM_OC4_SetConfig+0x74>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	4a2b      	ldr	r2, [pc, #172]	; (80065f8 <TIM_OC4_SetConfig+0x114>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d003      	beq.n	8006558 <TIM_OC4_SetConfig+0x74>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	4a2a      	ldr	r2, [pc, #168]	; (80065fc <TIM_OC4_SetConfig+0x118>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d10d      	bne.n	8006574 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800655e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	031b      	lsls	r3, r3, #12
 8006566:	697a      	ldr	r2, [r7, #20]
 8006568:	4313      	orrs	r3, r2
 800656a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006572:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	4a1f      	ldr	r2, [pc, #124]	; (80065f4 <TIM_OC4_SetConfig+0x110>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d013      	beq.n	80065a4 <TIM_OC4_SetConfig+0xc0>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	4a1e      	ldr	r2, [pc, #120]	; (80065f8 <TIM_OC4_SetConfig+0x114>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d00f      	beq.n	80065a4 <TIM_OC4_SetConfig+0xc0>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	4a1e      	ldr	r2, [pc, #120]	; (8006600 <TIM_OC4_SetConfig+0x11c>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d00b      	beq.n	80065a4 <TIM_OC4_SetConfig+0xc0>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	4a1d      	ldr	r2, [pc, #116]	; (8006604 <TIM_OC4_SetConfig+0x120>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d007      	beq.n	80065a4 <TIM_OC4_SetConfig+0xc0>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	4a1c      	ldr	r2, [pc, #112]	; (8006608 <TIM_OC4_SetConfig+0x124>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d003      	beq.n	80065a4 <TIM_OC4_SetConfig+0xc0>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	4a17      	ldr	r2, [pc, #92]	; (80065fc <TIM_OC4_SetConfig+0x118>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d113      	bne.n	80065cc <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065aa:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80065b2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	695b      	ldr	r3, [r3, #20]
 80065b8:	019b      	lsls	r3, r3, #6
 80065ba:	693a      	ldr	r2, [r7, #16]
 80065bc:	4313      	orrs	r3, r2
 80065be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	699b      	ldr	r3, [r3, #24]
 80065c4:	019b      	lsls	r3, r3, #6
 80065c6:	693a      	ldr	r2, [r7, #16]
 80065c8:	4313      	orrs	r3, r2
 80065ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	693a      	ldr	r2, [r7, #16]
 80065d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	68fa      	ldr	r2, [r7, #12]
 80065d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	685a      	ldr	r2, [r3, #4]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	697a      	ldr	r2, [r7, #20]
 80065e4:	621a      	str	r2, [r3, #32]
}
 80065e6:	bf00      	nop
 80065e8:	371c      	adds	r7, #28
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr
 80065f2:	bf00      	nop
 80065f4:	40012c00 	.word	0x40012c00
 80065f8:	40013400 	.word	0x40013400
 80065fc:	40015000 	.word	0x40015000
 8006600:	40014000 	.word	0x40014000
 8006604:	40014400 	.word	0x40014400
 8006608:	40014800 	.word	0x40014800

0800660c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800660c:	b480      	push	{r7}
 800660e:	b087      	sub	sp, #28
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6a1b      	ldr	r3, [r3, #32]
 800661a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6a1b      	ldr	r3, [r3, #32]
 8006620:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800663a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800663e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	68fa      	ldr	r2, [r7, #12]
 8006646:	4313      	orrs	r3, r2
 8006648:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006650:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	041b      	lsls	r3, r3, #16
 8006658:	693a      	ldr	r2, [r7, #16]
 800665a:	4313      	orrs	r3, r2
 800665c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4a19      	ldr	r2, [pc, #100]	; (80066c8 <TIM_OC5_SetConfig+0xbc>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d013      	beq.n	800668e <TIM_OC5_SetConfig+0x82>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4a18      	ldr	r2, [pc, #96]	; (80066cc <TIM_OC5_SetConfig+0xc0>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d00f      	beq.n	800668e <TIM_OC5_SetConfig+0x82>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4a17      	ldr	r2, [pc, #92]	; (80066d0 <TIM_OC5_SetConfig+0xc4>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d00b      	beq.n	800668e <TIM_OC5_SetConfig+0x82>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4a16      	ldr	r2, [pc, #88]	; (80066d4 <TIM_OC5_SetConfig+0xc8>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d007      	beq.n	800668e <TIM_OC5_SetConfig+0x82>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4a15      	ldr	r2, [pc, #84]	; (80066d8 <TIM_OC5_SetConfig+0xcc>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d003      	beq.n	800668e <TIM_OC5_SetConfig+0x82>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4a14      	ldr	r2, [pc, #80]	; (80066dc <TIM_OC5_SetConfig+0xd0>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d109      	bne.n	80066a2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006694:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	695b      	ldr	r3, [r3, #20]
 800669a:	021b      	lsls	r3, r3, #8
 800669c:	697a      	ldr	r2, [r7, #20]
 800669e:	4313      	orrs	r3, r2
 80066a0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	697a      	ldr	r2, [r7, #20]
 80066a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	68fa      	ldr	r2, [r7, #12]
 80066ac:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	685a      	ldr	r2, [r3, #4]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	693a      	ldr	r2, [r7, #16]
 80066ba:	621a      	str	r2, [r3, #32]
}
 80066bc:	bf00      	nop
 80066be:	371c      	adds	r7, #28
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr
 80066c8:	40012c00 	.word	0x40012c00
 80066cc:	40013400 	.word	0x40013400
 80066d0:	40014000 	.word	0x40014000
 80066d4:	40014400 	.word	0x40014400
 80066d8:	40014800 	.word	0x40014800
 80066dc:	40015000 	.word	0x40015000

080066e0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b087      	sub	sp, #28
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6a1b      	ldr	r3, [r3, #32]
 80066ee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6a1b      	ldr	r3, [r3, #32]
 80066f4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800670e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006712:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	021b      	lsls	r3, r3, #8
 800671a:	68fa      	ldr	r2, [r7, #12]
 800671c:	4313      	orrs	r3, r2
 800671e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006726:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	051b      	lsls	r3, r3, #20
 800672e:	693a      	ldr	r2, [r7, #16]
 8006730:	4313      	orrs	r3, r2
 8006732:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	4a1a      	ldr	r2, [pc, #104]	; (80067a0 <TIM_OC6_SetConfig+0xc0>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d013      	beq.n	8006764 <TIM_OC6_SetConfig+0x84>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	4a19      	ldr	r2, [pc, #100]	; (80067a4 <TIM_OC6_SetConfig+0xc4>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d00f      	beq.n	8006764 <TIM_OC6_SetConfig+0x84>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	4a18      	ldr	r2, [pc, #96]	; (80067a8 <TIM_OC6_SetConfig+0xc8>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d00b      	beq.n	8006764 <TIM_OC6_SetConfig+0x84>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4a17      	ldr	r2, [pc, #92]	; (80067ac <TIM_OC6_SetConfig+0xcc>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d007      	beq.n	8006764 <TIM_OC6_SetConfig+0x84>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	4a16      	ldr	r2, [pc, #88]	; (80067b0 <TIM_OC6_SetConfig+0xd0>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d003      	beq.n	8006764 <TIM_OC6_SetConfig+0x84>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	4a15      	ldr	r2, [pc, #84]	; (80067b4 <TIM_OC6_SetConfig+0xd4>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d109      	bne.n	8006778 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800676a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	695b      	ldr	r3, [r3, #20]
 8006770:	029b      	lsls	r3, r3, #10
 8006772:	697a      	ldr	r2, [r7, #20]
 8006774:	4313      	orrs	r3, r2
 8006776:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	697a      	ldr	r2, [r7, #20]
 800677c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	68fa      	ldr	r2, [r7, #12]
 8006782:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	685a      	ldr	r2, [r3, #4]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	693a      	ldr	r2, [r7, #16]
 8006790:	621a      	str	r2, [r3, #32]
}
 8006792:	bf00      	nop
 8006794:	371c      	adds	r7, #28
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr
 800679e:	bf00      	nop
 80067a0:	40012c00 	.word	0x40012c00
 80067a4:	40013400 	.word	0x40013400
 80067a8:	40014000 	.word	0x40014000
 80067ac:	40014400 	.word	0x40014400
 80067b0:	40014800 	.word	0x40014800
 80067b4:	40015000 	.word	0x40015000

080067b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b087      	sub	sp, #28
 80067bc:	af00      	add	r7, sp, #0
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	60b9      	str	r1, [r7, #8]
 80067c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	f003 031f 	and.w	r3, r3, #31
 80067ca:	2201      	movs	r2, #1
 80067cc:	fa02 f303 	lsl.w	r3, r2, r3
 80067d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6a1a      	ldr	r2, [r3, #32]
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	43db      	mvns	r3, r3
 80067da:	401a      	ands	r2, r3
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6a1a      	ldr	r2, [r3, #32]
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	f003 031f 	and.w	r3, r3, #31
 80067ea:	6879      	ldr	r1, [r7, #4]
 80067ec:	fa01 f303 	lsl.w	r3, r1, r3
 80067f0:	431a      	orrs	r2, r3
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	621a      	str	r2, [r3, #32]
}
 80067f6:	bf00      	nop
 80067f8:	371c      	adds	r7, #28
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr
	...

08006804 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006804:	b480      	push	{r7}
 8006806:	b085      	sub	sp, #20
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006814:	2b01      	cmp	r3, #1
 8006816:	d101      	bne.n	800681c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006818:	2302      	movs	r3, #2
 800681a:	e06f      	b.n	80068fc <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2202      	movs	r2, #2
 8006828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a31      	ldr	r2, [pc, #196]	; (8006908 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d009      	beq.n	800685a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a30      	ldr	r2, [pc, #192]	; (800690c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d004      	beq.n	800685a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a2e      	ldr	r2, [pc, #184]	; (8006910 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d108      	bne.n	800686c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006860:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	68fa      	ldr	r2, [r7, #12]
 8006868:	4313      	orrs	r3, r2
 800686a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006876:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	68fa      	ldr	r2, [r7, #12]
 800687e:	4313      	orrs	r3, r2
 8006880:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	68fa      	ldr	r2, [r7, #12]
 8006888:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a1e      	ldr	r2, [pc, #120]	; (8006908 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d01d      	beq.n	80068d0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800689c:	d018      	beq.n	80068d0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a1c      	ldr	r2, [pc, #112]	; (8006914 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d013      	beq.n	80068d0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a1a      	ldr	r2, [pc, #104]	; (8006918 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d00e      	beq.n	80068d0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a15      	ldr	r2, [pc, #84]	; (800690c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d009      	beq.n	80068d0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a16      	ldr	r2, [pc, #88]	; (800691c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d004      	beq.n	80068d0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a11      	ldr	r2, [pc, #68]	; (8006910 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d10c      	bne.n	80068ea <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	68ba      	ldr	r2, [r7, #8]
 80068de:	4313      	orrs	r3, r2
 80068e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	68ba      	ldr	r2, [r7, #8]
 80068e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2201      	movs	r2, #1
 80068ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2200      	movs	r2, #0
 80068f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068fa:	2300      	movs	r3, #0
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3714      	adds	r7, #20
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr
 8006908:	40012c00 	.word	0x40012c00
 800690c:	40013400 	.word	0x40013400
 8006910:	40015000 	.word	0x40015000
 8006914:	40000400 	.word	0x40000400
 8006918:	40000800 	.word	0x40000800
 800691c:	40014000 	.word	0x40014000

08006920 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006920:	b480      	push	{r7}
 8006922:	b085      	sub	sp, #20
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800692a:	2300      	movs	r3, #0
 800692c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006934:	2b01      	cmp	r3, #1
 8006936:	d101      	bne.n	800693c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006938:	2302      	movs	r3, #2
 800693a:	e078      	b.n	8006a2e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2201      	movs	r2, #1
 8006940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	68db      	ldr	r3, [r3, #12]
 800694e:	4313      	orrs	r3, r2
 8006950:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	4313      	orrs	r3, r2
 800695e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	4313      	orrs	r3, r2
 800696c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4313      	orrs	r3, r2
 800697a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	691b      	ldr	r3, [r3, #16]
 8006986:	4313      	orrs	r3, r2
 8006988:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	695b      	ldr	r3, [r3, #20]
 8006994:	4313      	orrs	r3, r2
 8006996:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069a2:	4313      	orrs	r3, r2
 80069a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	699b      	ldr	r3, [r3, #24]
 80069b0:	041b      	lsls	r3, r3, #16
 80069b2:	4313      	orrs	r3, r2
 80069b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	69db      	ldr	r3, [r3, #28]
 80069c0:	4313      	orrs	r3, r2
 80069c2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a1c      	ldr	r2, [pc, #112]	; (8006a3c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d009      	beq.n	80069e2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a1b      	ldr	r2, [pc, #108]	; (8006a40 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d004      	beq.n	80069e2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a19      	ldr	r2, [pc, #100]	; (8006a44 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d11c      	bne.n	8006a1c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ec:	051b      	lsls	r3, r3, #20
 80069ee:	4313      	orrs	r3, r2
 80069f0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	6a1b      	ldr	r3, [r3, #32]
 80069fc:	4313      	orrs	r3, r2
 80069fe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	68fa      	ldr	r2, [r7, #12]
 8006a22:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2200      	movs	r2, #0
 8006a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3714      	adds	r7, #20
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr
 8006a3a:	bf00      	nop
 8006a3c:	40012c00 	.word	0x40012c00
 8006a40:	40013400 	.word	0x40013400
 8006a44:	40015000 	.word	0x40015000

08006a48 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a50:	bf00      	nop
 8006a52:	370c      	adds	r7, #12
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b083      	sub	sp, #12
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a64:	bf00      	nop
 8006a66:	370c      	adds	r7, #12
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr

08006a70 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b083      	sub	sp, #12
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006a78:	bf00      	nop
 8006a7a:	370c      	adds	r7, #12
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr

08006a84 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006a8c:	bf00      	nop
 8006a8e:	370c      	adds	r7, #12
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr

08006a98 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b083      	sub	sp, #12
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006aa0:	bf00      	nop
 8006aa2:	370c      	adds	r7, #12
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr

08006aac <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b083      	sub	sp, #12
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006ab4:	bf00      	nop
 8006ab6:	370c      	adds	r7, #12
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr

08006ac0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b083      	sub	sp, #12
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006ac8:	bf00      	nop
 8006aca:	370c      	adds	r7, #12
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr

08006ad4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b082      	sub	sp, #8
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d101      	bne.n	8006ae6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e042      	b.n	8006b6c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d106      	bne.n	8006afe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f7fb fc99 	bl	8002430 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2224      	movs	r2, #36	; 0x24
 8006b02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f022 0201 	bic.w	r2, r2, #1
 8006b14:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d002      	beq.n	8006b24 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 fe5e 	bl	80077e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f000 fb5f 	bl	80071e8 <UART_SetConfig>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d101      	bne.n	8006b34 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006b30:	2301      	movs	r3, #1
 8006b32:	e01b      	b.n	8006b6c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	685a      	ldr	r2, [r3, #4]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	689a      	ldr	r2, [r3, #8]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f042 0201 	orr.w	r2, r2, #1
 8006b62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 fedd 	bl	8007924 <UART_CheckIdleState>
 8006b6a:	4603      	mov	r3, r0
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3708      	adds	r7, #8
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b0ba      	sub	sp, #232	; 0xe8
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	69db      	ldr	r3, [r3, #28]
 8006b82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006b9a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006b9e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006ba2:	4013      	ands	r3, r2
 8006ba4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006ba8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d11b      	bne.n	8006be8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006bb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bb4:	f003 0320 	and.w	r3, r3, #32
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d015      	beq.n	8006be8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006bbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bc0:	f003 0320 	and.w	r3, r3, #32
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d105      	bne.n	8006bd4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006bc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d009      	beq.n	8006be8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	f000 82e3 	beq.w	80071a4 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	4798      	blx	r3
      }
      return;
 8006be6:	e2dd      	b.n	80071a4 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006be8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	f000 8123 	beq.w	8006e38 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006bf2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006bf6:	4b8d      	ldr	r3, [pc, #564]	; (8006e2c <HAL_UART_IRQHandler+0x2b8>)
 8006bf8:	4013      	ands	r3, r2
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d106      	bne.n	8006c0c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006bfe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006c02:	4b8b      	ldr	r3, [pc, #556]	; (8006e30 <HAL_UART_IRQHandler+0x2bc>)
 8006c04:	4013      	ands	r3, r2
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	f000 8116 	beq.w	8006e38 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006c0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c10:	f003 0301 	and.w	r3, r3, #1
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d011      	beq.n	8006c3c <HAL_UART_IRQHandler+0xc8>
 8006c18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d00b      	beq.n	8006c3c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	2201      	movs	r2, #1
 8006c2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c32:	f043 0201 	orr.w	r2, r3, #1
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c40:	f003 0302 	and.w	r3, r3, #2
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d011      	beq.n	8006c6c <HAL_UART_IRQHandler+0xf8>
 8006c48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c4c:	f003 0301 	and.w	r3, r3, #1
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d00b      	beq.n	8006c6c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	2202      	movs	r2, #2
 8006c5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c62:	f043 0204 	orr.w	r2, r3, #4
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c70:	f003 0304 	and.w	r3, r3, #4
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d011      	beq.n	8006c9c <HAL_UART_IRQHandler+0x128>
 8006c78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c7c:	f003 0301 	and.w	r3, r3, #1
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d00b      	beq.n	8006c9c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	2204      	movs	r2, #4
 8006c8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c92:	f043 0202 	orr.w	r2, r3, #2
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006c9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ca0:	f003 0308 	and.w	r3, r3, #8
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d017      	beq.n	8006cd8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006ca8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cac:	f003 0320 	and.w	r3, r3, #32
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d105      	bne.n	8006cc0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006cb4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006cb8:	4b5c      	ldr	r3, [pc, #368]	; (8006e2c <HAL_UART_IRQHandler+0x2b8>)
 8006cba:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d00b      	beq.n	8006cd8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	2208      	movs	r2, #8
 8006cc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cce:	f043 0208 	orr.w	r2, r3, #8
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006cd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d012      	beq.n	8006d0a <HAL_UART_IRQHandler+0x196>
 8006ce4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ce8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d00c      	beq.n	8006d0a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006cf8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d00:	f043 0220 	orr.w	r2, r3, #32
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	f000 8249 	beq.w	80071a8 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006d16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d1a:	f003 0320 	and.w	r3, r3, #32
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d013      	beq.n	8006d4a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006d22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d26:	f003 0320 	and.w	r3, r3, #32
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d105      	bne.n	8006d3a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006d2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d007      	beq.n	8006d4a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d003      	beq.n	8006d4a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d50:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d5e:	2b40      	cmp	r3, #64	; 0x40
 8006d60:	d005      	beq.n	8006d6e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006d62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d66:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d054      	beq.n	8006e18 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 feef 	bl	8007b52 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d7e:	2b40      	cmp	r3, #64	; 0x40
 8006d80:	d146      	bne.n	8006e10 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	3308      	adds	r3, #8
 8006d88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006d90:	e853 3f00 	ldrex	r3, [r3]
 8006d94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006d98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006da0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	3308      	adds	r3, #8
 8006daa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006dae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006db2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006dba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006dbe:	e841 2300 	strex	r3, r2, [r1]
 8006dc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006dc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d1d9      	bne.n	8006d82 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d017      	beq.n	8006e08 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006dde:	4a15      	ldr	r2, [pc, #84]	; (8006e34 <HAL_UART_IRQHandler+0x2c0>)
 8006de0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006de8:	4618      	mov	r0, r3
 8006dea:	f7fd f804 	bl	8003df6 <HAL_DMA_Abort_IT>
 8006dee:	4603      	mov	r3, r0
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d019      	beq.n	8006e28 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8006e02:	4610      	mov	r0, r2
 8006e04:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e06:	e00f      	b.n	8006e28 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 f9d7 	bl	80071bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e0e:	e00b      	b.n	8006e28 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f000 f9d3 	bl	80071bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e16:	e007      	b.n	8006e28 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 f9cf 	bl	80071bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8006e26:	e1bf      	b.n	80071a8 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e28:	bf00      	nop
    return;
 8006e2a:	e1bd      	b.n	80071a8 <HAL_UART_IRQHandler+0x634>
 8006e2c:	10000001 	.word	0x10000001
 8006e30:	04000120 	.word	0x04000120
 8006e34:	08007c1f 	.word	0x08007c1f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	f040 8153 	bne.w	80070e8 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e46:	f003 0310 	and.w	r3, r3, #16
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	f000 814c 	beq.w	80070e8 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006e50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e54:	f003 0310 	and.w	r3, r3, #16
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	f000 8145 	beq.w	80070e8 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	2210      	movs	r2, #16
 8006e64:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e70:	2b40      	cmp	r3, #64	; 0x40
 8006e72:	f040 80bb 	bne.w	8006fec <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006e84:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	f000 818f 	beq.w	80071ac <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006e94:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	f080 8187 	bcs.w	80071ac <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006ea4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f003 0320 	and.w	r3, r3, #32
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	f040 8087 	bne.w	8006fca <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006ec8:	e853 3f00 	ldrex	r3, [r3]
 8006ecc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006ed0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006ed4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ed8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006ee6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006eea:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006ef2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006ef6:	e841 2300 	strex	r3, r2, [r1]
 8006efa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006efe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d1da      	bne.n	8006ebc <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	3308      	adds	r3, #8
 8006f0c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f10:	e853 3f00 	ldrex	r3, [r3]
 8006f14:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006f16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f18:	f023 0301 	bic.w	r3, r3, #1
 8006f1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	3308      	adds	r3, #8
 8006f26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006f2a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006f2e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f30:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006f32:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006f36:	e841 2300 	strex	r3, r2, [r1]
 8006f3a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006f3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d1e1      	bne.n	8006f06 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	3308      	adds	r3, #8
 8006f48:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f4c:	e853 3f00 	ldrex	r3, [r3]
 8006f50:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006f52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	3308      	adds	r3, #8
 8006f62:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006f66:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006f68:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f6a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006f6c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006f6e:	e841 2300 	strex	r3, r2, [r1]
 8006f72:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006f74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d1e3      	bne.n	8006f42 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2220      	movs	r2, #32
 8006f7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f90:	e853 3f00 	ldrex	r3, [r3]
 8006f94:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006f96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f98:	f023 0310 	bic.w	r3, r3, #16
 8006f9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006faa:	65bb      	str	r3, [r7, #88]	; 0x58
 8006fac:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006fb0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006fb2:	e841 2300 	strex	r3, r2, [r1]
 8006fb6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006fb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d1e4      	bne.n	8006f88 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f7fc febd 	bl	8003d44 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2202      	movs	r2, #2
 8006fce:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	1ad3      	subs	r3, r2, r3
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	4619      	mov	r1, r3
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f000 f8f3 	bl	80071d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006fea:	e0df      	b.n	80071ac <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	1ad3      	subs	r3, r2, r3
 8006ffc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007006:	b29b      	uxth	r3, r3
 8007008:	2b00      	cmp	r3, #0
 800700a:	f000 80d1 	beq.w	80071b0 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800700e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007012:	2b00      	cmp	r3, #0
 8007014:	f000 80cc 	beq.w	80071b0 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800701e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007020:	e853 3f00 	ldrex	r3, [r3]
 8007024:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007028:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800702c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	461a      	mov	r2, r3
 8007036:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800703a:	647b      	str	r3, [r7, #68]	; 0x44
 800703c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800703e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007040:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007042:	e841 2300 	strex	r3, r2, [r1]
 8007046:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800704a:	2b00      	cmp	r3, #0
 800704c:	d1e4      	bne.n	8007018 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	3308      	adds	r3, #8
 8007054:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007058:	e853 3f00 	ldrex	r3, [r3]
 800705c:	623b      	str	r3, [r7, #32]
   return(result);
 800705e:	6a3b      	ldr	r3, [r7, #32]
 8007060:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007064:	f023 0301 	bic.w	r3, r3, #1
 8007068:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	3308      	adds	r3, #8
 8007072:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007076:	633a      	str	r2, [r7, #48]	; 0x30
 8007078:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800707a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800707c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800707e:	e841 2300 	strex	r3, r2, [r1]
 8007082:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007086:	2b00      	cmp	r3, #0
 8007088:	d1e1      	bne.n	800704e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2220      	movs	r2, #32
 800708e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2200      	movs	r2, #0
 800709c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	e853 3f00 	ldrex	r3, [r3]
 80070aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f023 0310 	bic.w	r3, r3, #16
 80070b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	461a      	mov	r2, r3
 80070bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80070c0:	61fb      	str	r3, [r7, #28]
 80070c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c4:	69b9      	ldr	r1, [r7, #24]
 80070c6:	69fa      	ldr	r2, [r7, #28]
 80070c8:	e841 2300 	strex	r3, r2, [r1]
 80070cc:	617b      	str	r3, [r7, #20]
   return(result);
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d1e4      	bne.n	800709e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2202      	movs	r2, #2
 80070d8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80070da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80070de:	4619      	mov	r1, r3
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f000 f875 	bl	80071d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80070e6:	e063      	b.n	80071b0 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80070e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d00e      	beq.n	8007112 <HAL_UART_IRQHandler+0x59e>
 80070f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d008      	beq.n	8007112 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007108:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 fdc8 	bl	8007ca0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007110:	e051      	b.n	80071b6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800711a:	2b00      	cmp	r3, #0
 800711c:	d014      	beq.n	8007148 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800711e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007126:	2b00      	cmp	r3, #0
 8007128:	d105      	bne.n	8007136 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800712a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800712e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007132:	2b00      	cmp	r3, #0
 8007134:	d008      	beq.n	8007148 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800713a:	2b00      	cmp	r3, #0
 800713c:	d03a      	beq.n	80071b4 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	4798      	blx	r3
    }
    return;
 8007146:	e035      	b.n	80071b4 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800714c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007150:	2b00      	cmp	r3, #0
 8007152:	d009      	beq.n	8007168 <HAL_UART_IRQHandler+0x5f4>
 8007154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800715c:	2b00      	cmp	r3, #0
 800715e:	d003      	beq.n	8007168 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f000 fd72 	bl	8007c4a <UART_EndTransmit_IT>
    return;
 8007166:	e026      	b.n	80071b6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007168:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800716c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007170:	2b00      	cmp	r3, #0
 8007172:	d009      	beq.n	8007188 <HAL_UART_IRQHandler+0x614>
 8007174:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007178:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800717c:	2b00      	cmp	r3, #0
 800717e:	d003      	beq.n	8007188 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f000 fda1 	bl	8007cc8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007186:	e016      	b.n	80071b6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007188:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800718c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007190:	2b00      	cmp	r3, #0
 8007192:	d010      	beq.n	80071b6 <HAL_UART_IRQHandler+0x642>
 8007194:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007198:	2b00      	cmp	r3, #0
 800719a:	da0c      	bge.n	80071b6 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f000 fd89 	bl	8007cb4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80071a2:	e008      	b.n	80071b6 <HAL_UART_IRQHandler+0x642>
      return;
 80071a4:	bf00      	nop
 80071a6:	e006      	b.n	80071b6 <HAL_UART_IRQHandler+0x642>
    return;
 80071a8:	bf00      	nop
 80071aa:	e004      	b.n	80071b6 <HAL_UART_IRQHandler+0x642>
      return;
 80071ac:	bf00      	nop
 80071ae:	e002      	b.n	80071b6 <HAL_UART_IRQHandler+0x642>
      return;
 80071b0:	bf00      	nop
 80071b2:	e000      	b.n	80071b6 <HAL_UART_IRQHandler+0x642>
    return;
 80071b4:	bf00      	nop
  }
}
 80071b6:	37e8      	adds	r7, #232	; 0xe8
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}

080071bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80071bc:	b480      	push	{r7}
 80071be:	b083      	sub	sp, #12
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80071c4:	bf00      	nop
 80071c6:	370c      	adds	r7, #12
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr

080071d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b083      	sub	sp, #12
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	460b      	mov	r3, r1
 80071da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80071dc:	bf00      	nop
 80071de:	370c      	adds	r7, #12
 80071e0:	46bd      	mov	sp, r7
 80071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e6:	4770      	bx	lr

080071e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071ec:	b08c      	sub	sp, #48	; 0x30
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80071f2:	2300      	movs	r3, #0
 80071f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	689a      	ldr	r2, [r3, #8]
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	691b      	ldr	r3, [r3, #16]
 8007200:	431a      	orrs	r2, r3
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	695b      	ldr	r3, [r3, #20]
 8007206:	431a      	orrs	r2, r3
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	69db      	ldr	r3, [r3, #28]
 800720c:	4313      	orrs	r3, r2
 800720e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	4baa      	ldr	r3, [pc, #680]	; (80074c0 <UART_SetConfig+0x2d8>)
 8007218:	4013      	ands	r3, r2
 800721a:	697a      	ldr	r2, [r7, #20]
 800721c:	6812      	ldr	r2, [r2, #0]
 800721e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007220:	430b      	orrs	r3, r1
 8007222:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	68da      	ldr	r2, [r3, #12]
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	430a      	orrs	r2, r1
 8007238:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	699b      	ldr	r3, [r3, #24]
 800723e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a9f      	ldr	r2, [pc, #636]	; (80074c4 <UART_SetConfig+0x2dc>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d004      	beq.n	8007254 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	6a1b      	ldr	r3, [r3, #32]
 800724e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007250:	4313      	orrs	r3, r2
 8007252:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800725e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007262:	697a      	ldr	r2, [r7, #20]
 8007264:	6812      	ldr	r2, [r2, #0]
 8007266:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007268:	430b      	orrs	r3, r1
 800726a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007272:	f023 010f 	bic.w	r1, r3, #15
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	430a      	orrs	r2, r1
 8007280:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a90      	ldr	r2, [pc, #576]	; (80074c8 <UART_SetConfig+0x2e0>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d125      	bne.n	80072d8 <UART_SetConfig+0xf0>
 800728c:	4b8f      	ldr	r3, [pc, #572]	; (80074cc <UART_SetConfig+0x2e4>)
 800728e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007292:	f003 0303 	and.w	r3, r3, #3
 8007296:	2b03      	cmp	r3, #3
 8007298:	d81a      	bhi.n	80072d0 <UART_SetConfig+0xe8>
 800729a:	a201      	add	r2, pc, #4	; (adr r2, 80072a0 <UART_SetConfig+0xb8>)
 800729c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072a0:	080072b1 	.word	0x080072b1
 80072a4:	080072c1 	.word	0x080072c1
 80072a8:	080072b9 	.word	0x080072b9
 80072ac:	080072c9 	.word	0x080072c9
 80072b0:	2301      	movs	r3, #1
 80072b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072b6:	e116      	b.n	80074e6 <UART_SetConfig+0x2fe>
 80072b8:	2302      	movs	r3, #2
 80072ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072be:	e112      	b.n	80074e6 <UART_SetConfig+0x2fe>
 80072c0:	2304      	movs	r3, #4
 80072c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072c6:	e10e      	b.n	80074e6 <UART_SetConfig+0x2fe>
 80072c8:	2308      	movs	r3, #8
 80072ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072ce:	e10a      	b.n	80074e6 <UART_SetConfig+0x2fe>
 80072d0:	2310      	movs	r3, #16
 80072d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072d6:	e106      	b.n	80074e6 <UART_SetConfig+0x2fe>
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a7c      	ldr	r2, [pc, #496]	; (80074d0 <UART_SetConfig+0x2e8>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d138      	bne.n	8007354 <UART_SetConfig+0x16c>
 80072e2:	4b7a      	ldr	r3, [pc, #488]	; (80074cc <UART_SetConfig+0x2e4>)
 80072e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072e8:	f003 030c 	and.w	r3, r3, #12
 80072ec:	2b0c      	cmp	r3, #12
 80072ee:	d82d      	bhi.n	800734c <UART_SetConfig+0x164>
 80072f0:	a201      	add	r2, pc, #4	; (adr r2, 80072f8 <UART_SetConfig+0x110>)
 80072f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072f6:	bf00      	nop
 80072f8:	0800732d 	.word	0x0800732d
 80072fc:	0800734d 	.word	0x0800734d
 8007300:	0800734d 	.word	0x0800734d
 8007304:	0800734d 	.word	0x0800734d
 8007308:	0800733d 	.word	0x0800733d
 800730c:	0800734d 	.word	0x0800734d
 8007310:	0800734d 	.word	0x0800734d
 8007314:	0800734d 	.word	0x0800734d
 8007318:	08007335 	.word	0x08007335
 800731c:	0800734d 	.word	0x0800734d
 8007320:	0800734d 	.word	0x0800734d
 8007324:	0800734d 	.word	0x0800734d
 8007328:	08007345 	.word	0x08007345
 800732c:	2300      	movs	r3, #0
 800732e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007332:	e0d8      	b.n	80074e6 <UART_SetConfig+0x2fe>
 8007334:	2302      	movs	r3, #2
 8007336:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800733a:	e0d4      	b.n	80074e6 <UART_SetConfig+0x2fe>
 800733c:	2304      	movs	r3, #4
 800733e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007342:	e0d0      	b.n	80074e6 <UART_SetConfig+0x2fe>
 8007344:	2308      	movs	r3, #8
 8007346:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800734a:	e0cc      	b.n	80074e6 <UART_SetConfig+0x2fe>
 800734c:	2310      	movs	r3, #16
 800734e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007352:	e0c8      	b.n	80074e6 <UART_SetConfig+0x2fe>
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a5e      	ldr	r2, [pc, #376]	; (80074d4 <UART_SetConfig+0x2ec>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d125      	bne.n	80073aa <UART_SetConfig+0x1c2>
 800735e:	4b5b      	ldr	r3, [pc, #364]	; (80074cc <UART_SetConfig+0x2e4>)
 8007360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007364:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007368:	2b30      	cmp	r3, #48	; 0x30
 800736a:	d016      	beq.n	800739a <UART_SetConfig+0x1b2>
 800736c:	2b30      	cmp	r3, #48	; 0x30
 800736e:	d818      	bhi.n	80073a2 <UART_SetConfig+0x1ba>
 8007370:	2b20      	cmp	r3, #32
 8007372:	d00a      	beq.n	800738a <UART_SetConfig+0x1a2>
 8007374:	2b20      	cmp	r3, #32
 8007376:	d814      	bhi.n	80073a2 <UART_SetConfig+0x1ba>
 8007378:	2b00      	cmp	r3, #0
 800737a:	d002      	beq.n	8007382 <UART_SetConfig+0x19a>
 800737c:	2b10      	cmp	r3, #16
 800737e:	d008      	beq.n	8007392 <UART_SetConfig+0x1aa>
 8007380:	e00f      	b.n	80073a2 <UART_SetConfig+0x1ba>
 8007382:	2300      	movs	r3, #0
 8007384:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007388:	e0ad      	b.n	80074e6 <UART_SetConfig+0x2fe>
 800738a:	2302      	movs	r3, #2
 800738c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007390:	e0a9      	b.n	80074e6 <UART_SetConfig+0x2fe>
 8007392:	2304      	movs	r3, #4
 8007394:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007398:	e0a5      	b.n	80074e6 <UART_SetConfig+0x2fe>
 800739a:	2308      	movs	r3, #8
 800739c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073a0:	e0a1      	b.n	80074e6 <UART_SetConfig+0x2fe>
 80073a2:	2310      	movs	r3, #16
 80073a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073a8:	e09d      	b.n	80074e6 <UART_SetConfig+0x2fe>
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a4a      	ldr	r2, [pc, #296]	; (80074d8 <UART_SetConfig+0x2f0>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d125      	bne.n	8007400 <UART_SetConfig+0x218>
 80073b4:	4b45      	ldr	r3, [pc, #276]	; (80074cc <UART_SetConfig+0x2e4>)
 80073b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80073be:	2bc0      	cmp	r3, #192	; 0xc0
 80073c0:	d016      	beq.n	80073f0 <UART_SetConfig+0x208>
 80073c2:	2bc0      	cmp	r3, #192	; 0xc0
 80073c4:	d818      	bhi.n	80073f8 <UART_SetConfig+0x210>
 80073c6:	2b80      	cmp	r3, #128	; 0x80
 80073c8:	d00a      	beq.n	80073e0 <UART_SetConfig+0x1f8>
 80073ca:	2b80      	cmp	r3, #128	; 0x80
 80073cc:	d814      	bhi.n	80073f8 <UART_SetConfig+0x210>
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d002      	beq.n	80073d8 <UART_SetConfig+0x1f0>
 80073d2:	2b40      	cmp	r3, #64	; 0x40
 80073d4:	d008      	beq.n	80073e8 <UART_SetConfig+0x200>
 80073d6:	e00f      	b.n	80073f8 <UART_SetConfig+0x210>
 80073d8:	2300      	movs	r3, #0
 80073da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073de:	e082      	b.n	80074e6 <UART_SetConfig+0x2fe>
 80073e0:	2302      	movs	r3, #2
 80073e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073e6:	e07e      	b.n	80074e6 <UART_SetConfig+0x2fe>
 80073e8:	2304      	movs	r3, #4
 80073ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073ee:	e07a      	b.n	80074e6 <UART_SetConfig+0x2fe>
 80073f0:	2308      	movs	r3, #8
 80073f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073f6:	e076      	b.n	80074e6 <UART_SetConfig+0x2fe>
 80073f8:	2310      	movs	r3, #16
 80073fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073fe:	e072      	b.n	80074e6 <UART_SetConfig+0x2fe>
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a35      	ldr	r2, [pc, #212]	; (80074dc <UART_SetConfig+0x2f4>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d12a      	bne.n	8007460 <UART_SetConfig+0x278>
 800740a:	4b30      	ldr	r3, [pc, #192]	; (80074cc <UART_SetConfig+0x2e4>)
 800740c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007410:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007414:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007418:	d01a      	beq.n	8007450 <UART_SetConfig+0x268>
 800741a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800741e:	d81b      	bhi.n	8007458 <UART_SetConfig+0x270>
 8007420:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007424:	d00c      	beq.n	8007440 <UART_SetConfig+0x258>
 8007426:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800742a:	d815      	bhi.n	8007458 <UART_SetConfig+0x270>
 800742c:	2b00      	cmp	r3, #0
 800742e:	d003      	beq.n	8007438 <UART_SetConfig+0x250>
 8007430:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007434:	d008      	beq.n	8007448 <UART_SetConfig+0x260>
 8007436:	e00f      	b.n	8007458 <UART_SetConfig+0x270>
 8007438:	2300      	movs	r3, #0
 800743a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800743e:	e052      	b.n	80074e6 <UART_SetConfig+0x2fe>
 8007440:	2302      	movs	r3, #2
 8007442:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007446:	e04e      	b.n	80074e6 <UART_SetConfig+0x2fe>
 8007448:	2304      	movs	r3, #4
 800744a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800744e:	e04a      	b.n	80074e6 <UART_SetConfig+0x2fe>
 8007450:	2308      	movs	r3, #8
 8007452:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007456:	e046      	b.n	80074e6 <UART_SetConfig+0x2fe>
 8007458:	2310      	movs	r3, #16
 800745a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800745e:	e042      	b.n	80074e6 <UART_SetConfig+0x2fe>
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a17      	ldr	r2, [pc, #92]	; (80074c4 <UART_SetConfig+0x2dc>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d13a      	bne.n	80074e0 <UART_SetConfig+0x2f8>
 800746a:	4b18      	ldr	r3, [pc, #96]	; (80074cc <UART_SetConfig+0x2e4>)
 800746c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007470:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007474:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007478:	d01a      	beq.n	80074b0 <UART_SetConfig+0x2c8>
 800747a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800747e:	d81b      	bhi.n	80074b8 <UART_SetConfig+0x2d0>
 8007480:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007484:	d00c      	beq.n	80074a0 <UART_SetConfig+0x2b8>
 8007486:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800748a:	d815      	bhi.n	80074b8 <UART_SetConfig+0x2d0>
 800748c:	2b00      	cmp	r3, #0
 800748e:	d003      	beq.n	8007498 <UART_SetConfig+0x2b0>
 8007490:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007494:	d008      	beq.n	80074a8 <UART_SetConfig+0x2c0>
 8007496:	e00f      	b.n	80074b8 <UART_SetConfig+0x2d0>
 8007498:	2300      	movs	r3, #0
 800749a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800749e:	e022      	b.n	80074e6 <UART_SetConfig+0x2fe>
 80074a0:	2302      	movs	r3, #2
 80074a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074a6:	e01e      	b.n	80074e6 <UART_SetConfig+0x2fe>
 80074a8:	2304      	movs	r3, #4
 80074aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074ae:	e01a      	b.n	80074e6 <UART_SetConfig+0x2fe>
 80074b0:	2308      	movs	r3, #8
 80074b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074b6:	e016      	b.n	80074e6 <UART_SetConfig+0x2fe>
 80074b8:	2310      	movs	r3, #16
 80074ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074be:	e012      	b.n	80074e6 <UART_SetConfig+0x2fe>
 80074c0:	cfff69f3 	.word	0xcfff69f3
 80074c4:	40008000 	.word	0x40008000
 80074c8:	40013800 	.word	0x40013800
 80074cc:	40021000 	.word	0x40021000
 80074d0:	40004400 	.word	0x40004400
 80074d4:	40004800 	.word	0x40004800
 80074d8:	40004c00 	.word	0x40004c00
 80074dc:	40005000 	.word	0x40005000
 80074e0:	2310      	movs	r3, #16
 80074e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4aae      	ldr	r2, [pc, #696]	; (80077a4 <UART_SetConfig+0x5bc>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	f040 8097 	bne.w	8007620 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80074f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80074f6:	2b08      	cmp	r3, #8
 80074f8:	d823      	bhi.n	8007542 <UART_SetConfig+0x35a>
 80074fa:	a201      	add	r2, pc, #4	; (adr r2, 8007500 <UART_SetConfig+0x318>)
 80074fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007500:	08007525 	.word	0x08007525
 8007504:	08007543 	.word	0x08007543
 8007508:	0800752d 	.word	0x0800752d
 800750c:	08007543 	.word	0x08007543
 8007510:	08007533 	.word	0x08007533
 8007514:	08007543 	.word	0x08007543
 8007518:	08007543 	.word	0x08007543
 800751c:	08007543 	.word	0x08007543
 8007520:	0800753b 	.word	0x0800753b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007524:	f7fd fcda 	bl	8004edc <HAL_RCC_GetPCLK1Freq>
 8007528:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800752a:	e010      	b.n	800754e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800752c:	4b9e      	ldr	r3, [pc, #632]	; (80077a8 <UART_SetConfig+0x5c0>)
 800752e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007530:	e00d      	b.n	800754e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007532:	f7fd fc65 	bl	8004e00 <HAL_RCC_GetSysClockFreq>
 8007536:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007538:	e009      	b.n	800754e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800753a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800753e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007540:	e005      	b.n	800754e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007542:	2300      	movs	r3, #0
 8007544:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007546:	2301      	movs	r3, #1
 8007548:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800754c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800754e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007550:	2b00      	cmp	r3, #0
 8007552:	f000 8130 	beq.w	80077b6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800755a:	4a94      	ldr	r2, [pc, #592]	; (80077ac <UART_SetConfig+0x5c4>)
 800755c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007560:	461a      	mov	r2, r3
 8007562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007564:	fbb3 f3f2 	udiv	r3, r3, r2
 8007568:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	685a      	ldr	r2, [r3, #4]
 800756e:	4613      	mov	r3, r2
 8007570:	005b      	lsls	r3, r3, #1
 8007572:	4413      	add	r3, r2
 8007574:	69ba      	ldr	r2, [r7, #24]
 8007576:	429a      	cmp	r2, r3
 8007578:	d305      	bcc.n	8007586 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007580:	69ba      	ldr	r2, [r7, #24]
 8007582:	429a      	cmp	r2, r3
 8007584:	d903      	bls.n	800758e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007586:	2301      	movs	r3, #1
 8007588:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800758c:	e113      	b.n	80077b6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800758e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007590:	2200      	movs	r2, #0
 8007592:	60bb      	str	r3, [r7, #8]
 8007594:	60fa      	str	r2, [r7, #12]
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800759a:	4a84      	ldr	r2, [pc, #528]	; (80077ac <UART_SetConfig+0x5c4>)
 800759c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	2200      	movs	r2, #0
 80075a4:	603b      	str	r3, [r7, #0]
 80075a6:	607a      	str	r2, [r7, #4]
 80075a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80075b0:	f7f9 f876 	bl	80006a0 <__aeabi_uldivmod>
 80075b4:	4602      	mov	r2, r0
 80075b6:	460b      	mov	r3, r1
 80075b8:	4610      	mov	r0, r2
 80075ba:	4619      	mov	r1, r3
 80075bc:	f04f 0200 	mov.w	r2, #0
 80075c0:	f04f 0300 	mov.w	r3, #0
 80075c4:	020b      	lsls	r3, r1, #8
 80075c6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80075ca:	0202      	lsls	r2, r0, #8
 80075cc:	6979      	ldr	r1, [r7, #20]
 80075ce:	6849      	ldr	r1, [r1, #4]
 80075d0:	0849      	lsrs	r1, r1, #1
 80075d2:	2000      	movs	r0, #0
 80075d4:	460c      	mov	r4, r1
 80075d6:	4605      	mov	r5, r0
 80075d8:	eb12 0804 	adds.w	r8, r2, r4
 80075dc:	eb43 0905 	adc.w	r9, r3, r5
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	2200      	movs	r2, #0
 80075e6:	469a      	mov	sl, r3
 80075e8:	4693      	mov	fp, r2
 80075ea:	4652      	mov	r2, sl
 80075ec:	465b      	mov	r3, fp
 80075ee:	4640      	mov	r0, r8
 80075f0:	4649      	mov	r1, r9
 80075f2:	f7f9 f855 	bl	80006a0 <__aeabi_uldivmod>
 80075f6:	4602      	mov	r2, r0
 80075f8:	460b      	mov	r3, r1
 80075fa:	4613      	mov	r3, r2
 80075fc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80075fe:	6a3b      	ldr	r3, [r7, #32]
 8007600:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007604:	d308      	bcc.n	8007618 <UART_SetConfig+0x430>
 8007606:	6a3b      	ldr	r3, [r7, #32]
 8007608:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800760c:	d204      	bcs.n	8007618 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	6a3a      	ldr	r2, [r7, #32]
 8007614:	60da      	str	r2, [r3, #12]
 8007616:	e0ce      	b.n	80077b6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007618:	2301      	movs	r3, #1
 800761a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800761e:	e0ca      	b.n	80077b6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	69db      	ldr	r3, [r3, #28]
 8007624:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007628:	d166      	bne.n	80076f8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800762a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800762e:	2b08      	cmp	r3, #8
 8007630:	d827      	bhi.n	8007682 <UART_SetConfig+0x49a>
 8007632:	a201      	add	r2, pc, #4	; (adr r2, 8007638 <UART_SetConfig+0x450>)
 8007634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007638:	0800765d 	.word	0x0800765d
 800763c:	08007665 	.word	0x08007665
 8007640:	0800766d 	.word	0x0800766d
 8007644:	08007683 	.word	0x08007683
 8007648:	08007673 	.word	0x08007673
 800764c:	08007683 	.word	0x08007683
 8007650:	08007683 	.word	0x08007683
 8007654:	08007683 	.word	0x08007683
 8007658:	0800767b 	.word	0x0800767b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800765c:	f7fd fc3e 	bl	8004edc <HAL_RCC_GetPCLK1Freq>
 8007660:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007662:	e014      	b.n	800768e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007664:	f7fd fc50 	bl	8004f08 <HAL_RCC_GetPCLK2Freq>
 8007668:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800766a:	e010      	b.n	800768e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800766c:	4b4e      	ldr	r3, [pc, #312]	; (80077a8 <UART_SetConfig+0x5c0>)
 800766e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007670:	e00d      	b.n	800768e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007672:	f7fd fbc5 	bl	8004e00 <HAL_RCC_GetSysClockFreq>
 8007676:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007678:	e009      	b.n	800768e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800767a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800767e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007680:	e005      	b.n	800768e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007682:	2300      	movs	r3, #0
 8007684:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007686:	2301      	movs	r3, #1
 8007688:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800768c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800768e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007690:	2b00      	cmp	r3, #0
 8007692:	f000 8090 	beq.w	80077b6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800769a:	4a44      	ldr	r2, [pc, #272]	; (80077ac <UART_SetConfig+0x5c4>)
 800769c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076a0:	461a      	mov	r2, r3
 80076a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80076a8:	005a      	lsls	r2, r3, #1
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	085b      	lsrs	r3, r3, #1
 80076b0:	441a      	add	r2, r3
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80076ba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076bc:	6a3b      	ldr	r3, [r7, #32]
 80076be:	2b0f      	cmp	r3, #15
 80076c0:	d916      	bls.n	80076f0 <UART_SetConfig+0x508>
 80076c2:	6a3b      	ldr	r3, [r7, #32]
 80076c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076c8:	d212      	bcs.n	80076f0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80076ca:	6a3b      	ldr	r3, [r7, #32]
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	f023 030f 	bic.w	r3, r3, #15
 80076d2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80076d4:	6a3b      	ldr	r3, [r7, #32]
 80076d6:	085b      	lsrs	r3, r3, #1
 80076d8:	b29b      	uxth	r3, r3
 80076da:	f003 0307 	and.w	r3, r3, #7
 80076de:	b29a      	uxth	r2, r3
 80076e0:	8bfb      	ldrh	r3, [r7, #30]
 80076e2:	4313      	orrs	r3, r2
 80076e4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	8bfa      	ldrh	r2, [r7, #30]
 80076ec:	60da      	str	r2, [r3, #12]
 80076ee:	e062      	b.n	80077b6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80076f0:	2301      	movs	r3, #1
 80076f2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80076f6:	e05e      	b.n	80077b6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80076f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80076fc:	2b08      	cmp	r3, #8
 80076fe:	d828      	bhi.n	8007752 <UART_SetConfig+0x56a>
 8007700:	a201      	add	r2, pc, #4	; (adr r2, 8007708 <UART_SetConfig+0x520>)
 8007702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007706:	bf00      	nop
 8007708:	0800772d 	.word	0x0800772d
 800770c:	08007735 	.word	0x08007735
 8007710:	0800773d 	.word	0x0800773d
 8007714:	08007753 	.word	0x08007753
 8007718:	08007743 	.word	0x08007743
 800771c:	08007753 	.word	0x08007753
 8007720:	08007753 	.word	0x08007753
 8007724:	08007753 	.word	0x08007753
 8007728:	0800774b 	.word	0x0800774b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800772c:	f7fd fbd6 	bl	8004edc <HAL_RCC_GetPCLK1Freq>
 8007730:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007732:	e014      	b.n	800775e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007734:	f7fd fbe8 	bl	8004f08 <HAL_RCC_GetPCLK2Freq>
 8007738:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800773a:	e010      	b.n	800775e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800773c:	4b1a      	ldr	r3, [pc, #104]	; (80077a8 <UART_SetConfig+0x5c0>)
 800773e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007740:	e00d      	b.n	800775e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007742:	f7fd fb5d 	bl	8004e00 <HAL_RCC_GetSysClockFreq>
 8007746:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007748:	e009      	b.n	800775e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800774a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800774e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007750:	e005      	b.n	800775e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007752:	2300      	movs	r3, #0
 8007754:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007756:	2301      	movs	r3, #1
 8007758:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800775c:	bf00      	nop
    }

    if (pclk != 0U)
 800775e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007760:	2b00      	cmp	r3, #0
 8007762:	d028      	beq.n	80077b6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007768:	4a10      	ldr	r2, [pc, #64]	; (80077ac <UART_SetConfig+0x5c4>)
 800776a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800776e:	461a      	mov	r2, r3
 8007770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007772:	fbb3 f2f2 	udiv	r2, r3, r2
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	085b      	lsrs	r3, r3, #1
 800777c:	441a      	add	r2, r3
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	fbb2 f3f3 	udiv	r3, r2, r3
 8007786:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007788:	6a3b      	ldr	r3, [r7, #32]
 800778a:	2b0f      	cmp	r3, #15
 800778c:	d910      	bls.n	80077b0 <UART_SetConfig+0x5c8>
 800778e:	6a3b      	ldr	r3, [r7, #32]
 8007790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007794:	d20c      	bcs.n	80077b0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007796:	6a3b      	ldr	r3, [r7, #32]
 8007798:	b29a      	uxth	r2, r3
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	60da      	str	r2, [r3, #12]
 80077a0:	e009      	b.n	80077b6 <UART_SetConfig+0x5ce>
 80077a2:	bf00      	nop
 80077a4:	40008000 	.word	0x40008000
 80077a8:	00f42400 	.word	0x00f42400
 80077ac:	08007f6c 	.word	0x08007f6c
      }
      else
      {
        ret = HAL_ERROR;
 80077b0:	2301      	movs	r3, #1
 80077b2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	2201      	movs	r2, #1
 80077ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	2201      	movs	r2, #1
 80077c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	2200      	movs	r2, #0
 80077ca:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	2200      	movs	r2, #0
 80077d0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80077d2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3730      	adds	r7, #48	; 0x30
 80077da:	46bd      	mov	sp, r7
 80077dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080077e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b083      	sub	sp, #12
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ec:	f003 0308 	and.w	r3, r3, #8
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d00a      	beq.n	800780a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	430a      	orrs	r2, r1
 8007808:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800780e:	f003 0301 	and.w	r3, r3, #1
 8007812:	2b00      	cmp	r3, #0
 8007814:	d00a      	beq.n	800782c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	430a      	orrs	r2, r1
 800782a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007830:	f003 0302 	and.w	r3, r3, #2
 8007834:	2b00      	cmp	r3, #0
 8007836:	d00a      	beq.n	800784e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	430a      	orrs	r2, r1
 800784c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007852:	f003 0304 	and.w	r3, r3, #4
 8007856:	2b00      	cmp	r3, #0
 8007858:	d00a      	beq.n	8007870 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	685b      	ldr	r3, [r3, #4]
 8007860:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	430a      	orrs	r2, r1
 800786e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007874:	f003 0310 	and.w	r3, r3, #16
 8007878:	2b00      	cmp	r3, #0
 800787a:	d00a      	beq.n	8007892 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	689b      	ldr	r3, [r3, #8]
 8007882:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	430a      	orrs	r2, r1
 8007890:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007896:	f003 0320 	and.w	r3, r3, #32
 800789a:	2b00      	cmp	r3, #0
 800789c:	d00a      	beq.n	80078b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	689b      	ldr	r3, [r3, #8]
 80078a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	430a      	orrs	r2, r1
 80078b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d01a      	beq.n	80078f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	430a      	orrs	r2, r1
 80078d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078de:	d10a      	bne.n	80078f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	430a      	orrs	r2, r1
 80078f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d00a      	beq.n	8007918 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	430a      	orrs	r2, r1
 8007916:	605a      	str	r2, [r3, #4]
  }
}
 8007918:	bf00      	nop
 800791a:	370c      	adds	r7, #12
 800791c:	46bd      	mov	sp, r7
 800791e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007922:	4770      	bx	lr

08007924 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b098      	sub	sp, #96	; 0x60
 8007928:	af02      	add	r7, sp, #8
 800792a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2200      	movs	r2, #0
 8007930:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007934:	f7fa ff84 	bl	8002840 <HAL_GetTick>
 8007938:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f003 0308 	and.w	r3, r3, #8
 8007944:	2b08      	cmp	r3, #8
 8007946:	d12f      	bne.n	80079a8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007948:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800794c:	9300      	str	r3, [sp, #0]
 800794e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007950:	2200      	movs	r2, #0
 8007952:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 f88e 	bl	8007a78 <UART_WaitOnFlagUntilTimeout>
 800795c:	4603      	mov	r3, r0
 800795e:	2b00      	cmp	r3, #0
 8007960:	d022      	beq.n	80079a8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800796a:	e853 3f00 	ldrex	r3, [r3]
 800796e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007972:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007976:	653b      	str	r3, [r7, #80]	; 0x50
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	461a      	mov	r2, r3
 800797e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007980:	647b      	str	r3, [r7, #68]	; 0x44
 8007982:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007984:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007986:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007988:	e841 2300 	strex	r3, r2, [r1]
 800798c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800798e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007990:	2b00      	cmp	r3, #0
 8007992:	d1e6      	bne.n	8007962 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2220      	movs	r2, #32
 8007998:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2200      	movs	r2, #0
 80079a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079a4:	2303      	movs	r3, #3
 80079a6:	e063      	b.n	8007a70 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f003 0304 	and.w	r3, r3, #4
 80079b2:	2b04      	cmp	r3, #4
 80079b4:	d149      	bne.n	8007a4a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079b6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80079ba:	9300      	str	r3, [sp, #0]
 80079bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079be:	2200      	movs	r2, #0
 80079c0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f000 f857 	bl	8007a78 <UART_WaitOnFlagUntilTimeout>
 80079ca:	4603      	mov	r3, r0
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d03c      	beq.n	8007a4a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d8:	e853 3f00 	ldrex	r3, [r3]
 80079dc:	623b      	str	r3, [r7, #32]
   return(result);
 80079de:	6a3b      	ldr	r3, [r7, #32]
 80079e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80079e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	461a      	mov	r2, r3
 80079ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079ee:	633b      	str	r3, [r7, #48]	; 0x30
 80079f0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079f6:	e841 2300 	strex	r3, r2, [r1]
 80079fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80079fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d1e6      	bne.n	80079d0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	3308      	adds	r3, #8
 8007a08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	e853 3f00 	ldrex	r3, [r3]
 8007a10:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	f023 0301 	bic.w	r3, r3, #1
 8007a18:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	3308      	adds	r3, #8
 8007a20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a22:	61fa      	str	r2, [r7, #28]
 8007a24:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a26:	69b9      	ldr	r1, [r7, #24]
 8007a28:	69fa      	ldr	r2, [r7, #28]
 8007a2a:	e841 2300 	strex	r3, r2, [r1]
 8007a2e:	617b      	str	r3, [r7, #20]
   return(result);
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d1e5      	bne.n	8007a02 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2220      	movs	r2, #32
 8007a3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2200      	movs	r2, #0
 8007a42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a46:	2303      	movs	r3, #3
 8007a48:	e012      	b.n	8007a70 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2220      	movs	r2, #32
 8007a4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2220      	movs	r2, #32
 8007a56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2200      	movs	r2, #0
 8007a64:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007a6e:	2300      	movs	r3, #0
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3758      	adds	r7, #88	; 0x58
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b084      	sub	sp, #16
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	60f8      	str	r0, [r7, #12]
 8007a80:	60b9      	str	r1, [r7, #8]
 8007a82:	603b      	str	r3, [r7, #0]
 8007a84:	4613      	mov	r3, r2
 8007a86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a88:	e04f      	b.n	8007b2a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a8a:	69bb      	ldr	r3, [r7, #24]
 8007a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a90:	d04b      	beq.n	8007b2a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a92:	f7fa fed5 	bl	8002840 <HAL_GetTick>
 8007a96:	4602      	mov	r2, r0
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	1ad3      	subs	r3, r2, r3
 8007a9c:	69ba      	ldr	r2, [r7, #24]
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	d302      	bcc.n	8007aa8 <UART_WaitOnFlagUntilTimeout+0x30>
 8007aa2:	69bb      	ldr	r3, [r7, #24]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d101      	bne.n	8007aac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007aa8:	2303      	movs	r3, #3
 8007aaa:	e04e      	b.n	8007b4a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f003 0304 	and.w	r3, r3, #4
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d037      	beq.n	8007b2a <UART_WaitOnFlagUntilTimeout+0xb2>
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	2b80      	cmp	r3, #128	; 0x80
 8007abe:	d034      	beq.n	8007b2a <UART_WaitOnFlagUntilTimeout+0xb2>
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	2b40      	cmp	r3, #64	; 0x40
 8007ac4:	d031      	beq.n	8007b2a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	69db      	ldr	r3, [r3, #28]
 8007acc:	f003 0308 	and.w	r3, r3, #8
 8007ad0:	2b08      	cmp	r3, #8
 8007ad2:	d110      	bne.n	8007af6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	2208      	movs	r2, #8
 8007ada:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007adc:	68f8      	ldr	r0, [r7, #12]
 8007ade:	f000 f838 	bl	8007b52 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2208      	movs	r2, #8
 8007ae6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2200      	movs	r2, #0
 8007aee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8007af2:	2301      	movs	r3, #1
 8007af4:	e029      	b.n	8007b4a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	69db      	ldr	r3, [r3, #28]
 8007afc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b04:	d111      	bne.n	8007b2a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007b10:	68f8      	ldr	r0, [r7, #12]
 8007b12:	f000 f81e 	bl	8007b52 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2220      	movs	r2, #32
 8007b1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2200      	movs	r2, #0
 8007b22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007b26:	2303      	movs	r3, #3
 8007b28:	e00f      	b.n	8007b4a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	69da      	ldr	r2, [r3, #28]
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	4013      	ands	r3, r2
 8007b34:	68ba      	ldr	r2, [r7, #8]
 8007b36:	429a      	cmp	r2, r3
 8007b38:	bf0c      	ite	eq
 8007b3a:	2301      	moveq	r3, #1
 8007b3c:	2300      	movne	r3, #0
 8007b3e:	b2db      	uxtb	r3, r3
 8007b40:	461a      	mov	r2, r3
 8007b42:	79fb      	ldrb	r3, [r7, #7]
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d0a0      	beq.n	8007a8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b48:	2300      	movs	r3, #0
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3710      	adds	r7, #16
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}

08007b52 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b52:	b480      	push	{r7}
 8007b54:	b095      	sub	sp, #84	; 0x54
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b62:	e853 3f00 	ldrex	r3, [r3]
 8007b66:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b6a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	461a      	mov	r2, r3
 8007b76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b78:	643b      	str	r3, [r7, #64]	; 0x40
 8007b7a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b7c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007b7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007b80:	e841 2300 	strex	r3, r2, [r1]
 8007b84:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d1e6      	bne.n	8007b5a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	3308      	adds	r3, #8
 8007b92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b94:	6a3b      	ldr	r3, [r7, #32]
 8007b96:	e853 3f00 	ldrex	r3, [r3]
 8007b9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b9c:	69fb      	ldr	r3, [r7, #28]
 8007b9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ba2:	f023 0301 	bic.w	r3, r3, #1
 8007ba6:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	3308      	adds	r3, #8
 8007bae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007bb0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007bb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007bb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bb8:	e841 2300 	strex	r3, r2, [r1]
 8007bbc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d1e3      	bne.n	8007b8c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	d118      	bne.n	8007bfe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	e853 3f00 	ldrex	r3, [r3]
 8007bd8:	60bb      	str	r3, [r7, #8]
   return(result);
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	f023 0310 	bic.w	r3, r3, #16
 8007be0:	647b      	str	r3, [r7, #68]	; 0x44
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	461a      	mov	r2, r3
 8007be8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bea:	61bb      	str	r3, [r7, #24]
 8007bec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bee:	6979      	ldr	r1, [r7, #20]
 8007bf0:	69ba      	ldr	r2, [r7, #24]
 8007bf2:	e841 2300 	strex	r3, r2, [r1]
 8007bf6:	613b      	str	r3, [r7, #16]
   return(result);
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d1e6      	bne.n	8007bcc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2220      	movs	r2, #32
 8007c02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007c12:	bf00      	nop
 8007c14:	3754      	adds	r7, #84	; 0x54
 8007c16:	46bd      	mov	sp, r7
 8007c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1c:	4770      	bx	lr

08007c1e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007c1e:	b580      	push	{r7, lr}
 8007c20:	b084      	sub	sp, #16
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c2a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	2200      	movs	r2, #0
 8007c38:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c3c:	68f8      	ldr	r0, [r7, #12]
 8007c3e:	f7ff fabd 	bl	80071bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c42:	bf00      	nop
 8007c44:	3710      	adds	r7, #16
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}

08007c4a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007c4a:	b580      	push	{r7, lr}
 8007c4c:	b088      	sub	sp, #32
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	e853 3f00 	ldrex	r3, [r3]
 8007c5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c66:	61fb      	str	r3, [r7, #28]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	461a      	mov	r2, r3
 8007c6e:	69fb      	ldr	r3, [r7, #28]
 8007c70:	61bb      	str	r3, [r7, #24]
 8007c72:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c74:	6979      	ldr	r1, [r7, #20]
 8007c76:	69ba      	ldr	r2, [r7, #24]
 8007c78:	e841 2300 	strex	r3, r2, [r1]
 8007c7c:	613b      	str	r3, [r7, #16]
   return(result);
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d1e6      	bne.n	8007c52 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2220      	movs	r2, #32
 8007c88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f7f9 fcca 	bl	800162c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c98:	bf00      	nop
 8007c9a:	3720      	adds	r7, #32
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}

08007ca0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b083      	sub	sp, #12
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007ca8:	bf00      	nop
 8007caa:	370c      	adds	r7, #12
 8007cac:	46bd      	mov	sp, r7
 8007cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb2:	4770      	bx	lr

08007cb4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b083      	sub	sp, #12
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007cbc:	bf00      	nop
 8007cbe:	370c      	adds	r7, #12
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr

08007cc8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b083      	sub	sp, #12
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007cd0:	bf00      	nop
 8007cd2:	370c      	adds	r7, #12
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr

08007cdc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b085      	sub	sp, #20
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007cea:	2b01      	cmp	r3, #1
 8007cec:	d101      	bne.n	8007cf2 <HAL_UARTEx_DisableFifoMode+0x16>
 8007cee:	2302      	movs	r3, #2
 8007cf0:	e027      	b.n	8007d42 <HAL_UARTEx_DisableFifoMode+0x66>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2224      	movs	r2, #36	; 0x24
 8007cfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	681a      	ldr	r2, [r3, #0]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f022 0201 	bic.w	r2, r2, #1
 8007d18:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007d20:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2200      	movs	r2, #0
 8007d26:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	68fa      	ldr	r2, [r7, #12]
 8007d2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2220      	movs	r2, #32
 8007d34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007d40:	2300      	movs	r3, #0
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3714      	adds	r7, #20
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr

08007d4e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007d4e:	b580      	push	{r7, lr}
 8007d50:	b084      	sub	sp, #16
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	6078      	str	r0, [r7, #4]
 8007d56:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007d5e:	2b01      	cmp	r3, #1
 8007d60:	d101      	bne.n	8007d66 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007d62:	2302      	movs	r3, #2
 8007d64:	e02d      	b.n	8007dc2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2201      	movs	r2, #1
 8007d6a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2224      	movs	r2, #36	; 0x24
 8007d72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	681a      	ldr	r2, [r3, #0]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f022 0201 	bic.w	r2, r2, #1
 8007d8c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	689b      	ldr	r3, [r3, #8]
 8007d94:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	683a      	ldr	r2, [r7, #0]
 8007d9e:	430a      	orrs	r2, r1
 8007da0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 f850 	bl	8007e48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	68fa      	ldr	r2, [r7, #12]
 8007dae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2220      	movs	r2, #32
 8007db4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007dc0:	2300      	movs	r3, #0
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3710      	adds	r7, #16
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}

08007dca <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007dca:	b580      	push	{r7, lr}
 8007dcc:	b084      	sub	sp, #16
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	6078      	str	r0, [r7, #4]
 8007dd2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007dda:	2b01      	cmp	r3, #1
 8007ddc:	d101      	bne.n	8007de2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007dde:	2302      	movs	r3, #2
 8007de0:	e02d      	b.n	8007e3e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2201      	movs	r2, #1
 8007de6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2224      	movs	r2, #36	; 0x24
 8007dee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	681a      	ldr	r2, [r3, #0]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f022 0201 	bic.w	r2, r2, #1
 8007e08:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	683a      	ldr	r2, [r7, #0]
 8007e1a:	430a      	orrs	r2, r1
 8007e1c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f000 f812 	bl	8007e48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	68fa      	ldr	r2, [r7, #12]
 8007e2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2220      	movs	r2, #32
 8007e30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2200      	movs	r2, #0
 8007e38:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007e3c:	2300      	movs	r3, #0
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3710      	adds	r7, #16
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}
	...

08007e48 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b085      	sub	sp, #20
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d108      	bne.n	8007e6a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2201      	movs	r2, #1
 8007e64:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007e68:	e031      	b.n	8007ece <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007e6a:	2308      	movs	r3, #8
 8007e6c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007e6e:	2308      	movs	r3, #8
 8007e70:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	689b      	ldr	r3, [r3, #8]
 8007e78:	0e5b      	lsrs	r3, r3, #25
 8007e7a:	b2db      	uxtb	r3, r3
 8007e7c:	f003 0307 	and.w	r3, r3, #7
 8007e80:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	689b      	ldr	r3, [r3, #8]
 8007e88:	0f5b      	lsrs	r3, r3, #29
 8007e8a:	b2db      	uxtb	r3, r3
 8007e8c:	f003 0307 	and.w	r3, r3, #7
 8007e90:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007e92:	7bbb      	ldrb	r3, [r7, #14]
 8007e94:	7b3a      	ldrb	r2, [r7, #12]
 8007e96:	4911      	ldr	r1, [pc, #68]	; (8007edc <UARTEx_SetNbDataToProcess+0x94>)
 8007e98:	5c8a      	ldrb	r2, [r1, r2]
 8007e9a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007e9e:	7b3a      	ldrb	r2, [r7, #12]
 8007ea0:	490f      	ldr	r1, [pc, #60]	; (8007ee0 <UARTEx_SetNbDataToProcess+0x98>)
 8007ea2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ea4:	fb93 f3f2 	sdiv	r3, r3, r2
 8007ea8:	b29a      	uxth	r2, r3
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007eb0:	7bfb      	ldrb	r3, [r7, #15]
 8007eb2:	7b7a      	ldrb	r2, [r7, #13]
 8007eb4:	4909      	ldr	r1, [pc, #36]	; (8007edc <UARTEx_SetNbDataToProcess+0x94>)
 8007eb6:	5c8a      	ldrb	r2, [r1, r2]
 8007eb8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007ebc:	7b7a      	ldrb	r2, [r7, #13]
 8007ebe:	4908      	ldr	r1, [pc, #32]	; (8007ee0 <UARTEx_SetNbDataToProcess+0x98>)
 8007ec0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007ec2:	fb93 f3f2 	sdiv	r3, r3, r2
 8007ec6:	b29a      	uxth	r2, r3
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007ece:	bf00      	nop
 8007ed0:	3714      	adds	r7, #20
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed8:	4770      	bx	lr
 8007eda:	bf00      	nop
 8007edc:	08007f84 	.word	0x08007f84
 8007ee0:	08007f8c 	.word	0x08007f8c

08007ee4 <__libc_init_array>:
 8007ee4:	b570      	push	{r4, r5, r6, lr}
 8007ee6:	4d0d      	ldr	r5, [pc, #52]	; (8007f1c <__libc_init_array+0x38>)
 8007ee8:	4c0d      	ldr	r4, [pc, #52]	; (8007f20 <__libc_init_array+0x3c>)
 8007eea:	1b64      	subs	r4, r4, r5
 8007eec:	10a4      	asrs	r4, r4, #2
 8007eee:	2600      	movs	r6, #0
 8007ef0:	42a6      	cmp	r6, r4
 8007ef2:	d109      	bne.n	8007f08 <__libc_init_array+0x24>
 8007ef4:	4d0b      	ldr	r5, [pc, #44]	; (8007f24 <__libc_init_array+0x40>)
 8007ef6:	4c0c      	ldr	r4, [pc, #48]	; (8007f28 <__libc_init_array+0x44>)
 8007ef8:	f000 f820 	bl	8007f3c <_init>
 8007efc:	1b64      	subs	r4, r4, r5
 8007efe:	10a4      	asrs	r4, r4, #2
 8007f00:	2600      	movs	r6, #0
 8007f02:	42a6      	cmp	r6, r4
 8007f04:	d105      	bne.n	8007f12 <__libc_init_array+0x2e>
 8007f06:	bd70      	pop	{r4, r5, r6, pc}
 8007f08:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f0c:	4798      	blx	r3
 8007f0e:	3601      	adds	r6, #1
 8007f10:	e7ee      	b.n	8007ef0 <__libc_init_array+0xc>
 8007f12:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f16:	4798      	blx	r3
 8007f18:	3601      	adds	r6, #1
 8007f1a:	e7f2      	b.n	8007f02 <__libc_init_array+0x1e>
 8007f1c:	08007f9c 	.word	0x08007f9c
 8007f20:	08007f9c 	.word	0x08007f9c
 8007f24:	08007f9c 	.word	0x08007f9c
 8007f28:	08007fa4 	.word	0x08007fa4

08007f2c <memset>:
 8007f2c:	4402      	add	r2, r0
 8007f2e:	4603      	mov	r3, r0
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d100      	bne.n	8007f36 <memset+0xa>
 8007f34:	4770      	bx	lr
 8007f36:	f803 1b01 	strb.w	r1, [r3], #1
 8007f3a:	e7f9      	b.n	8007f30 <memset+0x4>

08007f3c <_init>:
 8007f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f3e:	bf00      	nop
 8007f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f42:	bc08      	pop	{r3}
 8007f44:	469e      	mov	lr, r3
 8007f46:	4770      	bx	lr

08007f48 <_fini>:
 8007f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f4a:	bf00      	nop
 8007f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f4e:	bc08      	pop	{r3}
 8007f50:	469e      	mov	lr, r3
 8007f52:	4770      	bx	lr
