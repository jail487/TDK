
path.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c4c  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08006e24  08006e24  00016e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e64  08006e64  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006e64  08006e64  00016e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e6c  08006e6c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e6c  08006e6c  00016e6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e70  08006e70  00016e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006e74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e0  2000000c  08006e80  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ec  08006e80  000202ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ae88  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000306f  00000000  00000000  0003aec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014e8  00000000  00000000  0003df38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013d0  00000000  00000000  0003f420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023a70  00000000  00000000  000407f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000187f4  00000000  00000000  00064260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e462a  00000000  00000000  0007ca54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016107e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ac0  00000000  00000000  001610d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006e0c 	.word	0x08006e0c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08006e0c 	.word	0x08006e0c

08000218 <__aeabi_dmul>:
 8000218:	b570      	push	{r4, r5, r6, lr}
 800021a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800021e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000222:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000226:	bf1d      	ittte	ne
 8000228:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800022c:	ea94 0f0c 	teqne	r4, ip
 8000230:	ea95 0f0c 	teqne	r5, ip
 8000234:	f000 f8de 	bleq	80003f4 <__aeabi_dmul+0x1dc>
 8000238:	442c      	add	r4, r5
 800023a:	ea81 0603 	eor.w	r6, r1, r3
 800023e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000242:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000246:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800024a:	bf18      	it	ne
 800024c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000250:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000254:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000258:	d038      	beq.n	80002cc <__aeabi_dmul+0xb4>
 800025a:	fba0 ce02 	umull	ip, lr, r0, r2
 800025e:	f04f 0500 	mov.w	r5, #0
 8000262:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000266:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800026a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800026e:	f04f 0600 	mov.w	r6, #0
 8000272:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000276:	f09c 0f00 	teq	ip, #0
 800027a:	bf18      	it	ne
 800027c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000280:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000284:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000288:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800028c:	d204      	bcs.n	8000298 <__aeabi_dmul+0x80>
 800028e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000292:	416d      	adcs	r5, r5
 8000294:	eb46 0606 	adc.w	r6, r6, r6
 8000298:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800029c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002b0:	bf88      	it	hi
 80002b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002b6:	d81e      	bhi.n	80002f6 <__aeabi_dmul+0xde>
 80002b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002bc:	bf08      	it	eq
 80002be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002c2:	f150 0000 	adcs.w	r0, r0, #0
 80002c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002d0:	ea46 0101 	orr.w	r1, r6, r1
 80002d4:	ea40 0002 	orr.w	r0, r0, r2
 80002d8:	ea81 0103 	eor.w	r1, r1, r3
 80002dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002e0:	bfc2      	ittt	gt
 80002e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	popgt	{r4, r5, r6, pc}
 80002ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002f0:	f04f 0e00 	mov.w	lr, #0
 80002f4:	3c01      	subs	r4, #1
 80002f6:	f300 80ab 	bgt.w	8000450 <__aeabi_dmul+0x238>
 80002fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002fe:	bfde      	ittt	le
 8000300:	2000      	movle	r0, #0
 8000302:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000306:	bd70      	pople	{r4, r5, r6, pc}
 8000308:	f1c4 0400 	rsb	r4, r4, #0
 800030c:	3c20      	subs	r4, #32
 800030e:	da35      	bge.n	800037c <__aeabi_dmul+0x164>
 8000310:	340c      	adds	r4, #12
 8000312:	dc1b      	bgt.n	800034c <__aeabi_dmul+0x134>
 8000314:	f104 0414 	add.w	r4, r4, #20
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f305 	lsl.w	r3, r0, r5
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f205 	lsl.w	r2, r1, r5
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000330:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000334:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000338:	fa21 f604 	lsr.w	r6, r1, r4
 800033c:	eb42 0106 	adc.w	r1, r2, r6
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 040c 	rsb	r4, r4, #12
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f304 	lsl.w	r3, r0, r4
 8000358:	fa20 f005 	lsr.w	r0, r0, r5
 800035c:	fa01 f204 	lsl.w	r2, r1, r4
 8000360:	ea40 0002 	orr.w	r0, r0, r2
 8000364:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000368:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f1c4 0520 	rsb	r5, r4, #32
 8000380:	fa00 f205 	lsl.w	r2, r0, r5
 8000384:	ea4e 0e02 	orr.w	lr, lr, r2
 8000388:	fa20 f304 	lsr.w	r3, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea43 0302 	orr.w	r3, r3, r2
 8000394:	fa21 f004 	lsr.w	r0, r1, r4
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	fa21 f204 	lsr.w	r2, r1, r4
 80003a0:	ea20 0002 	bic.w	r0, r0, r2
 80003a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f094 0f00 	teq	r4, #0
 80003b8:	d10f      	bne.n	80003da <__aeabi_dmul+0x1c2>
 80003ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003be:	0040      	lsls	r0, r0, #1
 80003c0:	eb41 0101 	adc.w	r1, r1, r1
 80003c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003c8:	bf08      	it	eq
 80003ca:	3c01      	subeq	r4, #1
 80003cc:	d0f7      	beq.n	80003be <__aeabi_dmul+0x1a6>
 80003ce:	ea41 0106 	orr.w	r1, r1, r6
 80003d2:	f095 0f00 	teq	r5, #0
 80003d6:	bf18      	it	ne
 80003d8:	4770      	bxne	lr
 80003da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003de:	0052      	lsls	r2, r2, #1
 80003e0:	eb43 0303 	adc.w	r3, r3, r3
 80003e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3d01      	subeq	r5, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1c6>
 80003ee:	ea43 0306 	orr.w	r3, r3, r6
 80003f2:	4770      	bx	lr
 80003f4:	ea94 0f0c 	teq	r4, ip
 80003f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003fc:	bf18      	it	ne
 80003fe:	ea95 0f0c 	teqne	r5, ip
 8000402:	d00c      	beq.n	800041e <__aeabi_dmul+0x206>
 8000404:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000408:	bf18      	it	ne
 800040a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800040e:	d1d1      	bne.n	80003b4 <__aeabi_dmul+0x19c>
 8000410:	ea81 0103 	eor.w	r1, r1, r3
 8000414:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000418:	f04f 0000 	mov.w	r0, #0
 800041c:	bd70      	pop	{r4, r5, r6, pc}
 800041e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000422:	bf06      	itte	eq
 8000424:	4610      	moveq	r0, r2
 8000426:	4619      	moveq	r1, r3
 8000428:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042c:	d019      	beq.n	8000462 <__aeabi_dmul+0x24a>
 800042e:	ea94 0f0c 	teq	r4, ip
 8000432:	d102      	bne.n	800043a <__aeabi_dmul+0x222>
 8000434:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000438:	d113      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800043a:	ea95 0f0c 	teq	r5, ip
 800043e:	d105      	bne.n	800044c <__aeabi_dmul+0x234>
 8000440:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000444:	bf1c      	itt	ne
 8000446:	4610      	movne	r0, r2
 8000448:	4619      	movne	r1, r3
 800044a:	d10a      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800044c:	ea81 0103 	eor.w	r1, r1, r3
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000454:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd70      	pop	{r4, r5, r6, pc}
 8000462:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000466:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800046a:	bd70      	pop	{r4, r5, r6, pc}

0800046c <__aeabi_drsub>:
 800046c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000470:	e002      	b.n	8000478 <__adddf3>
 8000472:	bf00      	nop

08000474 <__aeabi_dsub>:
 8000474:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000478 <__adddf3>:
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800047e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000482:	ea94 0f05 	teq	r4, r5
 8000486:	bf08      	it	eq
 8000488:	ea90 0f02 	teqeq	r0, r2
 800048c:	bf1f      	itttt	ne
 800048e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000492:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000496:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800049a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800049e:	f000 80e2 	beq.w	8000666 <__adddf3+0x1ee>
 80004a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004aa:	bfb8      	it	lt
 80004ac:	426d      	neglt	r5, r5
 80004ae:	dd0c      	ble.n	80004ca <__adddf3+0x52>
 80004b0:	442c      	add	r4, r5
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	ea82 0000 	eor.w	r0, r2, r0
 80004be:	ea83 0101 	eor.w	r1, r3, r1
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	2d36      	cmp	r5, #54	; 0x36
 80004cc:	bf88      	it	hi
 80004ce:	bd30      	pophi	{r4, r5, pc}
 80004d0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004d8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004e0:	d002      	beq.n	80004e8 <__adddf3+0x70>
 80004e2:	4240      	negs	r0, r0
 80004e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004e8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004f4:	d002      	beq.n	80004fc <__adddf3+0x84>
 80004f6:	4252      	negs	r2, r2
 80004f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004fc:	ea94 0f05 	teq	r4, r5
 8000500:	f000 80a7 	beq.w	8000652 <__adddf3+0x1da>
 8000504:	f1a4 0401 	sub.w	r4, r4, #1
 8000508:	f1d5 0e20 	rsbs	lr, r5, #32
 800050c:	db0d      	blt.n	800052a <__adddf3+0xb2>
 800050e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000512:	fa22 f205 	lsr.w	r2, r2, r5
 8000516:	1880      	adds	r0, r0, r2
 8000518:	f141 0100 	adc.w	r1, r1, #0
 800051c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000520:	1880      	adds	r0, r0, r2
 8000522:	fa43 f305 	asr.w	r3, r3, r5
 8000526:	4159      	adcs	r1, r3
 8000528:	e00e      	b.n	8000548 <__adddf3+0xd0>
 800052a:	f1a5 0520 	sub.w	r5, r5, #32
 800052e:	f10e 0e20 	add.w	lr, lr, #32
 8000532:	2a01      	cmp	r2, #1
 8000534:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000538:	bf28      	it	cs
 800053a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800053e:	fa43 f305 	asr.w	r3, r3, r5
 8000542:	18c0      	adds	r0, r0, r3
 8000544:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	d507      	bpl.n	800055e <__adddf3+0xe6>
 800054e:	f04f 0e00 	mov.w	lr, #0
 8000552:	f1dc 0c00 	rsbs	ip, ip, #0
 8000556:	eb7e 0000 	sbcs.w	r0, lr, r0
 800055a:	eb6e 0101 	sbc.w	r1, lr, r1
 800055e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000562:	d31b      	bcc.n	800059c <__adddf3+0x124>
 8000564:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000568:	d30c      	bcc.n	8000584 <__adddf3+0x10c>
 800056a:	0849      	lsrs	r1, r1, #1
 800056c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000570:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000574:	f104 0401 	add.w	r4, r4, #1
 8000578:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800057c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000580:	f080 809a 	bcs.w	80006b8 <__adddf3+0x240>
 8000584:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000588:	bf08      	it	eq
 800058a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800058e:	f150 0000 	adcs.w	r0, r0, #0
 8000592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000596:	ea41 0105 	orr.w	r1, r1, r5
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005a0:	4140      	adcs	r0, r0
 80005a2:	eb41 0101 	adc.w	r1, r1, r1
 80005a6:	3c01      	subs	r4, #1
 80005a8:	bf28      	it	cs
 80005aa:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005ae:	d2e9      	bcs.n	8000584 <__adddf3+0x10c>
 80005b0:	f091 0f00 	teq	r1, #0
 80005b4:	bf04      	itt	eq
 80005b6:	4601      	moveq	r1, r0
 80005b8:	2000      	moveq	r0, #0
 80005ba:	fab1 f381 	clz	r3, r1
 80005be:	bf08      	it	eq
 80005c0:	3320      	addeq	r3, #32
 80005c2:	f1a3 030b 	sub.w	r3, r3, #11
 80005c6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ca:	da0c      	bge.n	80005e6 <__adddf3+0x16e>
 80005cc:	320c      	adds	r2, #12
 80005ce:	dd08      	ble.n	80005e2 <__adddf3+0x16a>
 80005d0:	f102 0c14 	add.w	ip, r2, #20
 80005d4:	f1c2 020c 	rsb	r2, r2, #12
 80005d8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005dc:	fa21 f102 	lsr.w	r1, r1, r2
 80005e0:	e00c      	b.n	80005fc <__adddf3+0x184>
 80005e2:	f102 0214 	add.w	r2, r2, #20
 80005e6:	bfd8      	it	le
 80005e8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ec:	fa01 f102 	lsl.w	r1, r1, r2
 80005f0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005f4:	bfdc      	itt	le
 80005f6:	ea41 010c 	orrle.w	r1, r1, ip
 80005fa:	4090      	lslle	r0, r2
 80005fc:	1ae4      	subs	r4, r4, r3
 80005fe:	bfa2      	ittt	ge
 8000600:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000604:	4329      	orrge	r1, r5
 8000606:	bd30      	popge	{r4, r5, pc}
 8000608:	ea6f 0404 	mvn.w	r4, r4
 800060c:	3c1f      	subs	r4, #31
 800060e:	da1c      	bge.n	800064a <__adddf3+0x1d2>
 8000610:	340c      	adds	r4, #12
 8000612:	dc0e      	bgt.n	8000632 <__adddf3+0x1ba>
 8000614:	f104 0414 	add.w	r4, r4, #20
 8000618:	f1c4 0220 	rsb	r2, r4, #32
 800061c:	fa20 f004 	lsr.w	r0, r0, r4
 8000620:	fa01 f302 	lsl.w	r3, r1, r2
 8000624:	ea40 0003 	orr.w	r0, r0, r3
 8000628:	fa21 f304 	lsr.w	r3, r1, r4
 800062c:	ea45 0103 	orr.w	r1, r5, r3
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	f1c4 040c 	rsb	r4, r4, #12
 8000636:	f1c4 0220 	rsb	r2, r4, #32
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 f304 	lsl.w	r3, r1, r4
 8000642:	ea40 0003 	orr.w	r0, r0, r3
 8000646:	4629      	mov	r1, r5
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	fa21 f004 	lsr.w	r0, r1, r4
 800064e:	4629      	mov	r1, r5
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	f094 0f00 	teq	r4, #0
 8000656:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800065a:	bf06      	itte	eq
 800065c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000660:	3401      	addeq	r4, #1
 8000662:	3d01      	subne	r5, #1
 8000664:	e74e      	b.n	8000504 <__adddf3+0x8c>
 8000666:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800066a:	bf18      	it	ne
 800066c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000670:	d029      	beq.n	80006c6 <__adddf3+0x24e>
 8000672:	ea94 0f05 	teq	r4, r5
 8000676:	bf08      	it	eq
 8000678:	ea90 0f02 	teqeq	r0, r2
 800067c:	d005      	beq.n	800068a <__adddf3+0x212>
 800067e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000682:	bf04      	itt	eq
 8000684:	4619      	moveq	r1, r3
 8000686:	4610      	moveq	r0, r2
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	ea91 0f03 	teq	r1, r3
 800068e:	bf1e      	ittt	ne
 8000690:	2100      	movne	r1, #0
 8000692:	2000      	movne	r0, #0
 8000694:	bd30      	popne	{r4, r5, pc}
 8000696:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800069a:	d105      	bne.n	80006a8 <__adddf3+0x230>
 800069c:	0040      	lsls	r0, r0, #1
 800069e:	4149      	adcs	r1, r1
 80006a0:	bf28      	it	cs
 80006a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd30      	pop	{r4, r5, pc}
 80006a8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006ac:	bf3c      	itt	cc
 80006ae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006b2:	bd30      	popcc	{r4, r5, pc}
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ca:	bf1a      	itte	ne
 80006cc:	4619      	movne	r1, r3
 80006ce:	4610      	movne	r0, r2
 80006d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006d4:	bf1c      	itt	ne
 80006d6:	460b      	movne	r3, r1
 80006d8:	4602      	movne	r2, r0
 80006da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006de:	bf06      	itte	eq
 80006e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006e4:	ea91 0f03 	teqeq	r1, r3
 80006e8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ec:	bd30      	pop	{r4, r5, pc}
 80006ee:	bf00      	nop

080006f0 <__aeabi_ui2d>:
 80006f0:	f090 0f00 	teq	r0, #0
 80006f4:	bf04      	itt	eq
 80006f6:	2100      	moveq	r1, #0
 80006f8:	4770      	bxeq	lr
 80006fa:	b530      	push	{r4, r5, lr}
 80006fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000700:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000704:	f04f 0500 	mov.w	r5, #0
 8000708:	f04f 0100 	mov.w	r1, #0
 800070c:	e750      	b.n	80005b0 <__adddf3+0x138>
 800070e:	bf00      	nop

08000710 <__aeabi_i2d>:
 8000710:	f090 0f00 	teq	r0, #0
 8000714:	bf04      	itt	eq
 8000716:	2100      	moveq	r1, #0
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000720:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000724:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000728:	bf48      	it	mi
 800072a:	4240      	negmi	r0, r0
 800072c:	f04f 0100 	mov.w	r1, #0
 8000730:	e73e      	b.n	80005b0 <__adddf3+0x138>
 8000732:	bf00      	nop

08000734 <__aeabi_f2d>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800073a:	ea4f 0131 	mov.w	r1, r1, rrx
 800073e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000742:	bf1f      	itttt	ne
 8000744:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000748:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800074c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000750:	4770      	bxne	lr
 8000752:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000756:	bf08      	it	eq
 8000758:	4770      	bxeq	lr
 800075a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800075e:	bf04      	itt	eq
 8000760:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000764:	4770      	bxeq	lr
 8000766:	b530      	push	{r4, r5, lr}
 8000768:	f44f 7460 	mov.w	r4, #896	; 0x380
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	e71c      	b.n	80005b0 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_ul2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f04f 0500 	mov.w	r5, #0
 8000786:	e00a      	b.n	800079e <__aeabi_l2d+0x16>

08000788 <__aeabi_l2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000796:	d502      	bpl.n	800079e <__aeabi_l2d+0x16>
 8000798:	4240      	negs	r0, r0
 800079a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007aa:	f43f aed8 	beq.w	800055e <__adddf3+0xe6>
 80007ae:	f04f 0203 	mov.w	r2, #3
 80007b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007b6:	bf18      	it	ne
 80007b8:	3203      	addne	r2, #3
 80007ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007be:	bf18      	it	ne
 80007c0:	3203      	addne	r2, #3
 80007c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007c6:	f1c2 0320 	rsb	r3, r2, #32
 80007ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ce:	fa20 f002 	lsr.w	r0, r0, r2
 80007d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007d6:	ea40 000e 	orr.w	r0, r0, lr
 80007da:	fa21 f102 	lsr.w	r1, r1, r2
 80007de:	4414      	add	r4, r2
 80007e0:	e6bd      	b.n	800055e <__adddf3+0xe6>
 80007e2:	bf00      	nop

080007e4 <__aeabi_d2f>:
 80007e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007e8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007ec:	bf24      	itt	cs
 80007ee:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007f2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007f6:	d90d      	bls.n	8000814 <__aeabi_d2f+0x30>
 80007f8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007fc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000800:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000804:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000808:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800080c:	bf08      	it	eq
 800080e:	f020 0001 	biceq.w	r0, r0, #1
 8000812:	4770      	bx	lr
 8000814:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000818:	d121      	bne.n	800085e <__aeabi_d2f+0x7a>
 800081a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800081e:	bfbc      	itt	lt
 8000820:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000824:	4770      	bxlt	lr
 8000826:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800082a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800082e:	f1c2 0218 	rsb	r2, r2, #24
 8000832:	f1c2 0c20 	rsb	ip, r2, #32
 8000836:	fa10 f30c 	lsls.w	r3, r0, ip
 800083a:	fa20 f002 	lsr.w	r0, r0, r2
 800083e:	bf18      	it	ne
 8000840:	f040 0001 	orrne.w	r0, r0, #1
 8000844:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000848:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800084c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000850:	ea40 000c 	orr.w	r0, r0, ip
 8000854:	fa23 f302 	lsr.w	r3, r3, r2
 8000858:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800085c:	e7cc      	b.n	80007f8 <__aeabi_d2f+0x14>
 800085e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000862:	d107      	bne.n	8000874 <__aeabi_d2f+0x90>
 8000864:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000868:	bf1e      	ittt	ne
 800086a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800086e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000872:	4770      	bxne	lr
 8000874:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000878:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800087c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop

08000884 <__aeabi_uldivmod>:
 8000884:	b953      	cbnz	r3, 800089c <__aeabi_uldivmod+0x18>
 8000886:	b94a      	cbnz	r2, 800089c <__aeabi_uldivmod+0x18>
 8000888:	2900      	cmp	r1, #0
 800088a:	bf08      	it	eq
 800088c:	2800      	cmpeq	r0, #0
 800088e:	bf1c      	itt	ne
 8000890:	f04f 31ff 	movne.w	r1, #4294967295
 8000894:	f04f 30ff 	movne.w	r0, #4294967295
 8000898:	f000 b974 	b.w	8000b84 <__aeabi_idiv0>
 800089c:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008a4:	f000 f806 	bl	80008b4 <__udivmoddi4>
 80008a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b0:	b004      	add	sp, #16
 80008b2:	4770      	bx	lr

080008b4 <__udivmoddi4>:
 80008b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008b8:	9d08      	ldr	r5, [sp, #32]
 80008ba:	4604      	mov	r4, r0
 80008bc:	468e      	mov	lr, r1
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d14d      	bne.n	800095e <__udivmoddi4+0xaa>
 80008c2:	428a      	cmp	r2, r1
 80008c4:	4694      	mov	ip, r2
 80008c6:	d969      	bls.n	800099c <__udivmoddi4+0xe8>
 80008c8:	fab2 f282 	clz	r2, r2
 80008cc:	b152      	cbz	r2, 80008e4 <__udivmoddi4+0x30>
 80008ce:	fa01 f302 	lsl.w	r3, r1, r2
 80008d2:	f1c2 0120 	rsb	r1, r2, #32
 80008d6:	fa20 f101 	lsr.w	r1, r0, r1
 80008da:	fa0c fc02 	lsl.w	ip, ip, r2
 80008de:	ea41 0e03 	orr.w	lr, r1, r3
 80008e2:	4094      	lsls	r4, r2
 80008e4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008e8:	0c21      	lsrs	r1, r4, #16
 80008ea:	fbbe f6f8 	udiv	r6, lr, r8
 80008ee:	fa1f f78c 	uxth.w	r7, ip
 80008f2:	fb08 e316 	mls	r3, r8, r6, lr
 80008f6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80008fa:	fb06 f107 	mul.w	r1, r6, r7
 80008fe:	4299      	cmp	r1, r3
 8000900:	d90a      	bls.n	8000918 <__udivmoddi4+0x64>
 8000902:	eb1c 0303 	adds.w	r3, ip, r3
 8000906:	f106 30ff 	add.w	r0, r6, #4294967295
 800090a:	f080 811f 	bcs.w	8000b4c <__udivmoddi4+0x298>
 800090e:	4299      	cmp	r1, r3
 8000910:	f240 811c 	bls.w	8000b4c <__udivmoddi4+0x298>
 8000914:	3e02      	subs	r6, #2
 8000916:	4463      	add	r3, ip
 8000918:	1a5b      	subs	r3, r3, r1
 800091a:	b2a4      	uxth	r4, r4
 800091c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000920:	fb08 3310 	mls	r3, r8, r0, r3
 8000924:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000928:	fb00 f707 	mul.w	r7, r0, r7
 800092c:	42a7      	cmp	r7, r4
 800092e:	d90a      	bls.n	8000946 <__udivmoddi4+0x92>
 8000930:	eb1c 0404 	adds.w	r4, ip, r4
 8000934:	f100 33ff 	add.w	r3, r0, #4294967295
 8000938:	f080 810a 	bcs.w	8000b50 <__udivmoddi4+0x29c>
 800093c:	42a7      	cmp	r7, r4
 800093e:	f240 8107 	bls.w	8000b50 <__udivmoddi4+0x29c>
 8000942:	4464      	add	r4, ip
 8000944:	3802      	subs	r0, #2
 8000946:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800094a:	1be4      	subs	r4, r4, r7
 800094c:	2600      	movs	r6, #0
 800094e:	b11d      	cbz	r5, 8000958 <__udivmoddi4+0xa4>
 8000950:	40d4      	lsrs	r4, r2
 8000952:	2300      	movs	r3, #0
 8000954:	e9c5 4300 	strd	r4, r3, [r5]
 8000958:	4631      	mov	r1, r6
 800095a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800095e:	428b      	cmp	r3, r1
 8000960:	d909      	bls.n	8000976 <__udivmoddi4+0xc2>
 8000962:	2d00      	cmp	r5, #0
 8000964:	f000 80ef 	beq.w	8000b46 <__udivmoddi4+0x292>
 8000968:	2600      	movs	r6, #0
 800096a:	e9c5 0100 	strd	r0, r1, [r5]
 800096e:	4630      	mov	r0, r6
 8000970:	4631      	mov	r1, r6
 8000972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000976:	fab3 f683 	clz	r6, r3
 800097a:	2e00      	cmp	r6, #0
 800097c:	d14a      	bne.n	8000a14 <__udivmoddi4+0x160>
 800097e:	428b      	cmp	r3, r1
 8000980:	d302      	bcc.n	8000988 <__udivmoddi4+0xd4>
 8000982:	4282      	cmp	r2, r0
 8000984:	f200 80f9 	bhi.w	8000b7a <__udivmoddi4+0x2c6>
 8000988:	1a84      	subs	r4, r0, r2
 800098a:	eb61 0303 	sbc.w	r3, r1, r3
 800098e:	2001      	movs	r0, #1
 8000990:	469e      	mov	lr, r3
 8000992:	2d00      	cmp	r5, #0
 8000994:	d0e0      	beq.n	8000958 <__udivmoddi4+0xa4>
 8000996:	e9c5 4e00 	strd	r4, lr, [r5]
 800099a:	e7dd      	b.n	8000958 <__udivmoddi4+0xa4>
 800099c:	b902      	cbnz	r2, 80009a0 <__udivmoddi4+0xec>
 800099e:	deff      	udf	#255	; 0xff
 80009a0:	fab2 f282 	clz	r2, r2
 80009a4:	2a00      	cmp	r2, #0
 80009a6:	f040 8092 	bne.w	8000ace <__udivmoddi4+0x21a>
 80009aa:	eba1 010c 	sub.w	r1, r1, ip
 80009ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009b2:	fa1f fe8c 	uxth.w	lr, ip
 80009b6:	2601      	movs	r6, #1
 80009b8:	0c20      	lsrs	r0, r4, #16
 80009ba:	fbb1 f3f7 	udiv	r3, r1, r7
 80009be:	fb07 1113 	mls	r1, r7, r3, r1
 80009c2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009c6:	fb0e f003 	mul.w	r0, lr, r3
 80009ca:	4288      	cmp	r0, r1
 80009cc:	d908      	bls.n	80009e0 <__udivmoddi4+0x12c>
 80009ce:	eb1c 0101 	adds.w	r1, ip, r1
 80009d2:	f103 38ff 	add.w	r8, r3, #4294967295
 80009d6:	d202      	bcs.n	80009de <__udivmoddi4+0x12a>
 80009d8:	4288      	cmp	r0, r1
 80009da:	f200 80cb 	bhi.w	8000b74 <__udivmoddi4+0x2c0>
 80009de:	4643      	mov	r3, r8
 80009e0:	1a09      	subs	r1, r1, r0
 80009e2:	b2a4      	uxth	r4, r4
 80009e4:	fbb1 f0f7 	udiv	r0, r1, r7
 80009e8:	fb07 1110 	mls	r1, r7, r0, r1
 80009ec:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80009f0:	fb0e fe00 	mul.w	lr, lr, r0
 80009f4:	45a6      	cmp	lr, r4
 80009f6:	d908      	bls.n	8000a0a <__udivmoddi4+0x156>
 80009f8:	eb1c 0404 	adds.w	r4, ip, r4
 80009fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a00:	d202      	bcs.n	8000a08 <__udivmoddi4+0x154>
 8000a02:	45a6      	cmp	lr, r4
 8000a04:	f200 80bb 	bhi.w	8000b7e <__udivmoddi4+0x2ca>
 8000a08:	4608      	mov	r0, r1
 8000a0a:	eba4 040e 	sub.w	r4, r4, lr
 8000a0e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a12:	e79c      	b.n	800094e <__udivmoddi4+0x9a>
 8000a14:	f1c6 0720 	rsb	r7, r6, #32
 8000a18:	40b3      	lsls	r3, r6
 8000a1a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a1e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a22:	fa20 f407 	lsr.w	r4, r0, r7
 8000a26:	fa01 f306 	lsl.w	r3, r1, r6
 8000a2a:	431c      	orrs	r4, r3
 8000a2c:	40f9      	lsrs	r1, r7
 8000a2e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a32:	fa00 f306 	lsl.w	r3, r0, r6
 8000a36:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a3a:	0c20      	lsrs	r0, r4, #16
 8000a3c:	fa1f fe8c 	uxth.w	lr, ip
 8000a40:	fb09 1118 	mls	r1, r9, r8, r1
 8000a44:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a48:	fb08 f00e 	mul.w	r0, r8, lr
 8000a4c:	4288      	cmp	r0, r1
 8000a4e:	fa02 f206 	lsl.w	r2, r2, r6
 8000a52:	d90b      	bls.n	8000a6c <__udivmoddi4+0x1b8>
 8000a54:	eb1c 0101 	adds.w	r1, ip, r1
 8000a58:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a5c:	f080 8088 	bcs.w	8000b70 <__udivmoddi4+0x2bc>
 8000a60:	4288      	cmp	r0, r1
 8000a62:	f240 8085 	bls.w	8000b70 <__udivmoddi4+0x2bc>
 8000a66:	f1a8 0802 	sub.w	r8, r8, #2
 8000a6a:	4461      	add	r1, ip
 8000a6c:	1a09      	subs	r1, r1, r0
 8000a6e:	b2a4      	uxth	r4, r4
 8000a70:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a74:	fb09 1110 	mls	r1, r9, r0, r1
 8000a78:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a7c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a80:	458e      	cmp	lr, r1
 8000a82:	d908      	bls.n	8000a96 <__udivmoddi4+0x1e2>
 8000a84:	eb1c 0101 	adds.w	r1, ip, r1
 8000a88:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a8c:	d26c      	bcs.n	8000b68 <__udivmoddi4+0x2b4>
 8000a8e:	458e      	cmp	lr, r1
 8000a90:	d96a      	bls.n	8000b68 <__udivmoddi4+0x2b4>
 8000a92:	3802      	subs	r0, #2
 8000a94:	4461      	add	r1, ip
 8000a96:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a9a:	fba0 9402 	umull	r9, r4, r0, r2
 8000a9e:	eba1 010e 	sub.w	r1, r1, lr
 8000aa2:	42a1      	cmp	r1, r4
 8000aa4:	46c8      	mov	r8, r9
 8000aa6:	46a6      	mov	lr, r4
 8000aa8:	d356      	bcc.n	8000b58 <__udivmoddi4+0x2a4>
 8000aaa:	d053      	beq.n	8000b54 <__udivmoddi4+0x2a0>
 8000aac:	b15d      	cbz	r5, 8000ac6 <__udivmoddi4+0x212>
 8000aae:	ebb3 0208 	subs.w	r2, r3, r8
 8000ab2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ab6:	fa01 f707 	lsl.w	r7, r1, r7
 8000aba:	fa22 f306 	lsr.w	r3, r2, r6
 8000abe:	40f1      	lsrs	r1, r6
 8000ac0:	431f      	orrs	r7, r3
 8000ac2:	e9c5 7100 	strd	r7, r1, [r5]
 8000ac6:	2600      	movs	r6, #0
 8000ac8:	4631      	mov	r1, r6
 8000aca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ace:	f1c2 0320 	rsb	r3, r2, #32
 8000ad2:	40d8      	lsrs	r0, r3
 8000ad4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ad8:	fa21 f303 	lsr.w	r3, r1, r3
 8000adc:	4091      	lsls	r1, r2
 8000ade:	4301      	orrs	r1, r0
 8000ae0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ae4:	fa1f fe8c 	uxth.w	lr, ip
 8000ae8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000aec:	fb07 3610 	mls	r6, r7, r0, r3
 8000af0:	0c0b      	lsrs	r3, r1, #16
 8000af2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000af6:	fb00 f60e 	mul.w	r6, r0, lr
 8000afa:	429e      	cmp	r6, r3
 8000afc:	fa04 f402 	lsl.w	r4, r4, r2
 8000b00:	d908      	bls.n	8000b14 <__udivmoddi4+0x260>
 8000b02:	eb1c 0303 	adds.w	r3, ip, r3
 8000b06:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b0a:	d22f      	bcs.n	8000b6c <__udivmoddi4+0x2b8>
 8000b0c:	429e      	cmp	r6, r3
 8000b0e:	d92d      	bls.n	8000b6c <__udivmoddi4+0x2b8>
 8000b10:	3802      	subs	r0, #2
 8000b12:	4463      	add	r3, ip
 8000b14:	1b9b      	subs	r3, r3, r6
 8000b16:	b289      	uxth	r1, r1
 8000b18:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b1c:	fb07 3316 	mls	r3, r7, r6, r3
 8000b20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b24:	fb06 f30e 	mul.w	r3, r6, lr
 8000b28:	428b      	cmp	r3, r1
 8000b2a:	d908      	bls.n	8000b3e <__udivmoddi4+0x28a>
 8000b2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b30:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b34:	d216      	bcs.n	8000b64 <__udivmoddi4+0x2b0>
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d914      	bls.n	8000b64 <__udivmoddi4+0x2b0>
 8000b3a:	3e02      	subs	r6, #2
 8000b3c:	4461      	add	r1, ip
 8000b3e:	1ac9      	subs	r1, r1, r3
 8000b40:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b44:	e738      	b.n	80009b8 <__udivmoddi4+0x104>
 8000b46:	462e      	mov	r6, r5
 8000b48:	4628      	mov	r0, r5
 8000b4a:	e705      	b.n	8000958 <__udivmoddi4+0xa4>
 8000b4c:	4606      	mov	r6, r0
 8000b4e:	e6e3      	b.n	8000918 <__udivmoddi4+0x64>
 8000b50:	4618      	mov	r0, r3
 8000b52:	e6f8      	b.n	8000946 <__udivmoddi4+0x92>
 8000b54:	454b      	cmp	r3, r9
 8000b56:	d2a9      	bcs.n	8000aac <__udivmoddi4+0x1f8>
 8000b58:	ebb9 0802 	subs.w	r8, r9, r2
 8000b5c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b60:	3801      	subs	r0, #1
 8000b62:	e7a3      	b.n	8000aac <__udivmoddi4+0x1f8>
 8000b64:	4646      	mov	r6, r8
 8000b66:	e7ea      	b.n	8000b3e <__udivmoddi4+0x28a>
 8000b68:	4620      	mov	r0, r4
 8000b6a:	e794      	b.n	8000a96 <__udivmoddi4+0x1e2>
 8000b6c:	4640      	mov	r0, r8
 8000b6e:	e7d1      	b.n	8000b14 <__udivmoddi4+0x260>
 8000b70:	46d0      	mov	r8, sl
 8000b72:	e77b      	b.n	8000a6c <__udivmoddi4+0x1b8>
 8000b74:	3b02      	subs	r3, #2
 8000b76:	4461      	add	r1, ip
 8000b78:	e732      	b.n	80009e0 <__udivmoddi4+0x12c>
 8000b7a:	4630      	mov	r0, r6
 8000b7c:	e709      	b.n	8000992 <__udivmoddi4+0xde>
 8000b7e:	4464      	add	r4, ip
 8000b80:	3802      	subs	r0, #2
 8000b82:	e742      	b.n	8000a0a <__udivmoddi4+0x156>

08000b84 <__aeabi_idiv0>:
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop

08000b88 <_Z10path_setupv>:
adcRead[3]  adc1-7   PC1    V
adcRead[4]  adc1-6   PC0  left
adcRead[5]  adc1-11  PB12  middle right
adcRead[6]  adc1-14  PB11  middle left
*/
void path_setup(){
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
	if(HAL_ADC_Start_DMA(&hadc1,(uint32_t *)adcRead,7) != HAL_OK)
 8000b8c:	2207      	movs	r2, #7
 8000b8e:	4909      	ldr	r1, [pc, #36]	; (8000bb4 <_Z10path_setupv+0x2c>)
 8000b90:	4809      	ldr	r0, [pc, #36]	; (8000bb8 <_Z10path_setupv+0x30>)
 8000b92:	f001 fb13 	bl	80021bc <HAL_ADC_Start_DMA>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	bf14      	ite	ne
 8000b9c:	2301      	movne	r3, #1
 8000b9e:	2300      	moveq	r3, #0
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d004      	beq.n	8000bb0 <_Z10path_setupv+0x28>
		check++;
 8000ba6:	4b05      	ldr	r3, [pc, #20]	; (8000bbc <_Z10path_setupv+0x34>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	3301      	adds	r3, #1
 8000bac:	4a03      	ldr	r2, [pc, #12]	; (8000bbc <_Z10path_setupv+0x34>)
 8000bae:	6013      	str	r3, [r2, #0]
}
 8000bb0:	bf00      	nop
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	20000028 	.word	0x20000028
 8000bb8:	20000058 	.word	0x20000058
 8000bbc:	20000038 	.word	0x20000038

08000bc0 <_Z4pathPf>:
//motor_speed[0]:right motor speed, motor_speed[1]:left motor speed
void path(float *motor_speed){
 8000bc0:	b5b0      	push	{r4, r5, r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]

	//權重, P的err
	weight_err = (float)(-3*adcRead[0]-adcRead[1]+adcRead[3]+3*adcRead[4])/
 8000bc8:	4ba3      	ldr	r3, [pc, #652]	; (8000e58 <_Z4pathPf+0x298>)
 8000bca:	881b      	ldrh	r3, [r3, #0]
 8000bcc:	461a      	mov	r2, r3
 8000bce:	009b      	lsls	r3, r3, #2
 8000bd0:	1ad3      	subs	r3, r2, r3
 8000bd2:	4aa1      	ldr	r2, [pc, #644]	; (8000e58 <_Z4pathPf+0x298>)
 8000bd4:	8852      	ldrh	r2, [r2, #2]
 8000bd6:	1a9b      	subs	r3, r3, r2
 8000bd8:	4a9f      	ldr	r2, [pc, #636]	; (8000e58 <_Z4pathPf+0x298>)
 8000bda:	88d2      	ldrh	r2, [r2, #6]
 8000bdc:	441a      	add	r2, r3
 8000bde:	4b9e      	ldr	r3, [pc, #632]	; (8000e58 <_Z4pathPf+0x298>)
 8000be0:	891b      	ldrh	r3, [r3, #8]
 8000be2:	4619      	mov	r1, r3
 8000be4:	460b      	mov	r3, r1
 8000be6:	005b      	lsls	r3, r3, #1
 8000be8:	440b      	add	r3, r1
 8000bea:	4413      	add	r3, r2
 8000bec:	ee07 3a90 	vmov	s15, r3
 8000bf0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
					(adcRead[0]+adcRead[1]+adcRead[2]+adcRead[3]+adcRead[4]);
 8000bf4:	4b98      	ldr	r3, [pc, #608]	; (8000e58 <_Z4pathPf+0x298>)
 8000bf6:	881b      	ldrh	r3, [r3, #0]
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	4b97      	ldr	r3, [pc, #604]	; (8000e58 <_Z4pathPf+0x298>)
 8000bfc:	885b      	ldrh	r3, [r3, #2]
 8000bfe:	4413      	add	r3, r2
 8000c00:	4a95      	ldr	r2, [pc, #596]	; (8000e58 <_Z4pathPf+0x298>)
 8000c02:	8892      	ldrh	r2, [r2, #4]
 8000c04:	4413      	add	r3, r2
 8000c06:	4a94      	ldr	r2, [pc, #592]	; (8000e58 <_Z4pathPf+0x298>)
 8000c08:	88d2      	ldrh	r2, [r2, #6]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	4a92      	ldr	r2, [pc, #584]	; (8000e58 <_Z4pathPf+0x298>)
 8000c0e:	8912      	ldrh	r2, [r2, #8]
 8000c10:	4413      	add	r3, r2
	weight_err = (float)(-3*adcRead[0]-adcRead[1]+adcRead[3]+3*adcRead[4])/
 8000c12:	ee07 3a90 	vmov	s15, r3
 8000c16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c1e:	4b8f      	ldr	r3, [pc, #572]	; (8000e5c <_Z4pathPf+0x29c>)
 8000c20:	edc3 7a00 	vstr	s15, [r3]

	//權重變化, D的err
	weight_change = weight_err - weight_lasttime;
 8000c24:	4b8d      	ldr	r3, [pc, #564]	; (8000e5c <_Z4pathPf+0x29c>)
 8000c26:	ed93 7a00 	vldr	s14, [r3]
 8000c2a:	4b8d      	ldr	r3, [pc, #564]	; (8000e60 <_Z4pathPf+0x2a0>)
 8000c2c:	edd3 7a00 	vldr	s15, [r3]
 8000c30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c34:	4b8b      	ldr	r3, [pc, #556]	; (8000e64 <_Z4pathPf+0x2a4>)
 8000c36:	edc3 7a00 	vstr	s15, [r3]

	weight_lasttime = weight_err;
 8000c3a:	4b88      	ldr	r3, [pc, #544]	; (8000e5c <_Z4pathPf+0x29c>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a88      	ldr	r2, [pc, #544]	; (8000e60 <_Z4pathPf+0x2a0>)
 8000c40:	6013      	str	r3, [r2, #0]

	//right
	tempSpeed[0] = normal_Speed + weight_err * w_kp + weight_change * w_kd;
 8000c42:	4b86      	ldr	r3, [pc, #536]	; (8000e5c <_Z4pathPf+0x29c>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff fd74 	bl	8000734 <__aeabi_f2d>
 8000c4c:	a380      	add	r3, pc, #512	; (adr r3, 8000e50 <_Z4pathPf+0x290>)
 8000c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c52:	f7ff fae1 	bl	8000218 <__aeabi_dmul>
 8000c56:	4602      	mov	r2, r0
 8000c58:	460b      	mov	r3, r1
 8000c5a:	4610      	mov	r0, r2
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	f04f 0200 	mov.w	r2, #0
 8000c62:	4b81      	ldr	r3, [pc, #516]	; (8000e68 <_Z4pathPf+0x2a8>)
 8000c64:	f7ff fc08 	bl	8000478 <__adddf3>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	460b      	mov	r3, r1
 8000c6c:	4614      	mov	r4, r2
 8000c6e:	461d      	mov	r5, r3
 8000c70:	4b7c      	ldr	r3, [pc, #496]	; (8000e64 <_Z4pathPf+0x2a4>)
 8000c72:	edd3 7a00 	vldr	s15, [r3]
 8000c76:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8000e6c <_Z4pathPf+0x2ac>
 8000c7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c7e:	ee17 0a90 	vmov	r0, s15
 8000c82:	f7ff fd57 	bl	8000734 <__aeabi_f2d>
 8000c86:	4602      	mov	r2, r0
 8000c88:	460b      	mov	r3, r1
 8000c8a:	4620      	mov	r0, r4
 8000c8c:	4629      	mov	r1, r5
 8000c8e:	f7ff fbf3 	bl	8000478 <__adddf3>
 8000c92:	4602      	mov	r2, r0
 8000c94:	460b      	mov	r3, r1
 8000c96:	4610      	mov	r0, r2
 8000c98:	4619      	mov	r1, r3
 8000c9a:	f7ff fda3 	bl	80007e4 <__aeabi_d2f>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	4a73      	ldr	r2, [pc, #460]	; (8000e70 <_Z4pathPf+0x2b0>)
 8000ca2:	6013      	str	r3, [r2, #0]
	//left
	tempSpeed[1] = normal_Speed - weight_err * w_kp - weight_change * w_kd;
 8000ca4:	4b6d      	ldr	r3, [pc, #436]	; (8000e5c <_Z4pathPf+0x29c>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff fd43 	bl	8000734 <__aeabi_f2d>
 8000cae:	a368      	add	r3, pc, #416	; (adr r3, 8000e50 <_Z4pathPf+0x290>)
 8000cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cb4:	f7ff fab0 	bl	8000218 <__aeabi_dmul>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	f04f 0000 	mov.w	r0, #0
 8000cc0:	4969      	ldr	r1, [pc, #420]	; (8000e68 <_Z4pathPf+0x2a8>)
 8000cc2:	f7ff fbd7 	bl	8000474 <__aeabi_dsub>
 8000cc6:	4602      	mov	r2, r0
 8000cc8:	460b      	mov	r3, r1
 8000cca:	4614      	mov	r4, r2
 8000ccc:	461d      	mov	r5, r3
 8000cce:	4b65      	ldr	r3, [pc, #404]	; (8000e64 <_Z4pathPf+0x2a4>)
 8000cd0:	edd3 7a00 	vldr	s15, [r3]
 8000cd4:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8000e6c <_Z4pathPf+0x2ac>
 8000cd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cdc:	ee17 0a90 	vmov	r0, s15
 8000ce0:	f7ff fd28 	bl	8000734 <__aeabi_f2d>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	460b      	mov	r3, r1
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	f7ff fbc2 	bl	8000474 <__aeabi_dsub>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	460b      	mov	r3, r1
 8000cf4:	4610      	mov	r0, r2
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	f7ff fd74 	bl	80007e4 <__aeabi_d2f>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	4a5c      	ldr	r2, [pc, #368]	; (8000e70 <_Z4pathPf+0x2b0>)
 8000d00:	6053      	str	r3, [r2, #4]

	//turn right
	if(adcRead[5] >= boundry && adcRead[6] < boundry && adcRead[0] < boundry && adcRead[1] < boundry
 8000d02:	4b55      	ldr	r3, [pc, #340]	; (8000e58 <_Z4pathPf+0x298>)
 8000d04:	895b      	ldrh	r3, [r3, #10]
 8000d06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d0a:	d332      	bcc.n	8000d72 <_Z4pathPf+0x1b2>
 8000d0c:	4b52      	ldr	r3, [pc, #328]	; (8000e58 <_Z4pathPf+0x298>)
 8000d0e:	899b      	ldrh	r3, [r3, #12]
 8000d10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d14:	d22d      	bcs.n	8000d72 <_Z4pathPf+0x1b2>
 8000d16:	4b50      	ldr	r3, [pc, #320]	; (8000e58 <_Z4pathPf+0x298>)
 8000d18:	881b      	ldrh	r3, [r3, #0]
 8000d1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d1e:	d228      	bcs.n	8000d72 <_Z4pathPf+0x1b2>
 8000d20:	4b4d      	ldr	r3, [pc, #308]	; (8000e58 <_Z4pathPf+0x298>)
 8000d22:	885b      	ldrh	r3, [r3, #2]
 8000d24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d28:	d223      	bcs.n	8000d72 <_Z4pathPf+0x1b2>
			&& adcRead[2] < boundry && adcRead[3] < boundry && adcRead[4] < boundry){
 8000d2a:	4b4b      	ldr	r3, [pc, #300]	; (8000e58 <_Z4pathPf+0x298>)
 8000d2c:	889b      	ldrh	r3, [r3, #4]
 8000d2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d32:	d21e      	bcs.n	8000d72 <_Z4pathPf+0x1b2>
 8000d34:	4b48      	ldr	r3, [pc, #288]	; (8000e58 <_Z4pathPf+0x298>)
 8000d36:	88db      	ldrh	r3, [r3, #6]
 8000d38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d3c:	d219      	bcs.n	8000d72 <_Z4pathPf+0x1b2>
 8000d3e:	4b46      	ldr	r3, [pc, #280]	; (8000e58 <_Z4pathPf+0x298>)
 8000d40:	891b      	ldrh	r3, [r3, #8]
 8000d42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d46:	d214      	bcs.n	8000d72 <_Z4pathPf+0x1b2>

		motor_speed[0] = spin_sp * -1;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	4a4a      	ldr	r2, [pc, #296]	; (8000e74 <_Z4pathPf+0x2b4>)
 8000d4c:	601a      	str	r2, [r3, #0]
		motor_speed[1] = spin_sp;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	3304      	adds	r3, #4
 8000d52:	4a49      	ldr	r2, [pc, #292]	; (8000e78 <_Z4pathPf+0x2b8>)
 8000d54:	601a      	str	r2, [r3, #0]

		while(adcRead[5] >= boundry){}
 8000d56:	4b40      	ldr	r3, [pc, #256]	; (8000e58 <_Z4pathPf+0x298>)
 8000d58:	895b      	ldrh	r3, [r3, #10]
 8000d5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d5e:	d300      	bcc.n	8000d62 <_Z4pathPf+0x1a2>
 8000d60:	e7f9      	b.n	8000d56 <_Z4pathPf+0x196>
		while(adcRead[2] < 3*boundry){}
 8000d62:	4b3d      	ldr	r3, [pc, #244]	; (8000e58 <_Z4pathPf+0x298>)
 8000d64:	889b      	ldrh	r3, [r3, #4]
 8000d66:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	f200 80c3 	bhi.w	8000ef6 <_Z4pathPf+0x336>
 8000d70:	e7f7      	b.n	8000d62 <_Z4pathPf+0x1a2>
		motor_speed[1] = spin_sp;

		while(adcRead[5] >= 3*boundry){}*/
	}
	//turn left
	else if(adcRead[5] < boundry && adcRead[6] >= 2 * boundry && adcRead[0] < boundry && adcRead[1] < boundry
 8000d72:	4b39      	ldr	r3, [pc, #228]	; (8000e58 <_Z4pathPf+0x298>)
 8000d74:	895b      	ldrh	r3, [r3, #10]
 8000d76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d7a:	d232      	bcs.n	8000de2 <_Z4pathPf+0x222>
 8000d7c:	4b36      	ldr	r3, [pc, #216]	; (8000e58 <_Z4pathPf+0x298>)
 8000d7e:	899b      	ldrh	r3, [r3, #12]
 8000d80:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000d84:	d32d      	bcc.n	8000de2 <_Z4pathPf+0x222>
 8000d86:	4b34      	ldr	r3, [pc, #208]	; (8000e58 <_Z4pathPf+0x298>)
 8000d88:	881b      	ldrh	r3, [r3, #0]
 8000d8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d8e:	d228      	bcs.n	8000de2 <_Z4pathPf+0x222>
 8000d90:	4b31      	ldr	r3, [pc, #196]	; (8000e58 <_Z4pathPf+0x298>)
 8000d92:	885b      	ldrh	r3, [r3, #2]
 8000d94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d98:	d223      	bcs.n	8000de2 <_Z4pathPf+0x222>
			&& adcRead[2] < boundry && adcRead[3] < boundry && adcRead[4] < boundry){
 8000d9a:	4b2f      	ldr	r3, [pc, #188]	; (8000e58 <_Z4pathPf+0x298>)
 8000d9c:	889b      	ldrh	r3, [r3, #4]
 8000d9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000da2:	d21e      	bcs.n	8000de2 <_Z4pathPf+0x222>
 8000da4:	4b2c      	ldr	r3, [pc, #176]	; (8000e58 <_Z4pathPf+0x298>)
 8000da6:	88db      	ldrh	r3, [r3, #6]
 8000da8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000dac:	d219      	bcs.n	8000de2 <_Z4pathPf+0x222>
 8000dae:	4b2a      	ldr	r3, [pc, #168]	; (8000e58 <_Z4pathPf+0x298>)
 8000db0:	891b      	ldrh	r3, [r3, #8]
 8000db2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000db6:	d214      	bcs.n	8000de2 <_Z4pathPf+0x222>

		motor_speed[0] = spin_sp;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	4a2f      	ldr	r2, [pc, #188]	; (8000e78 <_Z4pathPf+0x2b8>)
 8000dbc:	601a      	str	r2, [r3, #0]
		motor_speed[1] = spin_sp * -1;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	3304      	adds	r3, #4
 8000dc2:	4a2c      	ldr	r2, [pc, #176]	; (8000e74 <_Z4pathPf+0x2b4>)
 8000dc4:	601a      	str	r2, [r3, #0]

		while(adcRead[6] >= boundry){}
 8000dc6:	4b24      	ldr	r3, [pc, #144]	; (8000e58 <_Z4pathPf+0x298>)
 8000dc8:	899b      	ldrh	r3, [r3, #12]
 8000dca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000dce:	d300      	bcc.n	8000dd2 <_Z4pathPf+0x212>
 8000dd0:	e7f9      	b.n	8000dc6 <_Z4pathPf+0x206>
		while(adcRead[2] < 3*boundry){}
 8000dd2:	4b21      	ldr	r3, [pc, #132]	; (8000e58 <_Z4pathPf+0x298>)
 8000dd4:	889b      	ldrh	r3, [r3, #4]
 8000dd6:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	f200 808d 	bhi.w	8000efa <_Z4pathPf+0x33a>
 8000de0:	e7f7      	b.n	8000dd2 <_Z4pathPf+0x212>
		motor_speed[1] = spin_sp;

		while(adcRead[6] >= 3*boundry){}*/
	}
	//stop
	else if(adcRead[5] >= boundry && adcRead[6] >= boundry){
 8000de2:	4b1d      	ldr	r3, [pc, #116]	; (8000e58 <_Z4pathPf+0x298>)
 8000de4:	895b      	ldrh	r3, [r3, #10]
 8000de6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000dea:	d30e      	bcc.n	8000e0a <_Z4pathPf+0x24a>
 8000dec:	4b1a      	ldr	r3, [pc, #104]	; (8000e58 <_Z4pathPf+0x298>)
 8000dee:	899b      	ldrh	r3, [r3, #12]
 8000df0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000df4:	d309      	bcc.n	8000e0a <_Z4pathPf+0x24a>

		motor_speed[0] = 0;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	f04f 0200 	mov.w	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
		motor_speed[1] = 0;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	3304      	adds	r3, #4
 8000e02:	f04f 0200 	mov.w	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	e078      	b.n	8000efc <_Z4pathPf+0x33c>
	}
	//forward
	else{
		for(int j = 0; j < 2; j++){
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	dc73      	bgt.n	8000efc <_Z4pathPf+0x33c>
			for(float i = 2; i >= 0; i -= 0.01){
 8000e14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e18:	60bb      	str	r3, [r7, #8]
 8000e1a:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e1e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e26:	db62      	blt.n	8000eee <_Z4pathPf+0x32e>

				if(tempSpeed[j] >= i){
 8000e28:	4a11      	ldr	r2, [pc, #68]	; (8000e70 <_Z4pathPf+0x2b0>)
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	4413      	add	r3, r2
 8000e30:	edd3 7a00 	vldr	s15, [r3]
 8000e34:	ed97 7a02 	vldr	s14, [r7, #8]
 8000e38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e40:	d81c      	bhi.n	8000e7c <_Z4pathPf+0x2bc>
					motor_speed[j] = i;
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	687a      	ldr	r2, [r7, #4]
 8000e48:	4413      	add	r3, r2
 8000e4a:	68ba      	ldr	r2, [r7, #8]
 8000e4c:	601a      	str	r2, [r3, #0]
					break;
 8000e4e:	e04e      	b.n	8000eee <_Z4pathPf+0x32e>
 8000e50:	ae147ae1 	.word	0xae147ae1
 8000e54:	3fcae147 	.word	0x3fcae147
 8000e58:	20000028 	.word	0x20000028
 8000e5c:	2000003c 	.word	0x2000003c
 8000e60:	20000040 	.word	0x20000040
 8000e64:	20000044 	.word	0x20000044
 8000e68:	3ff00000 	.word	0x3ff00000
 8000e6c:	00000000 	.word	0x00000000
 8000e70:	20000048 	.word	0x20000048
 8000e74:	bf4ccccd 	.word	0xbf4ccccd
 8000e78:	3f4ccccd 	.word	0x3f4ccccd
				}
				else if(tempSpeed[j] > 2){
 8000e7c:	4a24      	ldr	r2, [pc, #144]	; (8000f10 <_Z4pathPf+0x350>)
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	4413      	add	r3, r2
 8000e84:	edd3 7a00 	vldr	s15, [r3]
 8000e88:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8000e8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e94:	dd07      	ble.n	8000ea6 <_Z4pathPf+0x2e6>
					motor_speed[j] = 2;
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ea2:	601a      	str	r2, [r3, #0]
					break;
 8000ea4:	e023      	b.n	8000eee <_Z4pathPf+0x32e>
				}
				else if(tempSpeed[j] < 0){
 8000ea6:	4a1a      	ldr	r2, [pc, #104]	; (8000f10 <_Z4pathPf+0x350>)
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	4413      	add	r3, r2
 8000eae:	edd3 7a00 	vldr	s15, [r3]
 8000eb2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eba:	d507      	bpl.n	8000ecc <_Z4pathPf+0x30c>
					motor_speed[j] = 0;
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	687a      	ldr	r2, [r7, #4]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	f04f 0200 	mov.w	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
					break;
 8000eca:	e010      	b.n	8000eee <_Z4pathPf+0x32e>
			for(float i = 2; i >= 0; i -= 0.01){
 8000ecc:	68b8      	ldr	r0, [r7, #8]
 8000ece:	f7ff fc31 	bl	8000734 <__aeabi_f2d>
 8000ed2:	a30d      	add	r3, pc, #52	; (adr r3, 8000f08 <_Z4pathPf+0x348>)
 8000ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed8:	f7ff facc 	bl	8000474 <__aeabi_dsub>
 8000edc:	4602      	mov	r2, r0
 8000ede:	460b      	mov	r3, r1
 8000ee0:	4610      	mov	r0, r2
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	f7ff fc7e 	bl	80007e4 <__aeabi_d2f>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	60bb      	str	r3, [r7, #8]
 8000eec:	e795      	b.n	8000e1a <_Z4pathPf+0x25a>
		for(int j = 0; j < 2; j++){
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	e78b      	b.n	8000e0e <_Z4pathPf+0x24e>
	if(adcRead[5] >= boundry && adcRead[6] < boundry && adcRead[0] < boundry && adcRead[1] < boundry
 8000ef6:	bf00      	nop
 8000ef8:	e000      	b.n	8000efc <_Z4pathPf+0x33c>
	else if(adcRead[5] < boundry && adcRead[6] >= 2 * boundry && adcRead[0] < boundry && adcRead[1] < boundry
 8000efa:	bf00      	nop
				}
			}
		}
	}
}
 8000efc:	bf00      	nop
 8000efe:	3710      	adds	r7, #16
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bdb0      	pop	{r4, r5, r7, pc}
 8000f04:	f3af 8000 	nop.w
 8000f08:	47ae147b 	.word	0x47ae147b
 8000f0c:	3f847ae1 	.word	0x3f847ae1
 8000f10:	20000048 	.word	0x20000048

08000f14 <_Z28UART_Transmit_Two_Floats_DMAP20__UART_HandleTypeDefff>:
#include "string.h"

uint8_t buffer_TX[2 * sizeof(float)];
//uint8_t buffer_RX[2 * sizeof(float)];

HAL_StatusTypeDef UART_Transmit_Two_Floats_DMA(UART_HandleTypeDef *huart, float value1, float value2) {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	ed87 0a02 	vstr	s0, [r7, #8]
 8000f20:	edc7 0a01 	vstr	s1, [r7, #4]
 8000f24:	68bb      	ldr	r3, [r7, #8]

    memcpy(buffer_TX, &value1, sizeof(float));
 8000f26:	4a07      	ldr	r2, [pc, #28]	; (8000f44 <_Z28UART_Transmit_Two_Floats_DMAP20__UART_HandleTypeDefff+0x30>)
 8000f28:	6013      	str	r3, [r2, #0]
    memcpy(buffer_TX + sizeof(float), &value2, sizeof(float));
 8000f2a:	4a07      	ldr	r2, [pc, #28]	; (8000f48 <_Z28UART_Transmit_Two_Floats_DMAP20__UART_HandleTypeDefff+0x34>)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6013      	str	r3, [r2, #0]

    return HAL_UART_Transmit_DMA(huart, buffer_TX, sizeof(buffer_TX));
 8000f30:	2208      	movs	r2, #8
 8000f32:	4904      	ldr	r1, [pc, #16]	; (8000f44 <_Z28UART_Transmit_Two_Floats_DMAP20__UART_HandleTypeDefff+0x30>)
 8000f34:	68f8      	ldr	r0, [r7, #12]
 8000f36:	f004 fa6d 	bl	8005414 <HAL_UART_Transmit_DMA>
 8000f3a:	4603      	mov	r3, r0
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3710      	adds	r7, #16
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20000050 	.word	0x20000050
 8000f48:	20000054 	.word	0x20000054

08000f4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f50:	f000 fcf7 	bl	8001942 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f54:	f000 f80d 	bl	8000f72 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f58:	f000 f9e2 	bl	8001320 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f5c:	f000 f9a6 	bl	80012ac <MX_DMA_Init>
  MX_ADC1_Init();
 8000f60:	f000 f848 	bl	8000ff4 <MX_ADC1_Init>
  MX_TIM6_Init();
 8000f64:	f000 f920 	bl	80011a8 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8000f68:	f000 f954 	bl	8001214 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  main_function();
 8000f6c:	f000 fa0e 	bl	800138c <main_function>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f70:	e7fe      	b.n	8000f70 <main+0x24>

08000f72 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b094      	sub	sp, #80	; 0x50
 8000f76:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f78:	f107 0318 	add.w	r3, r7, #24
 8000f7c:	2238      	movs	r2, #56	; 0x38
 8000f7e:	2100      	movs	r1, #0
 8000f80:	4618      	mov	r0, r3
 8000f82:	f005 ff3b 	bl	8006dfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f86:	1d3b      	adds	r3, r7, #4
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
 8000f92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f94:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f98:	f002 fe20 	bl	8003bdc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fa0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fa4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fa6:	2340      	movs	r3, #64	; 0x40
 8000fa8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000faa:	2300      	movs	r3, #0
 8000fac:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fae:	f107 0318 	add.w	r3, r7, #24
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f002 feb6 	bl	8003d24 <HAL_RCC_OscConfig>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000fbe:	f000 f9df 	bl	8001380 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc2:	230f      	movs	r3, #15
 8000fc4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fd6:	1d3b      	adds	r3, r7, #4
 8000fd8:	2100      	movs	r1, #0
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f003 f9b4 	bl	8004348 <HAL_RCC_ClockConfig>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000fe6:	f000 f9cb 	bl	8001380 <Error_Handler>
  }
}
 8000fea:	bf00      	nop
 8000fec:	3750      	adds	r7, #80	; 0x50
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
	...

08000ff4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08c      	sub	sp, #48	; 0x30
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000ffa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001006:	1d3b      	adds	r3, r7, #4
 8001008:	2220      	movs	r2, #32
 800100a:	2100      	movs	r1, #0
 800100c:	4618      	mov	r0, r3
 800100e:	f005 fef5 	bl	8006dfc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001012:	4b5d      	ldr	r3, [pc, #372]	; (8001188 <MX_ADC1_Init+0x194>)
 8001014:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001018:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800101a:	4b5b      	ldr	r3, [pc, #364]	; (8001188 <MX_ADC1_Init+0x194>)
 800101c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001020:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001022:	4b59      	ldr	r3, [pc, #356]	; (8001188 <MX_ADC1_Init+0x194>)
 8001024:	2200      	movs	r2, #0
 8001026:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001028:	4b57      	ldr	r3, [pc, #348]	; (8001188 <MX_ADC1_Init+0x194>)
 800102a:	2200      	movs	r2, #0
 800102c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800102e:	4b56      	ldr	r3, [pc, #344]	; (8001188 <MX_ADC1_Init+0x194>)
 8001030:	2200      	movs	r2, #0
 8001032:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001034:	4b54      	ldr	r3, [pc, #336]	; (8001188 <MX_ADC1_Init+0x194>)
 8001036:	2201      	movs	r2, #1
 8001038:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800103a:	4b53      	ldr	r3, [pc, #332]	; (8001188 <MX_ADC1_Init+0x194>)
 800103c:	2204      	movs	r2, #4
 800103e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001040:	4b51      	ldr	r3, [pc, #324]	; (8001188 <MX_ADC1_Init+0x194>)
 8001042:	2200      	movs	r2, #0
 8001044:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001046:	4b50      	ldr	r3, [pc, #320]	; (8001188 <MX_ADC1_Init+0x194>)
 8001048:	2201      	movs	r2, #1
 800104a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 7;
 800104c:	4b4e      	ldr	r3, [pc, #312]	; (8001188 <MX_ADC1_Init+0x194>)
 800104e:	2207      	movs	r2, #7
 8001050:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001052:	4b4d      	ldr	r3, [pc, #308]	; (8001188 <MX_ADC1_Init+0x194>)
 8001054:	2200      	movs	r2, #0
 8001056:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800105a:	4b4b      	ldr	r3, [pc, #300]	; (8001188 <MX_ADC1_Init+0x194>)
 800105c:	2200      	movs	r2, #0
 800105e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001060:	4b49      	ldr	r3, [pc, #292]	; (8001188 <MX_ADC1_Init+0x194>)
 8001062:	2200      	movs	r2, #0
 8001064:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001066:	4b48      	ldr	r3, [pc, #288]	; (8001188 <MX_ADC1_Init+0x194>)
 8001068:	2201      	movs	r2, #1
 800106a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800106e:	4b46      	ldr	r3, [pc, #280]	; (8001188 <MX_ADC1_Init+0x194>)
 8001070:	2200      	movs	r2, #0
 8001072:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001074:	4b44      	ldr	r3, [pc, #272]	; (8001188 <MX_ADC1_Init+0x194>)
 8001076:	2200      	movs	r2, #0
 8001078:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800107c:	4842      	ldr	r0, [pc, #264]	; (8001188 <MX_ADC1_Init+0x194>)
 800107e:	f000 feef 	bl	8001e60 <HAL_ADC_Init>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001088:	f000 f97a 	bl	8001380 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800108c:	2300      	movs	r3, #0
 800108e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001090:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001094:	4619      	mov	r1, r3
 8001096:	483c      	ldr	r0, [pc, #240]	; (8001188 <MX_ADC1_Init+0x194>)
 8001098:	f001 fef4 	bl	8002e84 <HAL_ADCEx_MultiModeConfigChannel>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80010a2:	f000 f96d 	bl	8001380 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80010a6:	4b39      	ldr	r3, [pc, #228]	; (800118c <MX_ADC1_Init+0x198>)
 80010a8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010aa:	2306      	movs	r3, #6
 80010ac:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 80010ae:	2305      	movs	r3, #5
 80010b0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010b2:	237f      	movs	r3, #127	; 0x7f
 80010b4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010b6:	2304      	movs	r3, #4
 80010b8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010be:	1d3b      	adds	r3, r7, #4
 80010c0:	4619      	mov	r1, r3
 80010c2:	4831      	ldr	r0, [pc, #196]	; (8001188 <MX_ADC1_Init+0x194>)
 80010c4:	f001 f962 	bl	800238c <HAL_ADC_ConfigChannel>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80010ce:	f000 f957 	bl	8001380 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80010d2:	4b2f      	ldr	r3, [pc, #188]	; (8001190 <MX_ADC1_Init+0x19c>)
 80010d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80010d6:	230c      	movs	r3, #12
 80010d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010da:	1d3b      	adds	r3, r7, #4
 80010dc:	4619      	mov	r1, r3
 80010de:	482a      	ldr	r0, [pc, #168]	; (8001188 <MX_ADC1_Init+0x194>)
 80010e0:	f001 f954 	bl	800238c <HAL_ADC_ConfigChannel>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80010ea:	f000 f949 	bl	8001380 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80010ee:	4b29      	ldr	r3, [pc, #164]	; (8001194 <MX_ADC1_Init+0x1a0>)
 80010f0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80010f2:	2312      	movs	r3, #18
 80010f4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010f6:	1d3b      	adds	r3, r7, #4
 80010f8:	4619      	mov	r1, r3
 80010fa:	4823      	ldr	r0, [pc, #140]	; (8001188 <MX_ADC1_Init+0x194>)
 80010fc:	f001 f946 	bl	800238c <HAL_ADC_ConfigChannel>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8001106:	f000 f93b 	bl	8001380 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800110a:	4b23      	ldr	r3, [pc, #140]	; (8001198 <MX_ADC1_Init+0x1a4>)
 800110c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800110e:	2318      	movs	r3, #24
 8001110:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001112:	1d3b      	adds	r3, r7, #4
 8001114:	4619      	mov	r1, r3
 8001116:	481c      	ldr	r0, [pc, #112]	; (8001188 <MX_ADC1_Init+0x194>)
 8001118:	f001 f938 	bl	800238c <HAL_ADC_ConfigChannel>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8001122:	f000 f92d 	bl	8001380 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001126:	4b1d      	ldr	r3, [pc, #116]	; (800119c <MX_ADC1_Init+0x1a8>)
 8001128:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800112a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800112e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	4619      	mov	r1, r3
 8001134:	4814      	ldr	r0, [pc, #80]	; (8001188 <MX_ADC1_Init+0x194>)
 8001136:	f001 f929 	bl	800238c <HAL_ADC_ConfigChannel>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 8001140:	f000 f91e 	bl	8001380 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001144:	4b16      	ldr	r3, [pc, #88]	; (80011a0 <MX_ADC1_Init+0x1ac>)
 8001146:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001148:	f44f 7383 	mov.w	r3, #262	; 0x106
 800114c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800114e:	1d3b      	adds	r3, r7, #4
 8001150:	4619      	mov	r1, r3
 8001152:	480d      	ldr	r0, [pc, #52]	; (8001188 <MX_ADC1_Init+0x194>)
 8001154:	f001 f91a 	bl	800238c <HAL_ADC_ConfigChannel>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 800115e:	f000 f90f 	bl	8001380 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001162:	4b10      	ldr	r3, [pc, #64]	; (80011a4 <MX_ADC1_Init+0x1b0>)
 8001164:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001166:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800116a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800116c:	1d3b      	adds	r3, r7, #4
 800116e:	4619      	mov	r1, r3
 8001170:	4805      	ldr	r0, [pc, #20]	; (8001188 <MX_ADC1_Init+0x194>)
 8001172:	f001 f90b 	bl	800238c <HAL_ADC_ConfigChannel>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 800117c:	f000 f900 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001180:	bf00      	nop
 8001182:	3730      	adds	r7, #48	; 0x30
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	20000058 	.word	0x20000058
 800118c:	04300002 	.word	0x04300002
 8001190:	08600004 	.word	0x08600004
 8001194:	3ef08000 	.word	0x3ef08000
 8001198:	1d500080 	.word	0x1d500080
 800119c:	19200040 	.word	0x19200040
 80011a0:	2e300800 	.word	0x2e300800
 80011a4:	3ac04000 	.word	0x3ac04000

080011a8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ae:	1d3b      	adds	r3, r7, #4
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80011b8:	4b14      	ldr	r3, [pc, #80]	; (800120c <MX_TIM6_Init+0x64>)
 80011ba:	4a15      	ldr	r2, [pc, #84]	; (8001210 <MX_TIM6_Init+0x68>)
 80011bc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 15;
 80011be:	4b13      	ldr	r3, [pc, #76]	; (800120c <MX_TIM6_Init+0x64>)
 80011c0:	220f      	movs	r2, #15
 80011c2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c4:	4b11      	ldr	r3, [pc, #68]	; (800120c <MX_TIM6_Init+0x64>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 19999;
 80011ca:	4b10      	ldr	r3, [pc, #64]	; (800120c <MX_TIM6_Init+0x64>)
 80011cc:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80011d0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011d2:	4b0e      	ldr	r3, [pc, #56]	; (800120c <MX_TIM6_Init+0x64>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80011d8:	480c      	ldr	r0, [pc, #48]	; (800120c <MX_TIM6_Init+0x64>)
 80011da:	f003 fd0d 	bl	8004bf8 <HAL_TIM_Base_Init>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80011e4:	f000 f8cc 	bl	8001380 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e8:	2300      	movs	r3, #0
 80011ea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ec:	2300      	movs	r3, #0
 80011ee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80011f0:	1d3b      	adds	r3, r7, #4
 80011f2:	4619      	mov	r1, r3
 80011f4:	4805      	ldr	r0, [pc, #20]	; (800120c <MX_TIM6_Init+0x64>)
 80011f6:	f003 ffe9 	bl	80051cc <HAL_TIMEx_MasterConfigSynchronization>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001200:	f000 f8be 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001204:	bf00      	nop
 8001206:	3710      	adds	r7, #16
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	20000124 	.word	0x20000124
 8001210:	40001000 	.word	0x40001000

08001214 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001218:	4b22      	ldr	r3, [pc, #136]	; (80012a4 <MX_USART1_UART_Init+0x90>)
 800121a:	4a23      	ldr	r2, [pc, #140]	; (80012a8 <MX_USART1_UART_Init+0x94>)
 800121c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800121e:	4b21      	ldr	r3, [pc, #132]	; (80012a4 <MX_USART1_UART_Init+0x90>)
 8001220:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001224:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001226:	4b1f      	ldr	r3, [pc, #124]	; (80012a4 <MX_USART1_UART_Init+0x90>)
 8001228:	2200      	movs	r2, #0
 800122a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800122c:	4b1d      	ldr	r3, [pc, #116]	; (80012a4 <MX_USART1_UART_Init+0x90>)
 800122e:	2200      	movs	r2, #0
 8001230:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001232:	4b1c      	ldr	r3, [pc, #112]	; (80012a4 <MX_USART1_UART_Init+0x90>)
 8001234:	2200      	movs	r2, #0
 8001236:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001238:	4b1a      	ldr	r3, [pc, #104]	; (80012a4 <MX_USART1_UART_Init+0x90>)
 800123a:	220c      	movs	r2, #12
 800123c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800123e:	4b19      	ldr	r3, [pc, #100]	; (80012a4 <MX_USART1_UART_Init+0x90>)
 8001240:	2200      	movs	r2, #0
 8001242:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001244:	4b17      	ldr	r3, [pc, #92]	; (80012a4 <MX_USART1_UART_Init+0x90>)
 8001246:	2200      	movs	r2, #0
 8001248:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800124a:	4b16      	ldr	r3, [pc, #88]	; (80012a4 <MX_USART1_UART_Init+0x90>)
 800124c:	2200      	movs	r2, #0
 800124e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001250:	4b14      	ldr	r3, [pc, #80]	; (80012a4 <MX_USART1_UART_Init+0x90>)
 8001252:	2200      	movs	r2, #0
 8001254:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001256:	4b13      	ldr	r3, [pc, #76]	; (80012a4 <MX_USART1_UART_Init+0x90>)
 8001258:	2200      	movs	r2, #0
 800125a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800125c:	4811      	ldr	r0, [pc, #68]	; (80012a4 <MX_USART1_UART_Init+0x90>)
 800125e:	f004 f889 	bl	8005374 <HAL_UART_Init>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001268:	f000 f88a 	bl	8001380 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800126c:	2100      	movs	r1, #0
 800126e:	480d      	ldr	r0, [pc, #52]	; (80012a4 <MX_USART1_UART_Init+0x90>)
 8001270:	f005 fcd5 	bl	8006c1e <HAL_UARTEx_SetTxFifoThreshold>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800127a:	f000 f881 	bl	8001380 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800127e:	2100      	movs	r1, #0
 8001280:	4808      	ldr	r0, [pc, #32]	; (80012a4 <MX_USART1_UART_Init+0x90>)
 8001282:	f005 fd0a 	bl	8006c9a <HAL_UARTEx_SetRxFifoThreshold>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800128c:	f000 f878 	bl	8001380 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001290:	4804      	ldr	r0, [pc, #16]	; (80012a4 <MX_USART1_UART_Init+0x90>)
 8001292:	f005 fc8b 	bl	8006bac <HAL_UARTEx_DisableFifoMode>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800129c:	f000 f870 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012a0:	bf00      	nop
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20000170 	.word	0x20000170
 80012a8:	40013800 	.word	0x40013800

080012ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80012b2:	4b1a      	ldr	r3, [pc, #104]	; (800131c <MX_DMA_Init+0x70>)
 80012b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012b6:	4a19      	ldr	r2, [pc, #100]	; (800131c <MX_DMA_Init+0x70>)
 80012b8:	f043 0304 	orr.w	r3, r3, #4
 80012bc:	6493      	str	r3, [r2, #72]	; 0x48
 80012be:	4b17      	ldr	r3, [pc, #92]	; (800131c <MX_DMA_Init+0x70>)
 80012c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012c2:	f003 0304 	and.w	r3, r3, #4
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012ca:	4b14      	ldr	r3, [pc, #80]	; (800131c <MX_DMA_Init+0x70>)
 80012cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012ce:	4a13      	ldr	r2, [pc, #76]	; (800131c <MX_DMA_Init+0x70>)
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	6493      	str	r3, [r2, #72]	; 0x48
 80012d6:	4b11      	ldr	r3, [pc, #68]	; (800131c <MX_DMA_Init+0x70>)
 80012d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	603b      	str	r3, [r7, #0]
 80012e0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80012e2:	2200      	movs	r2, #0
 80012e4:	2100      	movs	r1, #0
 80012e6:	200b      	movs	r0, #11
 80012e8:	f001 ff8f 	bl	800320a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80012ec:	200b      	movs	r0, #11
 80012ee:	f001 ffa6 	bl	800323e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2100      	movs	r1, #0
 80012f6:	200c      	movs	r0, #12
 80012f8:	f001 ff87 	bl	800320a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80012fc:	200c      	movs	r0, #12
 80012fe:	f001 ff9e 	bl	800323e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001302:	2200      	movs	r2, #0
 8001304:	2100      	movs	r1, #0
 8001306:	200d      	movs	r0, #13
 8001308:	f001 ff7f 	bl	800320a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800130c:	200d      	movs	r0, #13
 800130e:	f001 ff96 	bl	800323e <HAL_NVIC_EnableIRQ>

}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40021000 	.word	0x40021000

08001320 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001326:	4b15      	ldr	r3, [pc, #84]	; (800137c <MX_GPIO_Init+0x5c>)
 8001328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132a:	4a14      	ldr	r2, [pc, #80]	; (800137c <MX_GPIO_Init+0x5c>)
 800132c:	f043 0304 	orr.w	r3, r3, #4
 8001330:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001332:	4b12      	ldr	r3, [pc, #72]	; (800137c <MX_GPIO_Init+0x5c>)
 8001334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001336:	f003 0304 	and.w	r3, r3, #4
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800133e:	4b0f      	ldr	r3, [pc, #60]	; (800137c <MX_GPIO_Init+0x5c>)
 8001340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001342:	4a0e      	ldr	r2, [pc, #56]	; (800137c <MX_GPIO_Init+0x5c>)
 8001344:	f043 0301 	orr.w	r3, r3, #1
 8001348:	64d3      	str	r3, [r2, #76]	; 0x4c
 800134a:	4b0c      	ldr	r3, [pc, #48]	; (800137c <MX_GPIO_Init+0x5c>)
 800134c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	60bb      	str	r3, [r7, #8]
 8001354:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001356:	4b09      	ldr	r3, [pc, #36]	; (800137c <MX_GPIO_Init+0x5c>)
 8001358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135a:	4a08      	ldr	r2, [pc, #32]	; (800137c <MX_GPIO_Init+0x5c>)
 800135c:	f043 0302 	orr.w	r3, r3, #2
 8001360:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001362:	4b06      	ldr	r3, [pc, #24]	; (800137c <MX_GPIO_Init+0x5c>)
 8001364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	607b      	str	r3, [r7, #4]
 800136c:	687b      	ldr	r3, [r7, #4]

}
 800136e:	bf00      	nop
 8001370:	3714      	adds	r7, #20
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	40021000 	.word	0x40021000

08001380 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001384:	b672      	cpsid	i
}
 8001386:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001388:	e7fe      	b.n	8001388 <Error_Handler+0x8>
	...

0800138c <main_function>:
float sp[2];
int tx = 0, rx = 0, timer;
float speed1, speed2;
uint8_t buffer_RX[2 * sizeof(float)];

void main_function(){
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0

	HAL_UART_Receive_DMA(&huart1, buffer_RX, sizeof(buffer_RX));
 8001390:	2208      	movs	r2, #8
 8001392:	4906      	ldr	r1, [pc, #24]	; (80013ac <main_function+0x20>)
 8001394:	4806      	ldr	r0, [pc, #24]	; (80013b0 <main_function+0x24>)
 8001396:	f004 f8bd 	bl	8005514 <HAL_UART_Receive_DMA>
	HAL_TIM_Base_Start_IT(&htim6);
 800139a:	4806      	ldr	r0, [pc, #24]	; (80013b4 <main_function+0x28>)
 800139c:	f003 fc84 	bl	8004ca8 <HAL_TIM_Base_Start_IT>

	path_setup();
 80013a0:	f7ff fbf2 	bl	8000b88 <_Z10path_setupv>

	while(1){

		path(sp);
 80013a4:	4804      	ldr	r0, [pc, #16]	; (80013b8 <main_function+0x2c>)
 80013a6:	f7ff fc0b 	bl	8000bc0 <_Z4pathPf>
 80013aa:	e7fb      	b.n	80013a4 <main_function+0x18>
 80013ac:	200002e0 	.word	0x200002e0
 80013b0:	20000170 	.word	0x20000170
 80013b4:	20000124 	.word	0x20000124
 80013b8:	200002c4 	.word	0x200002c4

080013bc <HAL_UART_TxCpltCallback>:

	}
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]

	if(huart -> Instance == USART1)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a06      	ldr	r2, [pc, #24]	; (80013e4 <HAL_UART_TxCpltCallback+0x28>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d104      	bne.n	80013d8 <HAL_UART_TxCpltCallback+0x1c>
        tx++;
 80013ce:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <HAL_UART_TxCpltCallback+0x2c>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	3301      	adds	r3, #1
 80013d4:	4a04      	ldr	r2, [pc, #16]	; (80013e8 <HAL_UART_TxCpltCallback+0x2c>)
 80013d6:	6013      	str	r3, [r2, #0]

}
 80013d8:	bf00      	nop
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	40013800 	.word	0x40013800
 80013e8:	200002cc 	.word	0x200002cc

080013ec <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef*huart){
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]

	if(huart -> Instance == USART1){
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a0c      	ldr	r2, [pc, #48]	; (800142c <HAL_UART_RxCpltCallback+0x40>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d112      	bne.n	8001424 <HAL_UART_RxCpltCallback+0x38>
 80013fe:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <HAL_UART_RxCpltCallback+0x44>)
 8001400:	681b      	ldr	r3, [r3, #0]

		memcpy(&speed1, buffer_RX, sizeof(float));
 8001402:	4a0c      	ldr	r2, [pc, #48]	; (8001434 <HAL_UART_RxCpltCallback+0x48>)
 8001404:	6013      	str	r3, [r2, #0]
	    memcpy(&speed2, buffer_RX + sizeof(float), sizeof(float));
 8001406:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <HAL_UART_RxCpltCallback+0x4c>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	461a      	mov	r2, r3
 800140c:	4b0b      	ldr	r3, [pc, #44]	; (800143c <HAL_UART_RxCpltCallback+0x50>)
 800140e:	601a      	str	r2, [r3, #0]

	    HAL_UART_Receive_DMA(&huart1, buffer_RX, sizeof(buffer_RX));
 8001410:	2208      	movs	r2, #8
 8001412:	4907      	ldr	r1, [pc, #28]	; (8001430 <HAL_UART_RxCpltCallback+0x44>)
 8001414:	480a      	ldr	r0, [pc, #40]	; (8001440 <HAL_UART_RxCpltCallback+0x54>)
 8001416:	f004 f87d 	bl	8005514 <HAL_UART_Receive_DMA>

		rx++;
 800141a:	4b0a      	ldr	r3, [pc, #40]	; (8001444 <HAL_UART_RxCpltCallback+0x58>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	3301      	adds	r3, #1
 8001420:	4a08      	ldr	r2, [pc, #32]	; (8001444 <HAL_UART_RxCpltCallback+0x58>)
 8001422:	6013      	str	r3, [r2, #0]
	}
}
 8001424:	bf00      	nop
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40013800 	.word	0x40013800
 8001430:	200002e0 	.word	0x200002e0
 8001434:	200002d8 	.word	0x200002d8
 8001438:	200002e4 	.word	0x200002e4
 800143c:	200002dc 	.word	0x200002dc
 8001440:	20000170 	.word	0x20000170
 8001444:	200002d0 	.word	0x200002d0

08001448 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef*htim){
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]

	if (htim -> Instance == TIM6){
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a0c      	ldr	r2, [pc, #48]	; (8001488 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d111      	bne.n	800147e <HAL_TIM_PeriodElapsedCallback+0x36>

		timer++;
 800145a:	4b0c      	ldr	r3, [pc, #48]	; (800148c <HAL_TIM_PeriodElapsedCallback+0x44>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	3301      	adds	r3, #1
 8001460:	4a0a      	ldr	r2, [pc, #40]	; (800148c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001462:	6013      	str	r3, [r2, #0]
		UART_Transmit_Two_Floats_DMA(&huart1,sp[0],sp[1]);
 8001464:	4b0a      	ldr	r3, [pc, #40]	; (8001490 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001466:	edd3 7a00 	vldr	s15, [r3]
 800146a:	4b09      	ldr	r3, [pc, #36]	; (8001490 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800146c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001470:	eef0 0a47 	vmov.f32	s1, s14
 8001474:	eeb0 0a67 	vmov.f32	s0, s15
 8001478:	4806      	ldr	r0, [pc, #24]	; (8001494 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800147a:	f7ff fd4b 	bl	8000f14 <_Z28UART_Transmit_Two_Floats_DMAP20__UART_HandleTypeDefff>

	}
}
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40001000 	.word	0x40001000
 800148c:	200002d4 	.word	0x200002d4
 8001490:	200002c4 	.word	0x200002c4
 8001494:	20000170 	.word	0x20000170

08001498 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800149e:	4b0f      	ldr	r3, [pc, #60]	; (80014dc <HAL_MspInit+0x44>)
 80014a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014a2:	4a0e      	ldr	r2, [pc, #56]	; (80014dc <HAL_MspInit+0x44>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	6613      	str	r3, [r2, #96]	; 0x60
 80014aa:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <HAL_MspInit+0x44>)
 80014ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	607b      	str	r3, [r7, #4]
 80014b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014b6:	4b09      	ldr	r3, [pc, #36]	; (80014dc <HAL_MspInit+0x44>)
 80014b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ba:	4a08      	ldr	r2, [pc, #32]	; (80014dc <HAL_MspInit+0x44>)
 80014bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c0:	6593      	str	r3, [r2, #88]	; 0x58
 80014c2:	4b06      	ldr	r3, [pc, #24]	; (80014dc <HAL_MspInit+0x44>)
 80014c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ca:	603b      	str	r3, [r7, #0]
 80014cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ce:	bf00      	nop
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	40021000 	.word	0x40021000

080014e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b0a0      	sub	sp, #128	; 0x80
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
 80014f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014f8:	f107 031c 	add.w	r3, r7, #28
 80014fc:	2250      	movs	r2, #80	; 0x50
 80014fe:	2100      	movs	r1, #0
 8001500:	4618      	mov	r0, r3
 8001502:	f005 fc7b 	bl	8006dfc <memset>
  if(hadc->Instance==ADC1)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800150e:	f040 8091 	bne.w	8001634 <HAL_ADC_MspInit+0x154>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001512:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001516:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001518:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800151c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800151e:	f107 031c 	add.w	r3, r7, #28
 8001522:	4618      	mov	r0, r3
 8001524:	f003 f92c 	bl	8004780 <HAL_RCCEx_PeriphCLKConfig>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 800152e:	f7ff ff27 	bl	8001380 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001532:	4b42      	ldr	r3, [pc, #264]	; (800163c <HAL_ADC_MspInit+0x15c>)
 8001534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001536:	4a41      	ldr	r2, [pc, #260]	; (800163c <HAL_ADC_MspInit+0x15c>)
 8001538:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800153c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800153e:	4b3f      	ldr	r3, [pc, #252]	; (800163c <HAL_ADC_MspInit+0x15c>)
 8001540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001542:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001546:	61bb      	str	r3, [r7, #24]
 8001548:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800154a:	4b3c      	ldr	r3, [pc, #240]	; (800163c <HAL_ADC_MspInit+0x15c>)
 800154c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154e:	4a3b      	ldr	r2, [pc, #236]	; (800163c <HAL_ADC_MspInit+0x15c>)
 8001550:	f043 0304 	orr.w	r3, r3, #4
 8001554:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001556:	4b39      	ldr	r3, [pc, #228]	; (800163c <HAL_ADC_MspInit+0x15c>)
 8001558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155a:	f003 0304 	and.w	r3, r3, #4
 800155e:	617b      	str	r3, [r7, #20]
 8001560:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001562:	4b36      	ldr	r3, [pc, #216]	; (800163c <HAL_ADC_MspInit+0x15c>)
 8001564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001566:	4a35      	ldr	r2, [pc, #212]	; (800163c <HAL_ADC_MspInit+0x15c>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800156e:	4b33      	ldr	r3, [pc, #204]	; (800163c <HAL_ADC_MspInit+0x15c>)
 8001570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	613b      	str	r3, [r7, #16]
 8001578:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800157a:	4b30      	ldr	r3, [pc, #192]	; (800163c <HAL_ADC_MspInit+0x15c>)
 800157c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800157e:	4a2f      	ldr	r2, [pc, #188]	; (800163c <HAL_ADC_MspInit+0x15c>)
 8001580:	f043 0302 	orr.w	r3, r3, #2
 8001584:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001586:	4b2d      	ldr	r3, [pc, #180]	; (800163c <HAL_ADC_MspInit+0x15c>)
 8001588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB11     ------> ADC1_IN14
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001592:	2303      	movs	r3, #3
 8001594:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001596:	2303      	movs	r3, #3
 8001598:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800159e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80015a2:	4619      	mov	r1, r3
 80015a4:	4826      	ldr	r0, [pc, #152]	; (8001640 <HAL_ADC_MspInit+0x160>)
 80015a6:	f002 f997 	bl	80038d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015aa:	2303      	movs	r3, #3
 80015ac:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015ae:	2303      	movs	r3, #3
 80015b0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b2:	2300      	movs	r3, #0
 80015b4:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80015ba:	4619      	mov	r1, r3
 80015bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015c0:	f002 f98a 	bl	80038d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_11|GPIO_PIN_12;
 80015c4:	f641 0301 	movw	r3, #6145	; 0x1801
 80015c8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015ca:	2303      	movs	r3, #3
 80015cc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80015d6:	4619      	mov	r1, r3
 80015d8:	481a      	ldr	r0, [pc, #104]	; (8001644 <HAL_ADC_MspInit+0x164>)
 80015da:	f002 f97d 	bl	80038d8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 80015de:	4b1a      	ldr	r3, [pc, #104]	; (8001648 <HAL_ADC_MspInit+0x168>)
 80015e0:	4a1a      	ldr	r2, [pc, #104]	; (800164c <HAL_ADC_MspInit+0x16c>)
 80015e2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80015e4:	4b18      	ldr	r3, [pc, #96]	; (8001648 <HAL_ADC_MspInit+0x168>)
 80015e6:	2205      	movs	r2, #5
 80015e8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015ea:	4b17      	ldr	r3, [pc, #92]	; (8001648 <HAL_ADC_MspInit+0x168>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80015f0:	4b15      	ldr	r3, [pc, #84]	; (8001648 <HAL_ADC_MspInit+0x168>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80015f6:	4b14      	ldr	r3, [pc, #80]	; (8001648 <HAL_ADC_MspInit+0x168>)
 80015f8:	2280      	movs	r2, #128	; 0x80
 80015fa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015fc:	4b12      	ldr	r3, [pc, #72]	; (8001648 <HAL_ADC_MspInit+0x168>)
 80015fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001602:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001604:	4b10      	ldr	r3, [pc, #64]	; (8001648 <HAL_ADC_MspInit+0x168>)
 8001606:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800160a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800160c:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <HAL_ADC_MspInit+0x168>)
 800160e:	2220      	movs	r2, #32
 8001610:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001612:	4b0d      	ldr	r3, [pc, #52]	; (8001648 <HAL_ADC_MspInit+0x168>)
 8001614:	2200      	movs	r2, #0
 8001616:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001618:	480b      	ldr	r0, [pc, #44]	; (8001648 <HAL_ADC_MspInit+0x168>)
 800161a:	f001 fe2b 	bl	8003274 <HAL_DMA_Init>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <HAL_ADC_MspInit+0x148>
    {
      Error_Handler();
 8001624:	f7ff feac 	bl	8001380 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4a07      	ldr	r2, [pc, #28]	; (8001648 <HAL_ADC_MspInit+0x168>)
 800162c:	655a      	str	r2, [r3, #84]	; 0x54
 800162e:	4a06      	ldr	r2, [pc, #24]	; (8001648 <HAL_ADC_MspInit+0x168>)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001634:	bf00      	nop
 8001636:	3780      	adds	r7, #128	; 0x80
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40021000 	.word	0x40021000
 8001640:	48000800 	.word	0x48000800
 8001644:	48000400 	.word	0x48000400
 8001648:	200000c4 	.word	0x200000c4
 800164c:	40020030 	.word	0x40020030

08001650 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a0d      	ldr	r2, [pc, #52]	; (8001694 <HAL_TIM_Base_MspInit+0x44>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d113      	bne.n	800168a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001662:	4b0d      	ldr	r3, [pc, #52]	; (8001698 <HAL_TIM_Base_MspInit+0x48>)
 8001664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001666:	4a0c      	ldr	r2, [pc, #48]	; (8001698 <HAL_TIM_Base_MspInit+0x48>)
 8001668:	f043 0310 	orr.w	r3, r3, #16
 800166c:	6593      	str	r3, [r2, #88]	; 0x58
 800166e:	4b0a      	ldr	r3, [pc, #40]	; (8001698 <HAL_TIM_Base_MspInit+0x48>)
 8001670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001672:	f003 0310 	and.w	r3, r3, #16
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800167a:	2200      	movs	r2, #0
 800167c:	2100      	movs	r1, #0
 800167e:	2036      	movs	r0, #54	; 0x36
 8001680:	f001 fdc3 	bl	800320a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001684:	2036      	movs	r0, #54	; 0x36
 8001686:	f001 fdda 	bl	800323e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800168a:	bf00      	nop
 800168c:	3710      	adds	r7, #16
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40001000 	.word	0x40001000
 8001698:	40021000 	.word	0x40021000

0800169c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b09e      	sub	sp, #120	; 0x78
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	605a      	str	r2, [r3, #4]
 80016ae:	609a      	str	r2, [r3, #8]
 80016b0:	60da      	str	r2, [r3, #12]
 80016b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016b4:	f107 0314 	add.w	r3, r7, #20
 80016b8:	2250      	movs	r2, #80	; 0x50
 80016ba:	2100      	movs	r1, #0
 80016bc:	4618      	mov	r0, r3
 80016be:	f005 fb9d 	bl	8006dfc <memset>
  if(huart->Instance==USART1)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a4c      	ldr	r2, [pc, #304]	; (80017f8 <HAL_UART_MspInit+0x15c>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	f040 8091 	bne.w	80017f0 <HAL_UART_MspInit+0x154>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80016ce:	2301      	movs	r3, #1
 80016d0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80016d2:	2300      	movs	r3, #0
 80016d4:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016d6:	f107 0314 	add.w	r3, r7, #20
 80016da:	4618      	mov	r0, r3
 80016dc:	f003 f850 	bl	8004780 <HAL_RCCEx_PeriphCLKConfig>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80016e6:	f7ff fe4b 	bl	8001380 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016ea:	4b44      	ldr	r3, [pc, #272]	; (80017fc <HAL_UART_MspInit+0x160>)
 80016ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ee:	4a43      	ldr	r2, [pc, #268]	; (80017fc <HAL_UART_MspInit+0x160>)
 80016f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016f4:	6613      	str	r3, [r2, #96]	; 0x60
 80016f6:	4b41      	ldr	r3, [pc, #260]	; (80017fc <HAL_UART_MspInit+0x160>)
 80016f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016fe:	613b      	str	r3, [r7, #16]
 8001700:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001702:	4b3e      	ldr	r3, [pc, #248]	; (80017fc <HAL_UART_MspInit+0x160>)
 8001704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001706:	4a3d      	ldr	r2, [pc, #244]	; (80017fc <HAL_UART_MspInit+0x160>)
 8001708:	f043 0304 	orr.w	r3, r3, #4
 800170c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800170e:	4b3b      	ldr	r3, [pc, #236]	; (80017fc <HAL_UART_MspInit+0x160>)
 8001710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001712:	f003 0304 	and.w	r3, r3, #4
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800171a:	2330      	movs	r3, #48	; 0x30
 800171c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171e:	2302      	movs	r3, #2
 8001720:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001722:	2300      	movs	r3, #0
 8001724:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001726:	2300      	movs	r3, #0
 8001728:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800172a:	2307      	movs	r3, #7
 800172c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800172e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001732:	4619      	mov	r1, r3
 8001734:	4832      	ldr	r0, [pc, #200]	; (8001800 <HAL_UART_MspInit+0x164>)
 8001736:	f002 f8cf 	bl	80038d8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 800173a:	4b32      	ldr	r3, [pc, #200]	; (8001804 <HAL_UART_MspInit+0x168>)
 800173c:	4a32      	ldr	r2, [pc, #200]	; (8001808 <HAL_UART_MspInit+0x16c>)
 800173e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001740:	4b30      	ldr	r3, [pc, #192]	; (8001804 <HAL_UART_MspInit+0x168>)
 8001742:	2218      	movs	r2, #24
 8001744:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001746:	4b2f      	ldr	r3, [pc, #188]	; (8001804 <HAL_UART_MspInit+0x168>)
 8001748:	2200      	movs	r2, #0
 800174a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800174c:	4b2d      	ldr	r3, [pc, #180]	; (8001804 <HAL_UART_MspInit+0x168>)
 800174e:	2200      	movs	r2, #0
 8001750:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001752:	4b2c      	ldr	r3, [pc, #176]	; (8001804 <HAL_UART_MspInit+0x168>)
 8001754:	2280      	movs	r2, #128	; 0x80
 8001756:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001758:	4b2a      	ldr	r3, [pc, #168]	; (8001804 <HAL_UART_MspInit+0x168>)
 800175a:	2200      	movs	r2, #0
 800175c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800175e:	4b29      	ldr	r3, [pc, #164]	; (8001804 <HAL_UART_MspInit+0x168>)
 8001760:	2200      	movs	r2, #0
 8001762:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001764:	4b27      	ldr	r3, [pc, #156]	; (8001804 <HAL_UART_MspInit+0x168>)
 8001766:	2200      	movs	r2, #0
 8001768:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800176a:	4b26      	ldr	r3, [pc, #152]	; (8001804 <HAL_UART_MspInit+0x168>)
 800176c:	2200      	movs	r2, #0
 800176e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001770:	4824      	ldr	r0, [pc, #144]	; (8001804 <HAL_UART_MspInit+0x168>)
 8001772:	f001 fd7f 	bl	8003274 <HAL_DMA_Init>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 800177c:	f7ff fe00 	bl	8001380 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	4a20      	ldr	r2, [pc, #128]	; (8001804 <HAL_UART_MspInit+0x168>)
 8001784:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001788:	4a1e      	ldr	r2, [pc, #120]	; (8001804 <HAL_UART_MspInit+0x168>)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 800178e:	4b1f      	ldr	r3, [pc, #124]	; (800180c <HAL_UART_MspInit+0x170>)
 8001790:	4a1f      	ldr	r2, [pc, #124]	; (8001810 <HAL_UART_MspInit+0x174>)
 8001792:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001794:	4b1d      	ldr	r3, [pc, #116]	; (800180c <HAL_UART_MspInit+0x170>)
 8001796:	2219      	movs	r2, #25
 8001798:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800179a:	4b1c      	ldr	r3, [pc, #112]	; (800180c <HAL_UART_MspInit+0x170>)
 800179c:	2210      	movs	r2, #16
 800179e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017a0:	4b1a      	ldr	r3, [pc, #104]	; (800180c <HAL_UART_MspInit+0x170>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017a6:	4b19      	ldr	r3, [pc, #100]	; (800180c <HAL_UART_MspInit+0x170>)
 80017a8:	2280      	movs	r2, #128	; 0x80
 80017aa:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017ac:	4b17      	ldr	r3, [pc, #92]	; (800180c <HAL_UART_MspInit+0x170>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017b2:	4b16      	ldr	r3, [pc, #88]	; (800180c <HAL_UART_MspInit+0x170>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80017b8:	4b14      	ldr	r3, [pc, #80]	; (800180c <HAL_UART_MspInit+0x170>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80017be:	4b13      	ldr	r3, [pc, #76]	; (800180c <HAL_UART_MspInit+0x170>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80017c4:	4811      	ldr	r0, [pc, #68]	; (800180c <HAL_UART_MspInit+0x170>)
 80017c6:	f001 fd55 	bl	8003274 <HAL_DMA_Init>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 80017d0:	f7ff fdd6 	bl	8001380 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	4a0d      	ldr	r2, [pc, #52]	; (800180c <HAL_UART_MspInit+0x170>)
 80017d8:	67da      	str	r2, [r3, #124]	; 0x7c
 80017da:	4a0c      	ldr	r2, [pc, #48]	; (800180c <HAL_UART_MspInit+0x170>)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80017e0:	2200      	movs	r2, #0
 80017e2:	2100      	movs	r1, #0
 80017e4:	2025      	movs	r0, #37	; 0x25
 80017e6:	f001 fd10 	bl	800320a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80017ea:	2025      	movs	r0, #37	; 0x25
 80017ec:	f001 fd27 	bl	800323e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80017f0:	bf00      	nop
 80017f2:	3778      	adds	r7, #120	; 0x78
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	40013800 	.word	0x40013800
 80017fc:	40021000 	.word	0x40021000
 8001800:	48000800 	.word	0x48000800
 8001804:	20000204 	.word	0x20000204
 8001808:	40020008 	.word	0x40020008
 800180c:	20000264 	.word	0x20000264
 8001810:	4002001c 	.word	0x4002001c

08001814 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001818:	e7fe      	b.n	8001818 <NMI_Handler+0x4>

0800181a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800181a:	b480      	push	{r7}
 800181c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800181e:	e7fe      	b.n	800181e <HardFault_Handler+0x4>

08001820 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001824:	e7fe      	b.n	8001824 <MemManage_Handler+0x4>

08001826 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001826:	b480      	push	{r7}
 8001828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800182a:	e7fe      	b.n	800182a <BusFault_Handler+0x4>

0800182c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001830:	e7fe      	b.n	8001830 <UsageFault_Handler+0x4>

08001832 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001832:	b480      	push	{r7}
 8001834:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr

0800184e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800184e:	b480      	push	{r7}
 8001850:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001852:	bf00      	nop
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001860:	f000 f8c2 	bl	80019e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001864:	bf00      	nop
 8001866:	bd80      	pop	{r7, pc}

08001868 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800186c:	4802      	ldr	r0, [pc, #8]	; (8001878 <DMA1_Channel1_IRQHandler+0x10>)
 800186e:	f001 fee4 	bl	800363a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	20000204 	.word	0x20000204

0800187c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001880:	4802      	ldr	r0, [pc, #8]	; (800188c <DMA1_Channel2_IRQHandler+0x10>)
 8001882:	f001 feda 	bl	800363a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20000264 	.word	0x20000264

08001890 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001894:	4802      	ldr	r0, [pc, #8]	; (80018a0 <DMA1_Channel3_IRQHandler+0x10>)
 8001896:	f001 fed0 	bl	800363a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	200000c4 	.word	0x200000c4

080018a4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80018a8:	4802      	ldr	r0, [pc, #8]	; (80018b4 <USART1_IRQHandler+0x10>)
 80018aa:	f003 fe7f 	bl	80055ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20000170 	.word	0x20000170

080018b8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80018bc:	4802      	ldr	r0, [pc, #8]	; (80018c8 <TIM6_DAC_IRQHandler+0x10>)
 80018be:	f003 fa63 	bl	8004d88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	20000124 	.word	0x20000124

080018cc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80018d0:	4b06      	ldr	r3, [pc, #24]	; (80018ec <SystemInit+0x20>)
 80018d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018d6:	4a05      	ldr	r2, [pc, #20]	; (80018ec <SystemInit+0x20>)
 80018d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018e0:	bf00      	nop
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	e000ed00 	.word	0xe000ed00

080018f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80018f0:	480d      	ldr	r0, [pc, #52]	; (8001928 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80018f2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80018f4:	f7ff ffea 	bl	80018cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018f8:	480c      	ldr	r0, [pc, #48]	; (800192c <LoopForever+0x6>)
  ldr r1, =_edata
 80018fa:	490d      	ldr	r1, [pc, #52]	; (8001930 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018fc:	4a0d      	ldr	r2, [pc, #52]	; (8001934 <LoopForever+0xe>)
  movs r3, #0
 80018fe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001900:	e002      	b.n	8001908 <LoopCopyDataInit>

08001902 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001902:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001904:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001906:	3304      	adds	r3, #4

08001908 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001908:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800190a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800190c:	d3f9      	bcc.n	8001902 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800190e:	4a0a      	ldr	r2, [pc, #40]	; (8001938 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001910:	4c0a      	ldr	r4, [pc, #40]	; (800193c <LoopForever+0x16>)
  movs r3, #0
 8001912:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001914:	e001      	b.n	800191a <LoopFillZerobss>

08001916 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001916:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001918:	3204      	adds	r2, #4

0800191a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800191a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800191c:	d3fb      	bcc.n	8001916 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800191e:	f005 fa49 	bl	8006db4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001922:	f7ff fb13 	bl	8000f4c <main>

08001926 <LoopForever>:

LoopForever:
    b LoopForever
 8001926:	e7fe      	b.n	8001926 <LoopForever>
  ldr   r0, =_estack
 8001928:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 800192c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001930:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001934:	08006e74 	.word	0x08006e74
  ldr r2, =_sbss
 8001938:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800193c:	200002ec 	.word	0x200002ec

08001940 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001940:	e7fe      	b.n	8001940 <ADC1_2_IRQHandler>

08001942 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	b082      	sub	sp, #8
 8001946:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001948:	2300      	movs	r3, #0
 800194a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800194c:	2003      	movs	r0, #3
 800194e:	f001 fc51 	bl	80031f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001952:	200f      	movs	r0, #15
 8001954:	f000 f80e 	bl	8001974 <HAL_InitTick>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d002      	beq.n	8001964 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	71fb      	strb	r3, [r7, #7]
 8001962:	e001      	b.n	8001968 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001964:	f7ff fd98 	bl	8001498 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001968:	79fb      	ldrb	r3, [r7, #7]

}
 800196a:	4618      	mov	r0, r3
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
	...

08001974 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800197c:	2300      	movs	r3, #0
 800197e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001980:	4b16      	ldr	r3, [pc, #88]	; (80019dc <HAL_InitTick+0x68>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d022      	beq.n	80019ce <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001988:	4b15      	ldr	r3, [pc, #84]	; (80019e0 <HAL_InitTick+0x6c>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	4b13      	ldr	r3, [pc, #76]	; (80019dc <HAL_InitTick+0x68>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001994:	fbb1 f3f3 	udiv	r3, r1, r3
 8001998:	fbb2 f3f3 	udiv	r3, r2, r3
 800199c:	4618      	mov	r0, r3
 800199e:	f001 fc5c 	bl	800325a <HAL_SYSTICK_Config>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d10f      	bne.n	80019c8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2b0f      	cmp	r3, #15
 80019ac:	d809      	bhi.n	80019c2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019ae:	2200      	movs	r2, #0
 80019b0:	6879      	ldr	r1, [r7, #4]
 80019b2:	f04f 30ff 	mov.w	r0, #4294967295
 80019b6:	f001 fc28 	bl	800320a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019ba:	4a0a      	ldr	r2, [pc, #40]	; (80019e4 <HAL_InitTick+0x70>)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6013      	str	r3, [r2, #0]
 80019c0:	e007      	b.n	80019d2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	73fb      	strb	r3, [r7, #15]
 80019c6:	e004      	b.n	80019d2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	73fb      	strb	r3, [r7, #15]
 80019cc:	e001      	b.n	80019d2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80019d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3710      	adds	r7, #16
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	20000008 	.word	0x20000008
 80019e0:	20000000 	.word	0x20000000
 80019e4:	20000004 	.word	0x20000004

080019e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019ec:	4b05      	ldr	r3, [pc, #20]	; (8001a04 <HAL_IncTick+0x1c>)
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	4b05      	ldr	r3, [pc, #20]	; (8001a08 <HAL_IncTick+0x20>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4413      	add	r3, r2
 80019f6:	4a03      	ldr	r2, [pc, #12]	; (8001a04 <HAL_IncTick+0x1c>)
 80019f8:	6013      	str	r3, [r2, #0]
}
 80019fa:	bf00      	nop
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	200002e8 	.word	0x200002e8
 8001a08:	20000008 	.word	0x20000008

08001a0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a10:	4b03      	ldr	r3, [pc, #12]	; (8001a20 <HAL_GetTick+0x14>)
 8001a12:	681b      	ldr	r3, [r3, #0]
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	200002e8 	.word	0x200002e8

08001a24 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	431a      	orrs	r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	609a      	str	r2, [r3, #8]
}
 8001a3e:	bf00      	nop
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b083      	sub	sp, #12
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
 8001a52:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	431a      	orrs	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	609a      	str	r2, [r3, #8]
}
 8001a64:	bf00      	nop
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b087      	sub	sp, #28
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
 8001a98:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	3360      	adds	r3, #96	; 0x60
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	4413      	add	r3, r2
 8001aa6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	4b08      	ldr	r3, [pc, #32]	; (8001ad0 <LL_ADC_SetOffset+0x44>)
 8001aae:	4013      	ands	r3, r2
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001ab6:	683a      	ldr	r2, [r7, #0]
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	4313      	orrs	r3, r2
 8001abc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001ac4:	bf00      	nop
 8001ac6:	371c      	adds	r7, #28
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	03fff000 	.word	0x03fff000

08001ad4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	3360      	adds	r3, #96	; 0x60
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	4413      	add	r3, r2
 8001aea:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3714      	adds	r7, #20
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b087      	sub	sp, #28
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	3360      	adds	r3, #96	; 0x60
 8001b10:	461a      	mov	r2, r3
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	4413      	add	r3, r2
 8001b18:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	431a      	orrs	r2, r3
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001b2a:	bf00      	nop
 8001b2c:	371c      	adds	r7, #28
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr

08001b36 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001b36:	b480      	push	{r7}
 8001b38:	b087      	sub	sp, #28
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	60f8      	str	r0, [r7, #12]
 8001b3e:	60b9      	str	r1, [r7, #8]
 8001b40:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	3360      	adds	r3, #96	; 0x60
 8001b46:	461a      	mov	r2, r3
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	4413      	add	r3, r2
 8001b4e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	431a      	orrs	r2, r3
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001b60:	bf00      	nop
 8001b62:	371c      	adds	r7, #28
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b087      	sub	sp, #28
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	3360      	adds	r3, #96	; 0x60
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	4413      	add	r3, r2
 8001b84:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	431a      	orrs	r2, r3
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001b96:	bf00      	nop
 8001b98:	371c      	adds	r7, #28
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr

08001ba2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	b083      	sub	sp, #12
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
 8001baa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	695b      	ldr	r3, [r3, #20]
 8001bb0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	431a      	orrs	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	615a      	str	r2, [r3, #20]
}
 8001bbc:	bf00      	nop
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d101      	bne.n	8001be0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e000      	b.n	8001be2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	b087      	sub	sp, #28
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	60f8      	str	r0, [r7, #12]
 8001bf6:	60b9      	str	r1, [r7, #8]
 8001bf8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	3330      	adds	r3, #48	; 0x30
 8001bfe:	461a      	mov	r2, r3
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	0a1b      	lsrs	r3, r3, #8
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	f003 030c 	and.w	r3, r3, #12
 8001c0a:	4413      	add	r3, r2
 8001c0c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	f003 031f 	and.w	r3, r3, #31
 8001c18:	211f      	movs	r1, #31
 8001c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	401a      	ands	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	0e9b      	lsrs	r3, r3, #26
 8001c26:	f003 011f 	and.w	r1, r3, #31
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	f003 031f 	and.w	r3, r3, #31
 8001c30:	fa01 f303 	lsl.w	r3, r1, r3
 8001c34:	431a      	orrs	r2, r3
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001c3a:	bf00      	nop
 8001c3c:	371c      	adds	r7, #28
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001c46:	b480      	push	{r7}
 8001c48:	b087      	sub	sp, #28
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	60f8      	str	r0, [r7, #12]
 8001c4e:	60b9      	str	r1, [r7, #8]
 8001c50:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	3314      	adds	r3, #20
 8001c56:	461a      	mov	r2, r3
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	0e5b      	lsrs	r3, r3, #25
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	f003 0304 	and.w	r3, r3, #4
 8001c62:	4413      	add	r3, r2
 8001c64:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	0d1b      	lsrs	r3, r3, #20
 8001c6e:	f003 031f 	and.w	r3, r3, #31
 8001c72:	2107      	movs	r1, #7
 8001c74:	fa01 f303 	lsl.w	r3, r1, r3
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	401a      	ands	r2, r3
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	0d1b      	lsrs	r3, r3, #20
 8001c80:	f003 031f 	and.w	r3, r3, #31
 8001c84:	6879      	ldr	r1, [r7, #4]
 8001c86:	fa01 f303 	lsl.w	r3, r1, r3
 8001c8a:	431a      	orrs	r2, r3
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001c90:	bf00      	nop
 8001c92:	371c      	adds	r7, #28
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	401a      	ands	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f003 0318 	and.w	r3, r3, #24
 8001cbe:	4908      	ldr	r1, [pc, #32]	; (8001ce0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001cc0:	40d9      	lsrs	r1, r3
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	400b      	ands	r3, r1
 8001cc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001cd2:	bf00      	nop
 8001cd4:	3714      	adds	r7, #20
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	0007ffff 	.word	0x0007ffff

08001ce4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	f003 031f 	and.w	r3, r3, #31
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001d10:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	6093      	str	r3, [r2, #8]
}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d38:	d101      	bne.n	8001d3e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e000      	b.n	8001d40 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001d5c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d60:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001d88:	d101      	bne.n	8001d8e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e000      	b.n	8001d90 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001d8e:	2300      	movs	r3, #0
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001dac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001db0:	f043 0201 	orr.w	r2, r3, #1
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f003 0301 	and.w	r3, r3, #1
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d101      	bne.n	8001ddc <LL_ADC_IsEnabled+0x18>
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e000      	b.n	8001dde <LL_ADC_IsEnabled+0x1a>
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001dea:	b480      	push	{r7}
 8001dec:	b083      	sub	sp, #12
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001dfa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001dfe:	f043 0204 	orr.w	r2, r3, #4
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001e06:	bf00      	nop
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr

08001e12 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001e12:	b480      	push	{r7}
 8001e14:	b083      	sub	sp, #12
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f003 0304 	and.w	r3, r3, #4
 8001e22:	2b04      	cmp	r3, #4
 8001e24:	d101      	bne.n	8001e2a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e26:	2301      	movs	r3, #1
 8001e28:	e000      	b.n	8001e2c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e2a:	2300      	movs	r3, #0
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f003 0308 	and.w	r3, r3, #8
 8001e48:	2b08      	cmp	r3, #8
 8001e4a:	d101      	bne.n	8001e50 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e000      	b.n	8001e52 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
	...

08001e60 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e60:	b590      	push	{r4, r7, lr}
 8001e62:	b089      	sub	sp, #36	; 0x24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e19b      	b.n	80021b2 <HAL_ADC_Init+0x352>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	695b      	ldr	r3, [r3, #20]
 8001e7e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d109      	bne.n	8001e9c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f7ff fb29 	bl	80014e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff ff3f 	bl	8001d24 <LL_ADC_IsDeepPowerDownEnabled>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d004      	beq.n	8001eb6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7ff ff25 	bl	8001d00 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff ff5a 	bl	8001d74 <LL_ADC_IsInternalRegulatorEnabled>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d115      	bne.n	8001ef2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7ff ff3e 	bl	8001d4c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ed0:	4b97      	ldr	r3, [pc, #604]	; (8002130 <HAL_ADC_Init+0x2d0>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	099b      	lsrs	r3, r3, #6
 8001ed6:	4a97      	ldr	r2, [pc, #604]	; (8002134 <HAL_ADC_Init+0x2d4>)
 8001ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8001edc:	099b      	lsrs	r3, r3, #6
 8001ede:	3301      	adds	r3, #1
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ee4:	e002      	b.n	8001eec <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	3b01      	subs	r3, #1
 8001eea:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d1f9      	bne.n	8001ee6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff ff3c 	bl	8001d74 <LL_ADC_IsInternalRegulatorEnabled>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d10d      	bne.n	8001f1e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f06:	f043 0210 	orr.w	r2, r3, #16
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f12:	f043 0201 	orr.w	r2, r3, #1
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff ff75 	bl	8001e12 <LL_ADC_REG_IsConversionOngoing>
 8001f28:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f2e:	f003 0310 	and.w	r3, r3, #16
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f040 8134 	bne.w	80021a0 <HAL_ADC_Init+0x340>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	f040 8130 	bne.w	80021a0 <HAL_ADC_Init+0x340>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f44:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001f48:	f043 0202 	orr.w	r2, r3, #2
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7ff ff35 	bl	8001dc4 <LL_ADC_IsEnabled>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d137      	bne.n	8001fd0 <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f68:	d004      	beq.n	8001f74 <HAL_ADC_Init+0x114>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a72      	ldr	r2, [pc, #456]	; (8002138 <HAL_ADC_Init+0x2d8>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d10f      	bne.n	8001f94 <HAL_ADC_Init+0x134>
 8001f74:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001f78:	f7ff ff24 	bl	8001dc4 <LL_ADC_IsEnabled>
 8001f7c:	4604      	mov	r4, r0
 8001f7e:	486e      	ldr	r0, [pc, #440]	; (8002138 <HAL_ADC_Init+0x2d8>)
 8001f80:	f7ff ff20 	bl	8001dc4 <LL_ADC_IsEnabled>
 8001f84:	4603      	mov	r3, r0
 8001f86:	4323      	orrs	r3, r4
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	bf0c      	ite	eq
 8001f8c:	2301      	moveq	r3, #1
 8001f8e:	2300      	movne	r3, #0
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	e008      	b.n	8001fa6 <HAL_ADC_Init+0x146>
 8001f94:	4869      	ldr	r0, [pc, #420]	; (800213c <HAL_ADC_Init+0x2dc>)
 8001f96:	f7ff ff15 	bl	8001dc4 <LL_ADC_IsEnabled>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	bf0c      	ite	eq
 8001fa0:	2301      	moveq	r3, #1
 8001fa2:	2300      	movne	r3, #0
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d012      	beq.n	8001fd0 <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fb2:	d004      	beq.n	8001fbe <HAL_ADC_Init+0x15e>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a5f      	ldr	r2, [pc, #380]	; (8002138 <HAL_ADC_Init+0x2d8>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d101      	bne.n	8001fc2 <HAL_ADC_Init+0x162>
 8001fbe:	4a60      	ldr	r2, [pc, #384]	; (8002140 <HAL_ADC_Init+0x2e0>)
 8001fc0:	e000      	b.n	8001fc4 <HAL_ADC_Init+0x164>
 8001fc2:	4a60      	ldr	r2, [pc, #384]	; (8002144 <HAL_ADC_Init+0x2e4>)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4610      	mov	r0, r2
 8001fcc:	f7ff fd2a 	bl	8001a24 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	7f5b      	ldrb	r3, [r3, #29]
 8001fd4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fda:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001fe0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001fe6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fee:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d106      	bne.n	800200c <HAL_ADC_Init+0x1ac>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002002:	3b01      	subs	r3, #1
 8002004:	045b      	lsls	r3, r3, #17
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	4313      	orrs	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002010:	2b00      	cmp	r3, #0
 8002012:	d009      	beq.n	8002028 <HAL_ADC_Init+0x1c8>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002018:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002020:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	4313      	orrs	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	68da      	ldr	r2, [r3, #12]
 800202e:	4b46      	ldr	r3, [pc, #280]	; (8002148 <HAL_ADC_Init+0x2e8>)
 8002030:	4013      	ands	r3, r2
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	6812      	ldr	r2, [r2, #0]
 8002036:	69b9      	ldr	r1, [r7, #24]
 8002038:	430b      	orrs	r3, r1
 800203a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	430a      	orrs	r2, r1
 8002050:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4618      	mov	r0, r3
 8002058:	f7ff feee 	bl	8001e38 <LL_ADC_INJ_IsConversionOngoing>
 800205c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d17b      	bne.n	800215c <HAL_ADC_Init+0x2fc>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d178      	bne.n	800215c <HAL_ADC_Init+0x2fc>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800206e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002076:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002078:	4313      	orrs	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002086:	f023 0302 	bic.w	r3, r3, #2
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	6812      	ldr	r2, [r2, #0]
 800208e:	69b9      	ldr	r1, [r7, #24]
 8002090:	430b      	orrs	r3, r1
 8002092:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	691b      	ldr	r3, [r3, #16]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d017      	beq.n	80020cc <HAL_ADC_Init+0x26c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	691a      	ldr	r2, [r3, #16]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80020aa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80020b4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80020b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	6911      	ldr	r1, [r2, #16]
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	6812      	ldr	r2, [r2, #0]
 80020c4:	430b      	orrs	r3, r1
 80020c6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80020ca:	e013      	b.n	80020f4 <HAL_ADC_Init+0x294>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	691a      	ldr	r2, [r3, #16]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80020da:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	6812      	ldr	r2, [r2, #0]
 80020e8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80020ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020f0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d126      	bne.n	800214c <HAL_ADC_Init+0x2ec>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002108:	f023 0304 	bic.w	r3, r3, #4
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002114:	4311      	orrs	r1, r2
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800211a:	4311      	orrs	r1, r2
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002120:	430a      	orrs	r2, r1
 8002122:	431a      	orrs	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f042 0201 	orr.w	r2, r2, #1
 800212c:	611a      	str	r2, [r3, #16]
 800212e:	e015      	b.n	800215c <HAL_ADC_Init+0x2fc>
 8002130:	20000000 	.word	0x20000000
 8002134:	053e2d63 	.word	0x053e2d63
 8002138:	50000100 	.word	0x50000100
 800213c:	50000400 	.word	0x50000400
 8002140:	50000300 	.word	0x50000300
 8002144:	50000700 	.word	0x50000700
 8002148:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	691a      	ldr	r2, [r3, #16]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f022 0201 	bic.w	r2, r2, #1
 800215a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	695b      	ldr	r3, [r3, #20]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d10c      	bne.n	800217e <HAL_ADC_Init+0x31e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216a:	f023 010f 	bic.w	r1, r3, #15
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a1b      	ldr	r3, [r3, #32]
 8002172:	1e5a      	subs	r2, r3, #1
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	430a      	orrs	r2, r1
 800217a:	631a      	str	r2, [r3, #48]	; 0x30
 800217c:	e007      	b.n	800218e <HAL_ADC_Init+0x32e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f022 020f 	bic.w	r2, r2, #15
 800218c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002192:	f023 0303 	bic.w	r3, r3, #3
 8002196:	f043 0201 	orr.w	r2, r3, #1
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	65da      	str	r2, [r3, #92]	; 0x5c
 800219e:	e007      	b.n	80021b0 <HAL_ADC_Init+0x350>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a4:	f043 0210 	orr.w	r2, r3, #16
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80021b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3724      	adds	r7, #36	; 0x24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd90      	pop	{r4, r7, pc}
 80021ba:	bf00      	nop

080021bc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021d0:	d004      	beq.n	80021dc <HAL_ADC_Start_DMA+0x20>
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a57      	ldr	r2, [pc, #348]	; (8002334 <HAL_ADC_Start_DMA+0x178>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d101      	bne.n	80021e0 <HAL_ADC_Start_DMA+0x24>
 80021dc:	4b56      	ldr	r3, [pc, #344]	; (8002338 <HAL_ADC_Start_DMA+0x17c>)
 80021de:	e000      	b.n	80021e2 <HAL_ADC_Start_DMA+0x26>
 80021e0:	4b56      	ldr	r3, [pc, #344]	; (800233c <HAL_ADC_Start_DMA+0x180>)
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff fd7e 	bl	8001ce4 <LL_ADC_GetMultimode>
 80021e8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff fe0f 	bl	8001e12 <LL_ADC_REG_IsConversionOngoing>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	f040 8094 	bne.w	8002324 <HAL_ADC_Start_DMA+0x168>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002202:	2b01      	cmp	r3, #1
 8002204:	d101      	bne.n	800220a <HAL_ADC_Start_DMA+0x4e>
 8002206:	2302      	movs	r3, #2
 8002208:	e08f      	b.n	800232a <HAL_ADC_Start_DMA+0x16e>
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2201      	movs	r2, #1
 800220e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a4a      	ldr	r2, [pc, #296]	; (8002340 <HAL_ADC_Start_DMA+0x184>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d008      	beq.n	800222e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d005      	beq.n	800222e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	2b05      	cmp	r3, #5
 8002226:	d002      	beq.n	800222e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	2b09      	cmp	r3, #9
 800222c:	d173      	bne.n	8002316 <HAL_ADC_Start_DMA+0x15a>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800222e:	68f8      	ldr	r0, [r7, #12]
 8002230:	f000 fcd8 	bl	8002be4 <ADC_Enable>
 8002234:	4603      	mov	r3, r0
 8002236:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002238:	7dfb      	ldrb	r3, [r7, #23]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d166      	bne.n	800230c <HAL_ADC_Start_DMA+0x150>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002242:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002246:	f023 0301 	bic.w	r3, r3, #1
 800224a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a37      	ldr	r2, [pc, #220]	; (8002334 <HAL_ADC_Start_DMA+0x178>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d002      	beq.n	8002262 <HAL_ADC_Start_DMA+0xa6>
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	e001      	b.n	8002266 <HAL_ADC_Start_DMA+0xaa>
 8002262:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	6812      	ldr	r2, [r2, #0]
 800226a:	4293      	cmp	r3, r2
 800226c:	d002      	beq.n	8002274 <HAL_ADC_Start_DMA+0xb8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d105      	bne.n	8002280 <HAL_ADC_Start_DMA+0xc4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002278:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002284:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d006      	beq.n	800229a <HAL_ADC_Start_DMA+0xde>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002290:	f023 0206 	bic.w	r2, r3, #6
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	661a      	str	r2, [r3, #96]	; 0x60
 8002298:	e002      	b.n	80022a0 <HAL_ADC_Start_DMA+0xe4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2200      	movs	r2, #0
 800229e:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022a4:	4a27      	ldr	r2, [pc, #156]	; (8002344 <HAL_ADC_Start_DMA+0x188>)
 80022a6:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ac:	4a26      	ldr	r2, [pc, #152]	; (8002348 <HAL_ADC_Start_DMA+0x18c>)
 80022ae:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b4:	4a25      	ldr	r2, [pc, #148]	; (800234c <HAL_ADC_Start_DMA+0x190>)
 80022b6:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	221c      	movs	r2, #28
 80022be:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	685a      	ldr	r2, [r3, #4]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f042 0210 	orr.w	r2, r2, #16
 80022d6:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	68da      	ldr	r2, [r3, #12]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f042 0201 	orr.w	r2, r2, #1
 80022e6:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	3340      	adds	r3, #64	; 0x40
 80022f2:	4619      	mov	r1, r3
 80022f4:	68ba      	ldr	r2, [r7, #8]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f001 f864 	bl	80033c4 <HAL_DMA_Start_IT>
 80022fc:	4603      	mov	r3, r0
 80022fe:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff fd70 	bl	8001dea <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800230a:	e00d      	b.n	8002328 <HAL_ADC_Start_DMA+0x16c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8002314:	e008      	b.n	8002328 <HAL_ADC_Start_DMA+0x16c>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002322:	e001      	b.n	8002328 <HAL_ADC_Start_DMA+0x16c>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002324:	2302      	movs	r3, #2
 8002326:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002328:	7dfb      	ldrb	r3, [r7, #23]
}
 800232a:	4618      	mov	r0, r3
 800232c:	3718      	adds	r7, #24
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	50000100 	.word	0x50000100
 8002338:	50000300 	.word	0x50000300
 800233c:	50000700 	.word	0x50000700
 8002340:	50000400 	.word	0x50000400
 8002344:	08002d11 	.word	0x08002d11
 8002348:	08002de9 	.word	0x08002de9
 800234c:	08002e05 	.word	0x08002e05

08002350 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800236c:	bf00      	nop
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002380:	bf00      	nop
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b0b6      	sub	sp, #216	; 0xd8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002396:	2300      	movs	r3, #0
 8002398:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800239c:	2300      	movs	r3, #0
 800239e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d102      	bne.n	80023b0 <HAL_ADC_ConfigChannel+0x24>
 80023aa:	2302      	movs	r3, #2
 80023ac:	f000 bc04 	b.w	8002bb8 <HAL_ADC_ConfigChannel+0x82c>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff fd28 	bl	8001e12 <LL_ADC_REG_IsConversionOngoing>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	f040 83e8 	bne.w	8002b9a <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6818      	ldr	r0, [r3, #0]
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	6859      	ldr	r1, [r3, #4]
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	461a      	mov	r2, r3
 80023d8:	f7ff fc09 	bl	8001bee <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff fd16 	bl	8001e12 <LL_ADC_REG_IsConversionOngoing>
 80023e6:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7ff fd22 	bl	8001e38 <LL_ADC_INJ_IsConversionOngoing>
 80023f4:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023f8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	f040 81d9 	bne.w	80027b4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002402:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002406:	2b00      	cmp	r3, #0
 8002408:	f040 81d4 	bne.w	80027b4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002414:	d10f      	bne.n	8002436 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6818      	ldr	r0, [r3, #0]
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2200      	movs	r2, #0
 8002420:	4619      	mov	r1, r3
 8002422:	f7ff fc10 	bl	8001c46 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800242e:	4618      	mov	r0, r3
 8002430:	f7ff fbb7 	bl	8001ba2 <LL_ADC_SetSamplingTimeCommonConfig>
 8002434:	e00e      	b.n	8002454 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6818      	ldr	r0, [r3, #0]
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	6819      	ldr	r1, [r3, #0]
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	461a      	mov	r2, r3
 8002444:	f7ff fbff 	bl	8001c46 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2100      	movs	r1, #0
 800244e:	4618      	mov	r0, r3
 8002450:	f7ff fba7 	bl	8001ba2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	695a      	ldr	r2, [r3, #20]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	08db      	lsrs	r3, r3, #3
 8002460:	f003 0303 	and.w	r3, r3, #3
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	2b04      	cmp	r3, #4
 8002474:	d022      	beq.n	80024bc <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6818      	ldr	r0, [r3, #0]
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	6919      	ldr	r1, [r3, #16]
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002486:	f7ff fb01 	bl	8001a8c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6818      	ldr	r0, [r3, #0]
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	6919      	ldr	r1, [r3, #16]
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	461a      	mov	r2, r3
 8002498:	f7ff fb4d 	bl	8001b36 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6818      	ldr	r0, [r3, #0]
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d102      	bne.n	80024b2 <HAL_ADC_ConfigChannel+0x126>
 80024ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024b0:	e000      	b.n	80024b4 <HAL_ADC_ConfigChannel+0x128>
 80024b2:	2300      	movs	r3, #0
 80024b4:	461a      	mov	r2, r3
 80024b6:	f7ff fb59 	bl	8001b6c <LL_ADC_SetOffsetSaturation>
 80024ba:	e17b      	b.n	80027b4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2100      	movs	r1, #0
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7ff fb06 	bl	8001ad4 <LL_ADC_GetOffsetChannel>
 80024c8:	4603      	mov	r3, r0
 80024ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d10a      	bne.n	80024e8 <HAL_ADC_ConfigChannel+0x15c>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2100      	movs	r1, #0
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff fafb 	bl	8001ad4 <LL_ADC_GetOffsetChannel>
 80024de:	4603      	mov	r3, r0
 80024e0:	0e9b      	lsrs	r3, r3, #26
 80024e2:	f003 021f 	and.w	r2, r3, #31
 80024e6:	e01e      	b.n	8002526 <HAL_ADC_ConfigChannel+0x19a>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2100      	movs	r1, #0
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7ff faf0 	bl	8001ad4 <LL_ADC_GetOffsetChannel>
 80024f4:	4603      	mov	r3, r0
 80024f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80024fe:	fa93 f3a3 	rbit	r3, r3
 8002502:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002506:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800250a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800250e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002516:	2320      	movs	r3, #32
 8002518:	e004      	b.n	8002524 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800251a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800251e:	fab3 f383 	clz	r3, r3
 8002522:	b2db      	uxtb	r3, r3
 8002524:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800252e:	2b00      	cmp	r3, #0
 8002530:	d105      	bne.n	800253e <HAL_ADC_ConfigChannel+0x1b2>
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	0e9b      	lsrs	r3, r3, #26
 8002538:	f003 031f 	and.w	r3, r3, #31
 800253c:	e018      	b.n	8002570 <HAL_ADC_ConfigChannel+0x1e4>
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002546:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800254a:	fa93 f3a3 	rbit	r3, r3
 800254e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002552:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002556:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800255a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800255e:	2b00      	cmp	r3, #0
 8002560:	d101      	bne.n	8002566 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002562:	2320      	movs	r3, #32
 8002564:	e004      	b.n	8002570 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002566:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800256a:	fab3 f383 	clz	r3, r3
 800256e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002570:	429a      	cmp	r2, r3
 8002572:	d106      	bne.n	8002582 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2200      	movs	r2, #0
 800257a:	2100      	movs	r1, #0
 800257c:	4618      	mov	r0, r3
 800257e:	f7ff fabf 	bl	8001b00 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2101      	movs	r1, #1
 8002588:	4618      	mov	r0, r3
 800258a:	f7ff faa3 	bl	8001ad4 <LL_ADC_GetOffsetChannel>
 800258e:	4603      	mov	r3, r0
 8002590:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002594:	2b00      	cmp	r3, #0
 8002596:	d10a      	bne.n	80025ae <HAL_ADC_ConfigChannel+0x222>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2101      	movs	r1, #1
 800259e:	4618      	mov	r0, r3
 80025a0:	f7ff fa98 	bl	8001ad4 <LL_ADC_GetOffsetChannel>
 80025a4:	4603      	mov	r3, r0
 80025a6:	0e9b      	lsrs	r3, r3, #26
 80025a8:	f003 021f 	and.w	r2, r3, #31
 80025ac:	e01e      	b.n	80025ec <HAL_ADC_ConfigChannel+0x260>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2101      	movs	r1, #1
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7ff fa8d 	bl	8001ad4 <LL_ADC_GetOffsetChannel>
 80025ba:	4603      	mov	r3, r0
 80025bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80025c4:	fa93 f3a3 	rbit	r3, r3
 80025c8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80025cc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80025d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80025d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d101      	bne.n	80025e0 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80025dc:	2320      	movs	r3, #32
 80025de:	e004      	b.n	80025ea <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80025e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80025e4:	fab3 f383 	clz	r3, r3
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d105      	bne.n	8002604 <HAL_ADC_ConfigChannel+0x278>
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	0e9b      	lsrs	r3, r3, #26
 80025fe:	f003 031f 	and.w	r3, r3, #31
 8002602:	e018      	b.n	8002636 <HAL_ADC_ConfigChannel+0x2aa>
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002610:	fa93 f3a3 	rbit	r3, r3
 8002614:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002618:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800261c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002620:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002624:	2b00      	cmp	r3, #0
 8002626:	d101      	bne.n	800262c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002628:	2320      	movs	r3, #32
 800262a:	e004      	b.n	8002636 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800262c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002630:	fab3 f383 	clz	r3, r3
 8002634:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002636:	429a      	cmp	r2, r3
 8002638:	d106      	bne.n	8002648 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2200      	movs	r2, #0
 8002640:	2101      	movs	r1, #1
 8002642:	4618      	mov	r0, r3
 8002644:	f7ff fa5c 	bl	8001b00 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2102      	movs	r1, #2
 800264e:	4618      	mov	r0, r3
 8002650:	f7ff fa40 	bl	8001ad4 <LL_ADC_GetOffsetChannel>
 8002654:	4603      	mov	r3, r0
 8002656:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800265a:	2b00      	cmp	r3, #0
 800265c:	d10a      	bne.n	8002674 <HAL_ADC_ConfigChannel+0x2e8>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	2102      	movs	r1, #2
 8002664:	4618      	mov	r0, r3
 8002666:	f7ff fa35 	bl	8001ad4 <LL_ADC_GetOffsetChannel>
 800266a:	4603      	mov	r3, r0
 800266c:	0e9b      	lsrs	r3, r3, #26
 800266e:	f003 021f 	and.w	r2, r3, #31
 8002672:	e01e      	b.n	80026b2 <HAL_ADC_ConfigChannel+0x326>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2102      	movs	r1, #2
 800267a:	4618      	mov	r0, r3
 800267c:	f7ff fa2a 	bl	8001ad4 <LL_ADC_GetOffsetChannel>
 8002680:	4603      	mov	r3, r0
 8002682:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002686:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800268a:	fa93 f3a3 	rbit	r3, r3
 800268e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002692:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002696:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800269a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d101      	bne.n	80026a6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80026a2:	2320      	movs	r3, #32
 80026a4:	e004      	b.n	80026b0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80026a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80026aa:	fab3 f383 	clz	r3, r3
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d105      	bne.n	80026ca <HAL_ADC_ConfigChannel+0x33e>
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	0e9b      	lsrs	r3, r3, #26
 80026c4:	f003 031f 	and.w	r3, r3, #31
 80026c8:	e016      	b.n	80026f8 <HAL_ADC_ConfigChannel+0x36c>
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026d6:	fa93 f3a3 	rbit	r3, r3
 80026da:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80026dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80026de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80026e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d101      	bne.n	80026ee <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80026ea:	2320      	movs	r3, #32
 80026ec:	e004      	b.n	80026f8 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80026ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80026f2:	fab3 f383 	clz	r3, r3
 80026f6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d106      	bne.n	800270a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2200      	movs	r2, #0
 8002702:	2102      	movs	r1, #2
 8002704:	4618      	mov	r0, r3
 8002706:	f7ff f9fb 	bl	8001b00 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2103      	movs	r1, #3
 8002710:	4618      	mov	r0, r3
 8002712:	f7ff f9df 	bl	8001ad4 <LL_ADC_GetOffsetChannel>
 8002716:	4603      	mov	r3, r0
 8002718:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800271c:	2b00      	cmp	r3, #0
 800271e:	d10a      	bne.n	8002736 <HAL_ADC_ConfigChannel+0x3aa>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2103      	movs	r1, #3
 8002726:	4618      	mov	r0, r3
 8002728:	f7ff f9d4 	bl	8001ad4 <LL_ADC_GetOffsetChannel>
 800272c:	4603      	mov	r3, r0
 800272e:	0e9b      	lsrs	r3, r3, #26
 8002730:	f003 021f 	and.w	r2, r3, #31
 8002734:	e017      	b.n	8002766 <HAL_ADC_ConfigChannel+0x3da>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2103      	movs	r1, #3
 800273c:	4618      	mov	r0, r3
 800273e:	f7ff f9c9 	bl	8001ad4 <LL_ADC_GetOffsetChannel>
 8002742:	4603      	mov	r3, r0
 8002744:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002746:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002748:	fa93 f3a3 	rbit	r3, r3
 800274c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800274e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002750:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002752:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002754:	2b00      	cmp	r3, #0
 8002756:	d101      	bne.n	800275c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002758:	2320      	movs	r3, #32
 800275a:	e003      	b.n	8002764 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800275c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800275e:	fab3 f383 	clz	r3, r3
 8002762:	b2db      	uxtb	r3, r3
 8002764:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800276e:	2b00      	cmp	r3, #0
 8002770:	d105      	bne.n	800277e <HAL_ADC_ConfigChannel+0x3f2>
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	0e9b      	lsrs	r3, r3, #26
 8002778:	f003 031f 	and.w	r3, r3, #31
 800277c:	e011      	b.n	80027a2 <HAL_ADC_ConfigChannel+0x416>
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002784:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002786:	fa93 f3a3 	rbit	r3, r3
 800278a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800278c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800278e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002790:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002796:	2320      	movs	r3, #32
 8002798:	e003      	b.n	80027a2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800279a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800279c:	fab3 f383 	clz	r3, r3
 80027a0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d106      	bne.n	80027b4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2200      	movs	r2, #0
 80027ac:	2103      	movs	r1, #3
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7ff f9a6 	bl	8001b00 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff fb03 	bl	8001dc4 <LL_ADC_IsEnabled>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	f040 813d 	bne.w	8002a40 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6818      	ldr	r0, [r3, #0]
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	6819      	ldr	r1, [r3, #0]
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	461a      	mov	r2, r3
 80027d4:	f7ff fa62 	bl	8001c9c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	4aa2      	ldr	r2, [pc, #648]	; (8002a68 <HAL_ADC_ConfigChannel+0x6dc>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	f040 812e 	bne.w	8002a40 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d10b      	bne.n	800280c <HAL_ADC_ConfigChannel+0x480>
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	0e9b      	lsrs	r3, r3, #26
 80027fa:	3301      	adds	r3, #1
 80027fc:	f003 031f 	and.w	r3, r3, #31
 8002800:	2b09      	cmp	r3, #9
 8002802:	bf94      	ite	ls
 8002804:	2301      	movls	r3, #1
 8002806:	2300      	movhi	r3, #0
 8002808:	b2db      	uxtb	r3, r3
 800280a:	e019      	b.n	8002840 <HAL_ADC_ConfigChannel+0x4b4>
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002812:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002814:	fa93 f3a3 	rbit	r3, r3
 8002818:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800281a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800281c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800281e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002820:	2b00      	cmp	r3, #0
 8002822:	d101      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002824:	2320      	movs	r3, #32
 8002826:	e003      	b.n	8002830 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002828:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800282a:	fab3 f383 	clz	r3, r3
 800282e:	b2db      	uxtb	r3, r3
 8002830:	3301      	adds	r3, #1
 8002832:	f003 031f 	and.w	r3, r3, #31
 8002836:	2b09      	cmp	r3, #9
 8002838:	bf94      	ite	ls
 800283a:	2301      	movls	r3, #1
 800283c:	2300      	movhi	r3, #0
 800283e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002840:	2b00      	cmp	r3, #0
 8002842:	d079      	beq.n	8002938 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800284c:	2b00      	cmp	r3, #0
 800284e:	d107      	bne.n	8002860 <HAL_ADC_ConfigChannel+0x4d4>
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	0e9b      	lsrs	r3, r3, #26
 8002856:	3301      	adds	r3, #1
 8002858:	069b      	lsls	r3, r3, #26
 800285a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800285e:	e015      	b.n	800288c <HAL_ADC_ConfigChannel+0x500>
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002866:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002868:	fa93 f3a3 	rbit	r3, r3
 800286c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800286e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002870:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002872:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002874:	2b00      	cmp	r3, #0
 8002876:	d101      	bne.n	800287c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002878:	2320      	movs	r3, #32
 800287a:	e003      	b.n	8002884 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800287c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800287e:	fab3 f383 	clz	r3, r3
 8002882:	b2db      	uxtb	r3, r3
 8002884:	3301      	adds	r3, #1
 8002886:	069b      	lsls	r3, r3, #26
 8002888:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002894:	2b00      	cmp	r3, #0
 8002896:	d109      	bne.n	80028ac <HAL_ADC_ConfigChannel+0x520>
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	0e9b      	lsrs	r3, r3, #26
 800289e:	3301      	adds	r3, #1
 80028a0:	f003 031f 	and.w	r3, r3, #31
 80028a4:	2101      	movs	r1, #1
 80028a6:	fa01 f303 	lsl.w	r3, r1, r3
 80028aa:	e017      	b.n	80028dc <HAL_ADC_ConfigChannel+0x550>
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028b4:	fa93 f3a3 	rbit	r3, r3
 80028b8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80028ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028bc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80028be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d101      	bne.n	80028c8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80028c4:	2320      	movs	r3, #32
 80028c6:	e003      	b.n	80028d0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80028c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028ca:	fab3 f383 	clz	r3, r3
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	3301      	adds	r3, #1
 80028d2:	f003 031f 	and.w	r3, r3, #31
 80028d6:	2101      	movs	r1, #1
 80028d8:	fa01 f303 	lsl.w	r3, r1, r3
 80028dc:	ea42 0103 	orr.w	r1, r2, r3
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d10a      	bne.n	8002902 <HAL_ADC_ConfigChannel+0x576>
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	0e9b      	lsrs	r3, r3, #26
 80028f2:	3301      	adds	r3, #1
 80028f4:	f003 021f 	and.w	r2, r3, #31
 80028f8:	4613      	mov	r3, r2
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	4413      	add	r3, r2
 80028fe:	051b      	lsls	r3, r3, #20
 8002900:	e018      	b.n	8002934 <HAL_ADC_ConfigChannel+0x5a8>
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800290a:	fa93 f3a3 	rbit	r3, r3
 800290e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002912:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002916:	2b00      	cmp	r3, #0
 8002918:	d101      	bne.n	800291e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800291a:	2320      	movs	r3, #32
 800291c:	e003      	b.n	8002926 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800291e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002920:	fab3 f383 	clz	r3, r3
 8002924:	b2db      	uxtb	r3, r3
 8002926:	3301      	adds	r3, #1
 8002928:	f003 021f 	and.w	r2, r3, #31
 800292c:	4613      	mov	r3, r2
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	4413      	add	r3, r2
 8002932:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002934:	430b      	orrs	r3, r1
 8002936:	e07e      	b.n	8002a36 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002940:	2b00      	cmp	r3, #0
 8002942:	d107      	bne.n	8002954 <HAL_ADC_ConfigChannel+0x5c8>
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	0e9b      	lsrs	r3, r3, #26
 800294a:	3301      	adds	r3, #1
 800294c:	069b      	lsls	r3, r3, #26
 800294e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002952:	e015      	b.n	8002980 <HAL_ADC_ConfigChannel+0x5f4>
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800295c:	fa93 f3a3 	rbit	r3, r3
 8002960:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002964:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002968:	2b00      	cmp	r3, #0
 800296a:	d101      	bne.n	8002970 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800296c:	2320      	movs	r3, #32
 800296e:	e003      	b.n	8002978 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002972:	fab3 f383 	clz	r3, r3
 8002976:	b2db      	uxtb	r3, r3
 8002978:	3301      	adds	r3, #1
 800297a:	069b      	lsls	r3, r3, #26
 800297c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002988:	2b00      	cmp	r3, #0
 800298a:	d109      	bne.n	80029a0 <HAL_ADC_ConfigChannel+0x614>
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	0e9b      	lsrs	r3, r3, #26
 8002992:	3301      	adds	r3, #1
 8002994:	f003 031f 	and.w	r3, r3, #31
 8002998:	2101      	movs	r1, #1
 800299a:	fa01 f303 	lsl.w	r3, r1, r3
 800299e:	e017      	b.n	80029d0 <HAL_ADC_ConfigChannel+0x644>
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a6:	6a3b      	ldr	r3, [r7, #32]
 80029a8:	fa93 f3a3 	rbit	r3, r3
 80029ac:	61fb      	str	r3, [r7, #28]
  return result;
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80029b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d101      	bne.n	80029bc <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80029b8:	2320      	movs	r3, #32
 80029ba:	e003      	b.n	80029c4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80029bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029be:	fab3 f383 	clz	r3, r3
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	3301      	adds	r3, #1
 80029c6:	f003 031f 	and.w	r3, r3, #31
 80029ca:	2101      	movs	r1, #1
 80029cc:	fa01 f303 	lsl.w	r3, r1, r3
 80029d0:	ea42 0103 	orr.w	r1, r2, r3
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d10d      	bne.n	80029fc <HAL_ADC_ConfigChannel+0x670>
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	0e9b      	lsrs	r3, r3, #26
 80029e6:	3301      	adds	r3, #1
 80029e8:	f003 021f 	and.w	r2, r3, #31
 80029ec:	4613      	mov	r3, r2
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	4413      	add	r3, r2
 80029f2:	3b1e      	subs	r3, #30
 80029f4:	051b      	lsls	r3, r3, #20
 80029f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80029fa:	e01b      	b.n	8002a34 <HAL_ADC_ConfigChannel+0x6a8>
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	fa93 f3a3 	rbit	r3, r3
 8002a08:	613b      	str	r3, [r7, #16]
  return result;
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d101      	bne.n	8002a18 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002a14:	2320      	movs	r3, #32
 8002a16:	e003      	b.n	8002a20 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	fab3 f383 	clz	r3, r3
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	3301      	adds	r3, #1
 8002a22:	f003 021f 	and.w	r2, r3, #31
 8002a26:	4613      	mov	r3, r2
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	4413      	add	r3, r2
 8002a2c:	3b1e      	subs	r3, #30
 8002a2e:	051b      	lsls	r3, r3, #20
 8002a30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a34:	430b      	orrs	r3, r1
 8002a36:	683a      	ldr	r2, [r7, #0]
 8002a38:	6892      	ldr	r2, [r2, #8]
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	f7ff f903 	bl	8001c46 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	4b09      	ldr	r3, [pc, #36]	; (8002a6c <HAL_ADC_ConfigChannel+0x6e0>)
 8002a46:	4013      	ands	r3, r2
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f000 80af 	beq.w	8002bac <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a56:	d004      	beq.n	8002a62 <HAL_ADC_ConfigChannel+0x6d6>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a04      	ldr	r2, [pc, #16]	; (8002a70 <HAL_ADC_ConfigChannel+0x6e4>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d10a      	bne.n	8002a78 <HAL_ADC_ConfigChannel+0x6ec>
 8002a62:	4b04      	ldr	r3, [pc, #16]	; (8002a74 <HAL_ADC_ConfigChannel+0x6e8>)
 8002a64:	e009      	b.n	8002a7a <HAL_ADC_ConfigChannel+0x6ee>
 8002a66:	bf00      	nop
 8002a68:	407f0000 	.word	0x407f0000
 8002a6c:	80080000 	.word	0x80080000
 8002a70:	50000100 	.word	0x50000100
 8002a74:	50000300 	.word	0x50000300
 8002a78:	4b51      	ldr	r3, [pc, #324]	; (8002bc0 <HAL_ADC_ConfigChannel+0x834>)
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7fe fff8 	bl	8001a70 <LL_ADC_GetCommonPathInternalCh>
 8002a80:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a4e      	ldr	r2, [pc, #312]	; (8002bc4 <HAL_ADC_ConfigChannel+0x838>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d004      	beq.n	8002a98 <HAL_ADC_ConfigChannel+0x70c>
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a4d      	ldr	r2, [pc, #308]	; (8002bc8 <HAL_ADC_ConfigChannel+0x83c>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d134      	bne.n	8002b02 <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002a98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d12e      	bne.n	8002b02 <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002aac:	d17e      	bne.n	8002bac <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ab6:	d004      	beq.n	8002ac2 <HAL_ADC_ConfigChannel+0x736>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a43      	ldr	r2, [pc, #268]	; (8002bcc <HAL_ADC_ConfigChannel+0x840>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d101      	bne.n	8002ac6 <HAL_ADC_ConfigChannel+0x73a>
 8002ac2:	4a43      	ldr	r2, [pc, #268]	; (8002bd0 <HAL_ADC_ConfigChannel+0x844>)
 8002ac4:	e000      	b.n	8002ac8 <HAL_ADC_ConfigChannel+0x73c>
 8002ac6:	4a3e      	ldr	r2, [pc, #248]	; (8002bc0 <HAL_ADC_ConfigChannel+0x834>)
 8002ac8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002acc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	4610      	mov	r0, r2
 8002ad4:	f7fe ffb9 	bl	8001a4a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ad8:	4b3e      	ldr	r3, [pc, #248]	; (8002bd4 <HAL_ADC_ConfigChannel+0x848>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	099b      	lsrs	r3, r3, #6
 8002ade:	4a3e      	ldr	r2, [pc, #248]	; (8002bd8 <HAL_ADC_ConfigChannel+0x84c>)
 8002ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae4:	099b      	lsrs	r3, r3, #6
 8002ae6:	1c5a      	adds	r2, r3, #1
 8002ae8:	4613      	mov	r3, r2
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	4413      	add	r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002af2:	e002      	b.n	8002afa <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	3b01      	subs	r3, #1
 8002af8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d1f9      	bne.n	8002af4 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b00:	e054      	b.n	8002bac <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a35      	ldr	r2, [pc, #212]	; (8002bdc <HAL_ADC_ConfigChannel+0x850>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d120      	bne.n	8002b4e <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002b0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d11a      	bne.n	8002b4e <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b20:	d144      	bne.n	8002bac <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b2a:	d004      	beq.n	8002b36 <HAL_ADC_ConfigChannel+0x7aa>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a26      	ldr	r2, [pc, #152]	; (8002bcc <HAL_ADC_ConfigChannel+0x840>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d101      	bne.n	8002b3a <HAL_ADC_ConfigChannel+0x7ae>
 8002b36:	4a26      	ldr	r2, [pc, #152]	; (8002bd0 <HAL_ADC_ConfigChannel+0x844>)
 8002b38:	e000      	b.n	8002b3c <HAL_ADC_ConfigChannel+0x7b0>
 8002b3a:	4a21      	ldr	r2, [pc, #132]	; (8002bc0 <HAL_ADC_ConfigChannel+0x834>)
 8002b3c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b40:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b44:	4619      	mov	r1, r3
 8002b46:	4610      	mov	r0, r2
 8002b48:	f7fe ff7f 	bl	8001a4a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b4c:	e02e      	b.n	8002bac <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a23      	ldr	r2, [pc, #140]	; (8002be0 <HAL_ADC_ConfigChannel+0x854>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d129      	bne.n	8002bac <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002b58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d123      	bne.n	8002bac <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a18      	ldr	r2, [pc, #96]	; (8002bcc <HAL_ADC_ConfigChannel+0x840>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d01e      	beq.n	8002bac <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b76:	d004      	beq.n	8002b82 <HAL_ADC_ConfigChannel+0x7f6>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a13      	ldr	r2, [pc, #76]	; (8002bcc <HAL_ADC_ConfigChannel+0x840>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d101      	bne.n	8002b86 <HAL_ADC_ConfigChannel+0x7fa>
 8002b82:	4a13      	ldr	r2, [pc, #76]	; (8002bd0 <HAL_ADC_ConfigChannel+0x844>)
 8002b84:	e000      	b.n	8002b88 <HAL_ADC_ConfigChannel+0x7fc>
 8002b86:	4a0e      	ldr	r2, [pc, #56]	; (8002bc0 <HAL_ADC_ConfigChannel+0x834>)
 8002b88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b8c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b90:	4619      	mov	r1, r3
 8002b92:	4610      	mov	r0, r2
 8002b94:	f7fe ff59 	bl	8001a4a <LL_ADC_SetCommonPathInternalCh>
 8002b98:	e008      	b.n	8002bac <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b9e:	f043 0220 	orr.w	r2, r3, #32
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002bb4:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	37d8      	adds	r7, #216	; 0xd8
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	50000700 	.word	0x50000700
 8002bc4:	c3210000 	.word	0xc3210000
 8002bc8:	90c00010 	.word	0x90c00010
 8002bcc:	50000100 	.word	0x50000100
 8002bd0:	50000300 	.word	0x50000300
 8002bd4:	20000000 	.word	0x20000000
 8002bd8:	053e2d63 	.word	0x053e2d63
 8002bdc:	c7520000 	.word	0xc7520000
 8002be0:	cb840000 	.word	0xcb840000

08002be4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002bec:	2300      	movs	r3, #0
 8002bee:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7ff f8e5 	bl	8001dc4 <LL_ADC_IsEnabled>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d176      	bne.n	8002cee <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	689a      	ldr	r2, [r3, #8]
 8002c06:	4b3c      	ldr	r3, [pc, #240]	; (8002cf8 <ADC_Enable+0x114>)
 8002c08:	4013      	ands	r3, r2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00d      	beq.n	8002c2a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c12:	f043 0210 	orr.w	r2, r3, #16
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c1e:	f043 0201 	orr.w	r2, r3, #1
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e062      	b.n	8002cf0 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7ff f8b4 	bl	8001d9c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c3c:	d004      	beq.n	8002c48 <ADC_Enable+0x64>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a2e      	ldr	r2, [pc, #184]	; (8002cfc <ADC_Enable+0x118>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d101      	bne.n	8002c4c <ADC_Enable+0x68>
 8002c48:	4b2d      	ldr	r3, [pc, #180]	; (8002d00 <ADC_Enable+0x11c>)
 8002c4a:	e000      	b.n	8002c4e <ADC_Enable+0x6a>
 8002c4c:	4b2d      	ldr	r3, [pc, #180]	; (8002d04 <ADC_Enable+0x120>)
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7fe ff0e 	bl	8001a70 <LL_ADC_GetCommonPathInternalCh>
 8002c54:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002c56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d013      	beq.n	8002c86 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c5e:	4b2a      	ldr	r3, [pc, #168]	; (8002d08 <ADC_Enable+0x124>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	099b      	lsrs	r3, r3, #6
 8002c64:	4a29      	ldr	r2, [pc, #164]	; (8002d0c <ADC_Enable+0x128>)
 8002c66:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6a:	099b      	lsrs	r3, r3, #6
 8002c6c:	1c5a      	adds	r2, r3, #1
 8002c6e:	4613      	mov	r3, r2
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	4413      	add	r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002c78:	e002      	b.n	8002c80 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1f9      	bne.n	8002c7a <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002c86:	f7fe fec1 	bl	8001a0c <HAL_GetTick>
 8002c8a:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c8c:	e028      	b.n	8002ce0 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7ff f896 	bl	8001dc4 <LL_ADC_IsEnabled>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d104      	bne.n	8002ca8 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7ff f87a 	bl	8001d9c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002ca8:	f7fe feb0 	bl	8001a0c <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d914      	bls.n	8002ce0 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0301 	and.w	r3, r3, #1
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d00d      	beq.n	8002ce0 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc8:	f043 0210 	orr.w	r2, r3, #16
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cd4:	f043 0201 	orr.w	r2, r3, #1
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e007      	b.n	8002cf0 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d1cf      	bne.n	8002c8e <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	8000003f 	.word	0x8000003f
 8002cfc:	50000100 	.word	0x50000100
 8002d00:	50000300 	.word	0x50000300
 8002d04:	50000700 	.word	0x50000700
 8002d08:	20000000 	.word	0x20000000
 8002d0c:	053e2d63 	.word	0x053e2d63

08002d10 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d1c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d22:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d14b      	bne.n	8002dc2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d2e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0308 	and.w	r3, r3, #8
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d021      	beq.n	8002d88 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7fe ff3d 	bl	8001bc8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d032      	beq.n	8002dba <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d12b      	bne.n	8002dba <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d11f      	bne.n	8002dba <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d7e:	f043 0201 	orr.w	r2, r3, #1
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d86:	e018      	b.n	8002dba <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d111      	bne.n	8002dba <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d105      	bne.n	8002dba <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db2:	f043 0201 	orr.w	r2, r3, #1
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002dba:	68f8      	ldr	r0, [r7, #12]
 8002dbc:	f7ff fac8 	bl	8002350 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002dc0:	e00e      	b.n	8002de0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc6:	f003 0310 	and.w	r3, r3, #16
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d003      	beq.n	8002dd6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002dce:	68f8      	ldr	r0, [r7, #12]
 8002dd0:	f7ff fad2 	bl	8002378 <HAL_ADC_ErrorCallback>
}
 8002dd4:	e004      	b.n	8002de0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	4798      	blx	r3
}
 8002de0:	bf00      	nop
 8002de2:	3710      	adds	r7, #16
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002df6:	68f8      	ldr	r0, [r7, #12]
 8002df8:	f7ff fab4 	bl	8002364 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002dfc:	bf00      	nop
 8002dfe:	3710      	adds	r7, #16
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e10:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e16:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e22:	f043 0204 	orr.w	r2, r3, #4
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002e2a:	68f8      	ldr	r0, [r7, #12]
 8002e2c:	f7ff faa4 	bl	8002378 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e30:	bf00      	nop
 8002e32:	3710      	adds	r7, #16
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <LL_ADC_IsEnabled>:
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f003 0301 	and.w	r3, r3, #1
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d101      	bne.n	8002e50 <LL_ADC_IsEnabled+0x18>
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e000      	b.n	8002e52 <LL_ADC_IsEnabled+0x1a>
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr

08002e5e <LL_ADC_REG_IsConversionOngoing>:
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b083      	sub	sp, #12
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f003 0304 	and.w	r3, r3, #4
 8002e6e:	2b04      	cmp	r3, #4
 8002e70:	d101      	bne.n	8002e76 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e72:	2301      	movs	r3, #1
 8002e74:	e000      	b.n	8002e78 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002e84:	b590      	push	{r4, r7, lr}
 8002e86:	b0a1      	sub	sp, #132	; 0x84
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d101      	bne.n	8002ea2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	e0cb      	b.n	800303a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002eaa:	2300      	movs	r3, #0
 8002eac:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002eae:	2300      	movs	r3, #0
 8002eb0:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002eba:	d102      	bne.n	8002ec2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002ebc:	4b61      	ldr	r3, [pc, #388]	; (8003044 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8002ebe:	60bb      	str	r3, [r7, #8]
 8002ec0:	e001      	b.n	8002ec6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d10b      	bne.n	8002ee4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ed0:	f043 0220 	orr.w	r2, r3, #32
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e0aa      	b.n	800303a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7ff ffb9 	bl	8002e5e <LL_ADC_REG_IsConversionOngoing>
 8002eec:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7ff ffb3 	bl	8002e5e <LL_ADC_REG_IsConversionOngoing>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f040 808c 	bne.w	8003018 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002f00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	f040 8088 	bne.w	8003018 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f10:	d004      	beq.n	8002f1c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a4b      	ldr	r2, [pc, #300]	; (8003044 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d101      	bne.n	8002f20 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8002f1c:	4b4a      	ldr	r3, [pc, #296]	; (8003048 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 8002f1e:	e000      	b.n	8002f22 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8002f20:	4b4a      	ldr	r3, [pc, #296]	; (800304c <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 8002f22:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d041      	beq.n	8002fb0 <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002f2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	6859      	ldr	r1, [r3, #4]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f3e:	035b      	lsls	r3, r3, #13
 8002f40:	430b      	orrs	r3, r1
 8002f42:	431a      	orrs	r2, r3
 8002f44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f46:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f50:	d004      	beq.n	8002f5c <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a3b      	ldr	r2, [pc, #236]	; (8003044 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d10f      	bne.n	8002f7c <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 8002f5c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002f60:	f7ff ff6a 	bl	8002e38 <LL_ADC_IsEnabled>
 8002f64:	4604      	mov	r4, r0
 8002f66:	4837      	ldr	r0, [pc, #220]	; (8003044 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8002f68:	f7ff ff66 	bl	8002e38 <LL_ADC_IsEnabled>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	4323      	orrs	r3, r4
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	bf0c      	ite	eq
 8002f74:	2301      	moveq	r3, #1
 8002f76:	2300      	movne	r3, #0
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	e008      	b.n	8002f8e <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 8002f7c:	4834      	ldr	r0, [pc, #208]	; (8003050 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8002f7e:	f7ff ff5b 	bl	8002e38 <LL_ADC_IsEnabled>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	bf0c      	ite	eq
 8002f88:	2301      	moveq	r3, #1
 8002f8a:	2300      	movne	r3, #0
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d04c      	beq.n	800302c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002f92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002f9a:	f023 030f 	bic.w	r3, r3, #15
 8002f9e:	683a      	ldr	r2, [r7, #0]
 8002fa0:	6811      	ldr	r1, [r2, #0]
 8002fa2:	683a      	ldr	r2, [r7, #0]
 8002fa4:	6892      	ldr	r2, [r2, #8]
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	431a      	orrs	r2, r3
 8002faa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fac:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002fae:	e03d      	b.n	800302c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002fb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fba:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fc4:	d004      	beq.n	8002fd0 <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a1e      	ldr	r2, [pc, #120]	; (8003044 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d10f      	bne.n	8002ff0 <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 8002fd0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002fd4:	f7ff ff30 	bl	8002e38 <LL_ADC_IsEnabled>
 8002fd8:	4604      	mov	r4, r0
 8002fda:	481a      	ldr	r0, [pc, #104]	; (8003044 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8002fdc:	f7ff ff2c 	bl	8002e38 <LL_ADC_IsEnabled>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	4323      	orrs	r3, r4
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	bf0c      	ite	eq
 8002fe8:	2301      	moveq	r3, #1
 8002fea:	2300      	movne	r3, #0
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	e008      	b.n	8003002 <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 8002ff0:	4817      	ldr	r0, [pc, #92]	; (8003050 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8002ff2:	f7ff ff21 	bl	8002e38 <LL_ADC_IsEnabled>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	bf0c      	ite	eq
 8002ffc:	2301      	moveq	r3, #1
 8002ffe:	2300      	movne	r3, #0
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b00      	cmp	r3, #0
 8003004:	d012      	beq.n	800302c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003006:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800300e:	f023 030f 	bic.w	r3, r3, #15
 8003012:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003014:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003016:	e009      	b.n	800302c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800301c:	f043 0220 	orr.w	r2, r3, #32
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800302a:	e000      	b.n	800302e <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800302c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003036:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800303a:	4618      	mov	r0, r3
 800303c:	3784      	adds	r7, #132	; 0x84
 800303e:	46bd      	mov	sp, r7
 8003040:	bd90      	pop	{r4, r7, pc}
 8003042:	bf00      	nop
 8003044:	50000100 	.word	0x50000100
 8003048:	50000300 	.word	0x50000300
 800304c:	50000700 	.word	0x50000700
 8003050:	50000400 	.word	0x50000400

08003054 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003054:	b480      	push	{r7}
 8003056:	b085      	sub	sp, #20
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f003 0307 	and.w	r3, r3, #7
 8003062:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003064:	4b0c      	ldr	r3, [pc, #48]	; (8003098 <__NVIC_SetPriorityGrouping+0x44>)
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800306a:	68ba      	ldr	r2, [r7, #8]
 800306c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003070:	4013      	ands	r3, r2
 8003072:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800307c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003080:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003084:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003086:	4a04      	ldr	r2, [pc, #16]	; (8003098 <__NVIC_SetPriorityGrouping+0x44>)
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	60d3      	str	r3, [r2, #12]
}
 800308c:	bf00      	nop
 800308e:	3714      	adds	r7, #20
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr
 8003098:	e000ed00 	.word	0xe000ed00

0800309c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030a0:	4b04      	ldr	r3, [pc, #16]	; (80030b4 <__NVIC_GetPriorityGrouping+0x18>)
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	0a1b      	lsrs	r3, r3, #8
 80030a6:	f003 0307 	and.w	r3, r3, #7
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr
 80030b4:	e000ed00 	.word	0xe000ed00

080030b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	4603      	mov	r3, r0
 80030c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	db0b      	blt.n	80030e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030ca:	79fb      	ldrb	r3, [r7, #7]
 80030cc:	f003 021f 	and.w	r2, r3, #31
 80030d0:	4907      	ldr	r1, [pc, #28]	; (80030f0 <__NVIC_EnableIRQ+0x38>)
 80030d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d6:	095b      	lsrs	r3, r3, #5
 80030d8:	2001      	movs	r0, #1
 80030da:	fa00 f202 	lsl.w	r2, r0, r2
 80030de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80030e2:	bf00      	nop
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	e000e100 	.word	0xe000e100

080030f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	4603      	mov	r3, r0
 80030fc:	6039      	str	r1, [r7, #0]
 80030fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003104:	2b00      	cmp	r3, #0
 8003106:	db0a      	blt.n	800311e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	b2da      	uxtb	r2, r3
 800310c:	490c      	ldr	r1, [pc, #48]	; (8003140 <__NVIC_SetPriority+0x4c>)
 800310e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003112:	0112      	lsls	r2, r2, #4
 8003114:	b2d2      	uxtb	r2, r2
 8003116:	440b      	add	r3, r1
 8003118:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800311c:	e00a      	b.n	8003134 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	b2da      	uxtb	r2, r3
 8003122:	4908      	ldr	r1, [pc, #32]	; (8003144 <__NVIC_SetPriority+0x50>)
 8003124:	79fb      	ldrb	r3, [r7, #7]
 8003126:	f003 030f 	and.w	r3, r3, #15
 800312a:	3b04      	subs	r3, #4
 800312c:	0112      	lsls	r2, r2, #4
 800312e:	b2d2      	uxtb	r2, r2
 8003130:	440b      	add	r3, r1
 8003132:	761a      	strb	r2, [r3, #24]
}
 8003134:	bf00      	nop
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr
 8003140:	e000e100 	.word	0xe000e100
 8003144:	e000ed00 	.word	0xe000ed00

08003148 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003148:	b480      	push	{r7}
 800314a:	b089      	sub	sp, #36	; 0x24
 800314c:	af00      	add	r7, sp, #0
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f003 0307 	and.w	r3, r3, #7
 800315a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	f1c3 0307 	rsb	r3, r3, #7
 8003162:	2b04      	cmp	r3, #4
 8003164:	bf28      	it	cs
 8003166:	2304      	movcs	r3, #4
 8003168:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	3304      	adds	r3, #4
 800316e:	2b06      	cmp	r3, #6
 8003170:	d902      	bls.n	8003178 <NVIC_EncodePriority+0x30>
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	3b03      	subs	r3, #3
 8003176:	e000      	b.n	800317a <NVIC_EncodePriority+0x32>
 8003178:	2300      	movs	r3, #0
 800317a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800317c:	f04f 32ff 	mov.w	r2, #4294967295
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	fa02 f303 	lsl.w	r3, r2, r3
 8003186:	43da      	mvns	r2, r3
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	401a      	ands	r2, r3
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003190:	f04f 31ff 	mov.w	r1, #4294967295
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	fa01 f303 	lsl.w	r3, r1, r3
 800319a:	43d9      	mvns	r1, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031a0:	4313      	orrs	r3, r2
         );
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3724      	adds	r7, #36	; 0x24
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
	...

080031b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	3b01      	subs	r3, #1
 80031bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031c0:	d301      	bcc.n	80031c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031c2:	2301      	movs	r3, #1
 80031c4:	e00f      	b.n	80031e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031c6:	4a0a      	ldr	r2, [pc, #40]	; (80031f0 <SysTick_Config+0x40>)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	3b01      	subs	r3, #1
 80031cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031ce:	210f      	movs	r1, #15
 80031d0:	f04f 30ff 	mov.w	r0, #4294967295
 80031d4:	f7ff ff8e 	bl	80030f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031d8:	4b05      	ldr	r3, [pc, #20]	; (80031f0 <SysTick_Config+0x40>)
 80031da:	2200      	movs	r2, #0
 80031dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031de:	4b04      	ldr	r3, [pc, #16]	; (80031f0 <SysTick_Config+0x40>)
 80031e0:	2207      	movs	r2, #7
 80031e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3708      	adds	r7, #8
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	e000e010 	.word	0xe000e010

080031f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f7ff ff29 	bl	8003054 <__NVIC_SetPriorityGrouping>
}
 8003202:	bf00      	nop
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800320a:	b580      	push	{r7, lr}
 800320c:	b086      	sub	sp, #24
 800320e:	af00      	add	r7, sp, #0
 8003210:	4603      	mov	r3, r0
 8003212:	60b9      	str	r1, [r7, #8]
 8003214:	607a      	str	r2, [r7, #4]
 8003216:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003218:	f7ff ff40 	bl	800309c <__NVIC_GetPriorityGrouping>
 800321c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	68b9      	ldr	r1, [r7, #8]
 8003222:	6978      	ldr	r0, [r7, #20]
 8003224:	f7ff ff90 	bl	8003148 <NVIC_EncodePriority>
 8003228:	4602      	mov	r2, r0
 800322a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800322e:	4611      	mov	r1, r2
 8003230:	4618      	mov	r0, r3
 8003232:	f7ff ff5f 	bl	80030f4 <__NVIC_SetPriority>
}
 8003236:	bf00      	nop
 8003238:	3718      	adds	r7, #24
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800323e:	b580      	push	{r7, lr}
 8003240:	b082      	sub	sp, #8
 8003242:	af00      	add	r7, sp, #0
 8003244:	4603      	mov	r3, r0
 8003246:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800324c:	4618      	mov	r0, r3
 800324e:	f7ff ff33 	bl	80030b8 <__NVIC_EnableIRQ>
}
 8003252:	bf00      	nop
 8003254:	3708      	adds	r7, #8
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800325a:	b580      	push	{r7, lr}
 800325c:	b082      	sub	sp, #8
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f7ff ffa4 	bl	80031b0 <SysTick_Config>
 8003268:	4603      	mov	r3, r0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3708      	adds	r7, #8
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
	...

08003274 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d101      	bne.n	8003286 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e08d      	b.n	80033a2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	461a      	mov	r2, r3
 800328c:	4b47      	ldr	r3, [pc, #284]	; (80033ac <HAL_DMA_Init+0x138>)
 800328e:	429a      	cmp	r2, r3
 8003290:	d80f      	bhi.n	80032b2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	461a      	mov	r2, r3
 8003298:	4b45      	ldr	r3, [pc, #276]	; (80033b0 <HAL_DMA_Init+0x13c>)
 800329a:	4413      	add	r3, r2
 800329c:	4a45      	ldr	r2, [pc, #276]	; (80033b4 <HAL_DMA_Init+0x140>)
 800329e:	fba2 2303 	umull	r2, r3, r2, r3
 80032a2:	091b      	lsrs	r3, r3, #4
 80032a4:	009a      	lsls	r2, r3, #2
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a42      	ldr	r2, [pc, #264]	; (80033b8 <HAL_DMA_Init+0x144>)
 80032ae:	641a      	str	r2, [r3, #64]	; 0x40
 80032b0:	e00e      	b.n	80032d0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	461a      	mov	r2, r3
 80032b8:	4b40      	ldr	r3, [pc, #256]	; (80033bc <HAL_DMA_Init+0x148>)
 80032ba:	4413      	add	r3, r2
 80032bc:	4a3d      	ldr	r2, [pc, #244]	; (80033b4 <HAL_DMA_Init+0x140>)
 80032be:	fba2 2303 	umull	r2, r3, r2, r3
 80032c2:	091b      	lsrs	r3, r3, #4
 80032c4:	009a      	lsls	r2, r3, #2
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a3c      	ldr	r2, [pc, #240]	; (80033c0 <HAL_DMA_Init+0x14c>)
 80032ce:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2202      	movs	r2, #2
 80032d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80032e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80032f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003300:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	699b      	ldr	r3, [r3, #24]
 8003306:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800330c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003314:	68fa      	ldr	r2, [r7, #12]
 8003316:	4313      	orrs	r3, r2
 8003318:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 fa76 	bl	8003814 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003330:	d102      	bne.n	8003338 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685a      	ldr	r2, [r3, #4]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003340:	b2d2      	uxtb	r2, r2
 8003342:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800334c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d010      	beq.n	8003378 <HAL_DMA_Init+0x104>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	2b04      	cmp	r3, #4
 800335c:	d80c      	bhi.n	8003378 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f000 fa96 	bl	8003890 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003368:	2200      	movs	r2, #0
 800336a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003374:	605a      	str	r2, [r3, #4]
 8003376:	e008      	b.n	800338a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3710      	adds	r7, #16
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	40020407 	.word	0x40020407
 80033b0:	bffdfff8 	.word	0xbffdfff8
 80033b4:	cccccccd 	.word	0xcccccccd
 80033b8:	40020000 	.word	0x40020000
 80033bc:	bffdfbf8 	.word	0xbffdfbf8
 80033c0:	40020400 	.word	0x40020400

080033c4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b086      	sub	sp, #24
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	607a      	str	r2, [r7, #4]
 80033d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033d2:	2300      	movs	r3, #0
 80033d4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d101      	bne.n	80033e4 <HAL_DMA_Start_IT+0x20>
 80033e0:	2302      	movs	r3, #2
 80033e2:	e066      	b.n	80034b2 <HAL_DMA_Start_IT+0xee>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d155      	bne.n	80034a4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2202      	movs	r2, #2
 80033fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2200      	movs	r2, #0
 8003404:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f022 0201 	bic.w	r2, r2, #1
 8003414:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	68b9      	ldr	r1, [r7, #8]
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	f000 f9bb 	bl	8003798 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003426:	2b00      	cmp	r3, #0
 8003428:	d008      	beq.n	800343c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f042 020e 	orr.w	r2, r2, #14
 8003438:	601a      	str	r2, [r3, #0]
 800343a:	e00f      	b.n	800345c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f022 0204 	bic.w	r2, r2, #4
 800344a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f042 020a 	orr.w	r2, r2, #10
 800345a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d007      	beq.n	800347a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003474:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003478:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800347e:	2b00      	cmp	r3, #0
 8003480:	d007      	beq.n	8003492 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800348c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003490:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f042 0201 	orr.w	r2, r2, #1
 80034a0:	601a      	str	r2, [r3, #0]
 80034a2:	e005      	b.n	80034b0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80034ac:	2302      	movs	r3, #2
 80034ae:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80034b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3718      	adds	r7, #24
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}

080034ba <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80034ba:	b480      	push	{r7}
 80034bc:	b085      	sub	sp, #20
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034c2:	2300      	movs	r3, #0
 80034c4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d005      	beq.n	80034de <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2204      	movs	r2, #4
 80034d6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	73fb      	strb	r3, [r7, #15]
 80034dc:	e037      	b.n	800354e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 020e 	bic.w	r2, r2, #14
 80034ec:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034fc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f022 0201 	bic.w	r2, r2, #1
 800350c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003512:	f003 021f 	and.w	r2, r3, #31
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351a:	2101      	movs	r1, #1
 800351c:	fa01 f202 	lsl.w	r2, r1, r2
 8003520:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800352a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003530:	2b00      	cmp	r3, #0
 8003532:	d00c      	beq.n	800354e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800353e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003542:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800354c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2201      	movs	r2, #1
 8003552:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800355e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003560:	4618      	mov	r0, r3
 8003562:	3714      	adds	r7, #20
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003574:	2300      	movs	r3, #0
 8003576:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800357e:	b2db      	uxtb	r3, r3
 8003580:	2b02      	cmp	r3, #2
 8003582:	d00d      	beq.n	80035a0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2204      	movs	r2, #4
 8003588:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2201      	movs	r2, #1
 800358e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	73fb      	strb	r3, [r7, #15]
 800359e:	e047      	b.n	8003630 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f022 020e 	bic.w	r2, r2, #14
 80035ae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f022 0201 	bic.w	r2, r2, #1
 80035be:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d4:	f003 021f 	and.w	r2, r3, #31
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035dc:	2101      	movs	r1, #1
 80035de:	fa01 f202 	lsl.w	r2, r1, r2
 80035e2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80035ec:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00c      	beq.n	8003610 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003600:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003604:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800360e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003624:	2b00      	cmp	r3, #0
 8003626:	d003      	beq.n	8003630 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	4798      	blx	r3
    }
  }
  return status;
 8003630:	7bfb      	ldrb	r3, [r7, #15]
}
 8003632:	4618      	mov	r0, r3
 8003634:	3710      	adds	r7, #16
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800363a:	b580      	push	{r7, lr}
 800363c:	b084      	sub	sp, #16
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003656:	f003 031f 	and.w	r3, r3, #31
 800365a:	2204      	movs	r2, #4
 800365c:	409a      	lsls	r2, r3
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	4013      	ands	r3, r2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d026      	beq.n	80036b4 <HAL_DMA_IRQHandler+0x7a>
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	f003 0304 	and.w	r3, r3, #4
 800366c:	2b00      	cmp	r3, #0
 800366e:	d021      	beq.n	80036b4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0320 	and.w	r3, r3, #32
 800367a:	2b00      	cmp	r3, #0
 800367c:	d107      	bne.n	800368e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f022 0204 	bic.w	r2, r2, #4
 800368c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003692:	f003 021f 	and.w	r2, r3, #31
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369a:	2104      	movs	r1, #4
 800369c:	fa01 f202 	lsl.w	r2, r1, r2
 80036a0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d071      	beq.n	800378e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80036b2:	e06c      	b.n	800378e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b8:	f003 031f 	and.w	r3, r3, #31
 80036bc:	2202      	movs	r2, #2
 80036be:	409a      	lsls	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	4013      	ands	r3, r2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d02e      	beq.n	8003726 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d029      	beq.n	8003726 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0320 	and.w	r3, r3, #32
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d10b      	bne.n	80036f8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f022 020a 	bic.w	r2, r2, #10
 80036ee:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fc:	f003 021f 	and.w	r2, r3, #31
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003704:	2102      	movs	r1, #2
 8003706:	fa01 f202 	lsl.w	r2, r1, r2
 800370a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003718:	2b00      	cmp	r3, #0
 800371a:	d038      	beq.n	800378e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003724:	e033      	b.n	800378e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800372a:	f003 031f 	and.w	r3, r3, #31
 800372e:	2208      	movs	r2, #8
 8003730:	409a      	lsls	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	4013      	ands	r3, r2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d02a      	beq.n	8003790 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	f003 0308 	and.w	r3, r3, #8
 8003740:	2b00      	cmp	r3, #0
 8003742:	d025      	beq.n	8003790 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f022 020e 	bic.w	r2, r2, #14
 8003752:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003758:	f003 021f 	and.w	r2, r3, #31
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003760:	2101      	movs	r1, #1
 8003762:	fa01 f202 	lsl.w	r2, r1, r2
 8003766:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2201      	movs	r2, #1
 8003772:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003782:	2b00      	cmp	r3, #0
 8003784:	d004      	beq.n	8003790 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800378e:	bf00      	nop
 8003790:	bf00      	nop
}
 8003792:	3710      	adds	r7, #16
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003798:	b480      	push	{r7}
 800379a:	b085      	sub	sp, #20
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]
 80037a4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80037ae:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d004      	beq.n	80037c2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80037c0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c6:	f003 021f 	and.w	r2, r3, #31
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ce:	2101      	movs	r1, #1
 80037d0:	fa01 f202 	lsl.w	r2, r1, r2
 80037d4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	683a      	ldr	r2, [r7, #0]
 80037dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	2b10      	cmp	r3, #16
 80037e4:	d108      	bne.n	80037f8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68ba      	ldr	r2, [r7, #8]
 80037f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80037f6:	e007      	b.n	8003808 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68ba      	ldr	r2, [r7, #8]
 80037fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	60da      	str	r2, [r3, #12]
}
 8003808:	bf00      	nop
 800380a:	3714      	adds	r7, #20
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003814:	b480      	push	{r7}
 8003816:	b087      	sub	sp, #28
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	461a      	mov	r2, r3
 8003822:	4b16      	ldr	r3, [pc, #88]	; (800387c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003824:	429a      	cmp	r2, r3
 8003826:	d802      	bhi.n	800382e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003828:	4b15      	ldr	r3, [pc, #84]	; (8003880 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800382a:	617b      	str	r3, [r7, #20]
 800382c:	e001      	b.n	8003832 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800382e:	4b15      	ldr	r3, [pc, #84]	; (8003884 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003830:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	b2db      	uxtb	r3, r3
 800383c:	3b08      	subs	r3, #8
 800383e:	4a12      	ldr	r2, [pc, #72]	; (8003888 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003840:	fba2 2303 	umull	r2, r3, r2, r3
 8003844:	091b      	lsrs	r3, r3, #4
 8003846:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384c:	089b      	lsrs	r3, r3, #2
 800384e:	009a      	lsls	r2, r3, #2
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	4413      	add	r3, r2
 8003854:	461a      	mov	r2, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a0b      	ldr	r2, [pc, #44]	; (800388c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800385e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f003 031f 	and.w	r3, r3, #31
 8003866:	2201      	movs	r2, #1
 8003868:	409a      	lsls	r2, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800386e:	bf00      	nop
 8003870:	371c      	adds	r7, #28
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	40020407 	.word	0x40020407
 8003880:	40020800 	.word	0x40020800
 8003884:	40020820 	.word	0x40020820
 8003888:	cccccccd 	.word	0xcccccccd
 800388c:	40020880 	.word	0x40020880

08003890 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003890:	b480      	push	{r7}
 8003892:	b085      	sub	sp, #20
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	b2db      	uxtb	r3, r3
 800389e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	4b0b      	ldr	r3, [pc, #44]	; (80038d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80038a4:	4413      	add	r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	461a      	mov	r2, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a08      	ldr	r2, [pc, #32]	; (80038d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80038b2:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	3b01      	subs	r3, #1
 80038b8:	f003 031f 	and.w	r3, r3, #31
 80038bc:	2201      	movs	r2, #1
 80038be:	409a      	lsls	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80038c4:	bf00      	nop
 80038c6:	3714      	adds	r7, #20
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr
 80038d0:	1000823f 	.word	0x1000823f
 80038d4:	40020940 	.word	0x40020940

080038d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038d8:	b480      	push	{r7}
 80038da:	b087      	sub	sp, #28
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80038e2:	2300      	movs	r3, #0
 80038e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80038e6:	e15a      	b.n	8003b9e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	2101      	movs	r1, #1
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	fa01 f303 	lsl.w	r3, r1, r3
 80038f4:	4013      	ands	r3, r2
 80038f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	f000 814c 	beq.w	8003b98 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f003 0303 	and.w	r3, r3, #3
 8003908:	2b01      	cmp	r3, #1
 800390a:	d005      	beq.n	8003918 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003914:	2b02      	cmp	r3, #2
 8003916:	d130      	bne.n	800397a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	005b      	lsls	r3, r3, #1
 8003922:	2203      	movs	r2, #3
 8003924:	fa02 f303 	lsl.w	r3, r2, r3
 8003928:	43db      	mvns	r3, r3
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	4013      	ands	r3, r2
 800392e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	68da      	ldr	r2, [r3, #12]
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	005b      	lsls	r3, r3, #1
 8003938:	fa02 f303 	lsl.w	r3, r2, r3
 800393c:	693a      	ldr	r2, [r7, #16]
 800393e:	4313      	orrs	r3, r2
 8003940:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	693a      	ldr	r2, [r7, #16]
 8003946:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800394e:	2201      	movs	r2, #1
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	fa02 f303 	lsl.w	r3, r2, r3
 8003956:	43db      	mvns	r3, r3
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	4013      	ands	r3, r2
 800395c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	091b      	lsrs	r3, r3, #4
 8003964:	f003 0201 	and.w	r2, r3, #1
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	fa02 f303 	lsl.w	r3, r2, r3
 800396e:	693a      	ldr	r2, [r7, #16]
 8003970:	4313      	orrs	r3, r2
 8003972:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f003 0303 	and.w	r3, r3, #3
 8003982:	2b03      	cmp	r3, #3
 8003984:	d017      	beq.n	80039b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	2203      	movs	r2, #3
 8003992:	fa02 f303 	lsl.w	r3, r2, r3
 8003996:	43db      	mvns	r3, r3
 8003998:	693a      	ldr	r2, [r7, #16]
 800399a:	4013      	ands	r3, r2
 800399c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	689a      	ldr	r2, [r3, #8]
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	005b      	lsls	r3, r3, #1
 80039a6:	fa02 f303 	lsl.w	r3, r2, r3
 80039aa:	693a      	ldr	r2, [r7, #16]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	693a      	ldr	r2, [r7, #16]
 80039b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f003 0303 	and.w	r3, r3, #3
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d123      	bne.n	8003a0a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	08da      	lsrs	r2, r3, #3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	3208      	adds	r2, #8
 80039ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	f003 0307 	and.w	r3, r3, #7
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	220f      	movs	r2, #15
 80039da:	fa02 f303 	lsl.w	r3, r2, r3
 80039de:	43db      	mvns	r3, r3
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	4013      	ands	r3, r2
 80039e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	691a      	ldr	r2, [r3, #16]
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	f003 0307 	and.w	r3, r3, #7
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	fa02 f303 	lsl.w	r3, r2, r3
 80039f6:	693a      	ldr	r2, [r7, #16]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	08da      	lsrs	r2, r3, #3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	3208      	adds	r2, #8
 8003a04:	6939      	ldr	r1, [r7, #16]
 8003a06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	2203      	movs	r2, #3
 8003a16:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1a:	43db      	mvns	r3, r3
 8003a1c:	693a      	ldr	r2, [r7, #16]
 8003a1e:	4013      	ands	r3, r2
 8003a20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f003 0203 	and.w	r2, r3, #3
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	005b      	lsls	r3, r3, #1
 8003a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a32:	693a      	ldr	r2, [r7, #16]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	693a      	ldr	r2, [r7, #16]
 8003a3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	f000 80a6 	beq.w	8003b98 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a4c:	4b5b      	ldr	r3, [pc, #364]	; (8003bbc <HAL_GPIO_Init+0x2e4>)
 8003a4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a50:	4a5a      	ldr	r2, [pc, #360]	; (8003bbc <HAL_GPIO_Init+0x2e4>)
 8003a52:	f043 0301 	orr.w	r3, r3, #1
 8003a56:	6613      	str	r3, [r2, #96]	; 0x60
 8003a58:	4b58      	ldr	r3, [pc, #352]	; (8003bbc <HAL_GPIO_Init+0x2e4>)
 8003a5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a5c:	f003 0301 	and.w	r3, r3, #1
 8003a60:	60bb      	str	r3, [r7, #8]
 8003a62:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a64:	4a56      	ldr	r2, [pc, #344]	; (8003bc0 <HAL_GPIO_Init+0x2e8>)
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	089b      	lsrs	r3, r3, #2
 8003a6a:	3302      	adds	r3, #2
 8003a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	f003 0303 	and.w	r3, r3, #3
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	220f      	movs	r2, #15
 8003a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a80:	43db      	mvns	r3, r3
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	4013      	ands	r3, r2
 8003a86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003a8e:	d01f      	beq.n	8003ad0 <HAL_GPIO_Init+0x1f8>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a4c      	ldr	r2, [pc, #304]	; (8003bc4 <HAL_GPIO_Init+0x2ec>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d019      	beq.n	8003acc <HAL_GPIO_Init+0x1f4>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a4b      	ldr	r2, [pc, #300]	; (8003bc8 <HAL_GPIO_Init+0x2f0>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d013      	beq.n	8003ac8 <HAL_GPIO_Init+0x1f0>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a4a      	ldr	r2, [pc, #296]	; (8003bcc <HAL_GPIO_Init+0x2f4>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d00d      	beq.n	8003ac4 <HAL_GPIO_Init+0x1ec>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	4a49      	ldr	r2, [pc, #292]	; (8003bd0 <HAL_GPIO_Init+0x2f8>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d007      	beq.n	8003ac0 <HAL_GPIO_Init+0x1e8>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a48      	ldr	r2, [pc, #288]	; (8003bd4 <HAL_GPIO_Init+0x2fc>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d101      	bne.n	8003abc <HAL_GPIO_Init+0x1e4>
 8003ab8:	2305      	movs	r3, #5
 8003aba:	e00a      	b.n	8003ad2 <HAL_GPIO_Init+0x1fa>
 8003abc:	2306      	movs	r3, #6
 8003abe:	e008      	b.n	8003ad2 <HAL_GPIO_Init+0x1fa>
 8003ac0:	2304      	movs	r3, #4
 8003ac2:	e006      	b.n	8003ad2 <HAL_GPIO_Init+0x1fa>
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e004      	b.n	8003ad2 <HAL_GPIO_Init+0x1fa>
 8003ac8:	2302      	movs	r3, #2
 8003aca:	e002      	b.n	8003ad2 <HAL_GPIO_Init+0x1fa>
 8003acc:	2301      	movs	r3, #1
 8003ace:	e000      	b.n	8003ad2 <HAL_GPIO_Init+0x1fa>
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	f002 0203 	and.w	r2, r2, #3
 8003ad8:	0092      	lsls	r2, r2, #2
 8003ada:	4093      	lsls	r3, r2
 8003adc:	693a      	ldr	r2, [r7, #16]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ae2:	4937      	ldr	r1, [pc, #220]	; (8003bc0 <HAL_GPIO_Init+0x2e8>)
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	089b      	lsrs	r3, r3, #2
 8003ae8:	3302      	adds	r3, #2
 8003aea:	693a      	ldr	r2, [r7, #16]
 8003aec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003af0:	4b39      	ldr	r3, [pc, #228]	; (8003bd8 <HAL_GPIO_Init+0x300>)
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	43db      	mvns	r3, r3
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	4013      	ands	r3, r2
 8003afe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d003      	beq.n	8003b14 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003b0c:	693a      	ldr	r2, [r7, #16]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003b14:	4a30      	ldr	r2, [pc, #192]	; (8003bd8 <HAL_GPIO_Init+0x300>)
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003b1a:	4b2f      	ldr	r3, [pc, #188]	; (8003bd8 <HAL_GPIO_Init+0x300>)
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	43db      	mvns	r3, r3
 8003b24:	693a      	ldr	r2, [r7, #16]
 8003b26:	4013      	ands	r3, r2
 8003b28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d003      	beq.n	8003b3e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003b36:	693a      	ldr	r2, [r7, #16]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003b3e:	4a26      	ldr	r2, [pc, #152]	; (8003bd8 <HAL_GPIO_Init+0x300>)
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003b44:	4b24      	ldr	r3, [pc, #144]	; (8003bd8 <HAL_GPIO_Init+0x300>)
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	43db      	mvns	r3, r3
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	4013      	ands	r3, r2
 8003b52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d003      	beq.n	8003b68 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003b60:	693a      	ldr	r2, [r7, #16]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003b68:	4a1b      	ldr	r2, [pc, #108]	; (8003bd8 <HAL_GPIO_Init+0x300>)
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003b6e:	4b1a      	ldr	r3, [pc, #104]	; (8003bd8 <HAL_GPIO_Init+0x300>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	43db      	mvns	r3, r3
 8003b78:	693a      	ldr	r2, [r7, #16]
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d003      	beq.n	8003b92 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003b8a:	693a      	ldr	r2, [r7, #16]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003b92:	4a11      	ldr	r2, [pc, #68]	; (8003bd8 <HAL_GPIO_Init+0x300>)
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	f47f ae9d 	bne.w	80038e8 <HAL_GPIO_Init+0x10>
  }
}
 8003bae:	bf00      	nop
 8003bb0:	bf00      	nop
 8003bb2:	371c      	adds	r7, #28
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr
 8003bbc:	40021000 	.word	0x40021000
 8003bc0:	40010000 	.word	0x40010000
 8003bc4:	48000400 	.word	0x48000400
 8003bc8:	48000800 	.word	0x48000800
 8003bcc:	48000c00 	.word	0x48000c00
 8003bd0:	48001000 	.word	0x48001000
 8003bd4:	48001400 	.word	0x48001400
 8003bd8:	40010400 	.word	0x40010400

08003bdc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d141      	bne.n	8003c6e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003bea:	4b4b      	ldr	r3, [pc, #300]	; (8003d18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003bf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bf6:	d131      	bne.n	8003c5c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003bf8:	4b47      	ldr	r3, [pc, #284]	; (8003d18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bfe:	4a46      	ldr	r2, [pc, #280]	; (8003d18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c04:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c08:	4b43      	ldr	r3, [pc, #268]	; (8003d18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c10:	4a41      	ldr	r2, [pc, #260]	; (8003d18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c16:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003c18:	4b40      	ldr	r3, [pc, #256]	; (8003d1c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2232      	movs	r2, #50	; 0x32
 8003c1e:	fb02 f303 	mul.w	r3, r2, r3
 8003c22:	4a3f      	ldr	r2, [pc, #252]	; (8003d20 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003c24:	fba2 2303 	umull	r2, r3, r2, r3
 8003c28:	0c9b      	lsrs	r3, r3, #18
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c2e:	e002      	b.n	8003c36 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	3b01      	subs	r3, #1
 8003c34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c36:	4b38      	ldr	r3, [pc, #224]	; (8003d18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c42:	d102      	bne.n	8003c4a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d1f2      	bne.n	8003c30 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c4a:	4b33      	ldr	r3, [pc, #204]	; (8003d18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c4c:	695b      	ldr	r3, [r3, #20]
 8003c4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c56:	d158      	bne.n	8003d0a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e057      	b.n	8003d0c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c5c:	4b2e      	ldr	r3, [pc, #184]	; (8003d18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c62:	4a2d      	ldr	r2, [pc, #180]	; (8003d18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c68:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003c6c:	e04d      	b.n	8003d0a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c74:	d141      	bne.n	8003cfa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c76:	4b28      	ldr	r3, [pc, #160]	; (8003d18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c82:	d131      	bne.n	8003ce8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c84:	4b24      	ldr	r3, [pc, #144]	; (8003d18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c8a:	4a23      	ldr	r2, [pc, #140]	; (8003d18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c90:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c94:	4b20      	ldr	r3, [pc, #128]	; (8003d18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c9c:	4a1e      	ldr	r2, [pc, #120]	; (8003d18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ca2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003ca4:	4b1d      	ldr	r3, [pc, #116]	; (8003d1c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2232      	movs	r2, #50	; 0x32
 8003caa:	fb02 f303 	mul.w	r3, r2, r3
 8003cae:	4a1c      	ldr	r2, [pc, #112]	; (8003d20 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb4:	0c9b      	lsrs	r3, r3, #18
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cba:	e002      	b.n	8003cc2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cc2:	4b15      	ldr	r3, [pc, #84]	; (8003d18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cce:	d102      	bne.n	8003cd6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1f2      	bne.n	8003cbc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003cd6:	4b10      	ldr	r3, [pc, #64]	; (8003d18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ce2:	d112      	bne.n	8003d0a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	e011      	b.n	8003d0c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ce8:	4b0b      	ldr	r3, [pc, #44]	; (8003d18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cee:	4a0a      	ldr	r2, [pc, #40]	; (8003d18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cf4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003cf8:	e007      	b.n	8003d0a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003cfa:	4b07      	ldr	r3, [pc, #28]	; (8003d18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d02:	4a05      	ldr	r2, [pc, #20]	; (8003d18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d04:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d08:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003d0a:	2300      	movs	r3, #0
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3714      	adds	r7, #20
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr
 8003d18:	40007000 	.word	0x40007000
 8003d1c:	20000000 	.word	0x20000000
 8003d20:	431bde83 	.word	0x431bde83

08003d24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b088      	sub	sp, #32
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e2fe      	b.n	8004334 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d075      	beq.n	8003e2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d42:	4b97      	ldr	r3, [pc, #604]	; (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f003 030c 	and.w	r3, r3, #12
 8003d4a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d4c:	4b94      	ldr	r3, [pc, #592]	; (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	f003 0303 	and.w	r3, r3, #3
 8003d54:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	2b0c      	cmp	r3, #12
 8003d5a:	d102      	bne.n	8003d62 <HAL_RCC_OscConfig+0x3e>
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	2b03      	cmp	r3, #3
 8003d60:	d002      	beq.n	8003d68 <HAL_RCC_OscConfig+0x44>
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	2b08      	cmp	r3, #8
 8003d66:	d10b      	bne.n	8003d80 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d68:	4b8d      	ldr	r3, [pc, #564]	; (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d05b      	beq.n	8003e2c <HAL_RCC_OscConfig+0x108>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d157      	bne.n	8003e2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e2d9      	b.n	8004334 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d88:	d106      	bne.n	8003d98 <HAL_RCC_OscConfig+0x74>
 8003d8a:	4b85      	ldr	r3, [pc, #532]	; (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a84      	ldr	r2, [pc, #528]	; (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003d90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d94:	6013      	str	r3, [r2, #0]
 8003d96:	e01d      	b.n	8003dd4 <HAL_RCC_OscConfig+0xb0>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003da0:	d10c      	bne.n	8003dbc <HAL_RCC_OscConfig+0x98>
 8003da2:	4b7f      	ldr	r3, [pc, #508]	; (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a7e      	ldr	r2, [pc, #504]	; (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003da8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dac:	6013      	str	r3, [r2, #0]
 8003dae:	4b7c      	ldr	r3, [pc, #496]	; (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a7b      	ldr	r2, [pc, #492]	; (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003db8:	6013      	str	r3, [r2, #0]
 8003dba:	e00b      	b.n	8003dd4 <HAL_RCC_OscConfig+0xb0>
 8003dbc:	4b78      	ldr	r3, [pc, #480]	; (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a77      	ldr	r2, [pc, #476]	; (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003dc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dc6:	6013      	str	r3, [r2, #0]
 8003dc8:	4b75      	ldr	r3, [pc, #468]	; (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a74      	ldr	r2, [pc, #464]	; (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003dce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d013      	beq.n	8003e04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ddc:	f7fd fe16 	bl	8001a0c <HAL_GetTick>
 8003de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003de2:	e008      	b.n	8003df6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003de4:	f7fd fe12 	bl	8001a0c <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	2b64      	cmp	r3, #100	; 0x64
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e29e      	b.n	8004334 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003df6:	4b6a      	ldr	r3, [pc, #424]	; (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d0f0      	beq.n	8003de4 <HAL_RCC_OscConfig+0xc0>
 8003e02:	e014      	b.n	8003e2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e04:	f7fd fe02 	bl	8001a0c <HAL_GetTick>
 8003e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e0a:	e008      	b.n	8003e1e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e0c:	f7fd fdfe 	bl	8001a0c <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b64      	cmp	r3, #100	; 0x64
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e28a      	b.n	8004334 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e1e:	4b60      	ldr	r3, [pc, #384]	; (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1f0      	bne.n	8003e0c <HAL_RCC_OscConfig+0xe8>
 8003e2a:	e000      	b.n	8003e2e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d075      	beq.n	8003f26 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e3a:	4b59      	ldr	r3, [pc, #356]	; (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f003 030c 	and.w	r3, r3, #12
 8003e42:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e44:	4b56      	ldr	r3, [pc, #344]	; (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	f003 0303 	and.w	r3, r3, #3
 8003e4c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	2b0c      	cmp	r3, #12
 8003e52:	d102      	bne.n	8003e5a <HAL_RCC_OscConfig+0x136>
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d002      	beq.n	8003e60 <HAL_RCC_OscConfig+0x13c>
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	2b04      	cmp	r3, #4
 8003e5e:	d11f      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e60:	4b4f      	ldr	r3, [pc, #316]	; (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d005      	beq.n	8003e78 <HAL_RCC_OscConfig+0x154>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d101      	bne.n	8003e78 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e25d      	b.n	8004334 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e78:	4b49      	ldr	r3, [pc, #292]	; (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	691b      	ldr	r3, [r3, #16]
 8003e84:	061b      	lsls	r3, r3, #24
 8003e86:	4946      	ldr	r1, [pc, #280]	; (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003e8c:	4b45      	ldr	r3, [pc, #276]	; (8003fa4 <HAL_RCC_OscConfig+0x280>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4618      	mov	r0, r3
 8003e92:	f7fd fd6f 	bl	8001974 <HAL_InitTick>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d043      	beq.n	8003f24 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e249      	b.n	8004334 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d023      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ea8:	4b3d      	ldr	r3, [pc, #244]	; (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a3c      	ldr	r2, [pc, #240]	; (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003eae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb4:	f7fd fdaa 	bl	8001a0c <HAL_GetTick>
 8003eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003eba:	e008      	b.n	8003ece <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ebc:	f7fd fda6 	bl	8001a0c <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e232      	b.n	8004334 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ece:	4b34      	ldr	r3, [pc, #208]	; (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d0f0      	beq.n	8003ebc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eda:	4b31      	ldr	r3, [pc, #196]	; (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	061b      	lsls	r3, r3, #24
 8003ee8:	492d      	ldr	r1, [pc, #180]	; (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	604b      	str	r3, [r1, #4]
 8003eee:	e01a      	b.n	8003f26 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ef0:	4b2b      	ldr	r3, [pc, #172]	; (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a2a      	ldr	r2, [pc, #168]	; (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003ef6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003efa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003efc:	f7fd fd86 	bl	8001a0c <HAL_GetTick>
 8003f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f02:	e008      	b.n	8003f16 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f04:	f7fd fd82 	bl	8001a0c <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d901      	bls.n	8003f16 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e20e      	b.n	8004334 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f16:	4b22      	ldr	r3, [pc, #136]	; (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1f0      	bne.n	8003f04 <HAL_RCC_OscConfig+0x1e0>
 8003f22:	e000      	b.n	8003f26 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f24:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0308 	and.w	r3, r3, #8
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d041      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d01c      	beq.n	8003f74 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f3a:	4b19      	ldr	r3, [pc, #100]	; (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003f3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f40:	4a17      	ldr	r2, [pc, #92]	; (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003f42:	f043 0301 	orr.w	r3, r3, #1
 8003f46:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f4a:	f7fd fd5f 	bl	8001a0c <HAL_GetTick>
 8003f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f50:	e008      	b.n	8003f64 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f52:	f7fd fd5b 	bl	8001a0c <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d901      	bls.n	8003f64 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e1e7      	b.n	8004334 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f64:	4b0e      	ldr	r3, [pc, #56]	; (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003f66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f6a:	f003 0302 	and.w	r3, r3, #2
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d0ef      	beq.n	8003f52 <HAL_RCC_OscConfig+0x22e>
 8003f72:	e020      	b.n	8003fb6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f74:	4b0a      	ldr	r3, [pc, #40]	; (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003f76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f7a:	4a09      	ldr	r2, [pc, #36]	; (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003f7c:	f023 0301 	bic.w	r3, r3, #1
 8003f80:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f84:	f7fd fd42 	bl	8001a0c <HAL_GetTick>
 8003f88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f8a:	e00d      	b.n	8003fa8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f8c:	f7fd fd3e 	bl	8001a0c <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d906      	bls.n	8003fa8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e1ca      	b.n	8004334 <HAL_RCC_OscConfig+0x610>
 8003f9e:	bf00      	nop
 8003fa0:	40021000 	.word	0x40021000
 8003fa4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003fa8:	4b8c      	ldr	r3, [pc, #560]	; (80041dc <HAL_RCC_OscConfig+0x4b8>)
 8003faa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fae:	f003 0302 	and.w	r3, r3, #2
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d1ea      	bne.n	8003f8c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0304 	and.w	r3, r3, #4
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	f000 80a6 	beq.w	8004110 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003fc8:	4b84      	ldr	r3, [pc, #528]	; (80041dc <HAL_RCC_OscConfig+0x4b8>)
 8003fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d101      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x2b4>
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e000      	b.n	8003fda <HAL_RCC_OscConfig+0x2b6>
 8003fd8:	2300      	movs	r3, #0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00d      	beq.n	8003ffa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fde:	4b7f      	ldr	r3, [pc, #508]	; (80041dc <HAL_RCC_OscConfig+0x4b8>)
 8003fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe2:	4a7e      	ldr	r2, [pc, #504]	; (80041dc <HAL_RCC_OscConfig+0x4b8>)
 8003fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fe8:	6593      	str	r3, [r2, #88]	; 0x58
 8003fea:	4b7c      	ldr	r3, [pc, #496]	; (80041dc <HAL_RCC_OscConfig+0x4b8>)
 8003fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ff2:	60fb      	str	r3, [r7, #12]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ffa:	4b79      	ldr	r3, [pc, #484]	; (80041e0 <HAL_RCC_OscConfig+0x4bc>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004002:	2b00      	cmp	r3, #0
 8004004:	d118      	bne.n	8004038 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004006:	4b76      	ldr	r3, [pc, #472]	; (80041e0 <HAL_RCC_OscConfig+0x4bc>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a75      	ldr	r2, [pc, #468]	; (80041e0 <HAL_RCC_OscConfig+0x4bc>)
 800400c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004010:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004012:	f7fd fcfb 	bl	8001a0c <HAL_GetTick>
 8004016:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004018:	e008      	b.n	800402c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800401a:	f7fd fcf7 	bl	8001a0c <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	2b02      	cmp	r3, #2
 8004026:	d901      	bls.n	800402c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e183      	b.n	8004334 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800402c:	4b6c      	ldr	r3, [pc, #432]	; (80041e0 <HAL_RCC_OscConfig+0x4bc>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004034:	2b00      	cmp	r3, #0
 8004036:	d0f0      	beq.n	800401a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	2b01      	cmp	r3, #1
 800403e:	d108      	bne.n	8004052 <HAL_RCC_OscConfig+0x32e>
 8004040:	4b66      	ldr	r3, [pc, #408]	; (80041dc <HAL_RCC_OscConfig+0x4b8>)
 8004042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004046:	4a65      	ldr	r2, [pc, #404]	; (80041dc <HAL_RCC_OscConfig+0x4b8>)
 8004048:	f043 0301 	orr.w	r3, r3, #1
 800404c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004050:	e024      	b.n	800409c <HAL_RCC_OscConfig+0x378>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	2b05      	cmp	r3, #5
 8004058:	d110      	bne.n	800407c <HAL_RCC_OscConfig+0x358>
 800405a:	4b60      	ldr	r3, [pc, #384]	; (80041dc <HAL_RCC_OscConfig+0x4b8>)
 800405c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004060:	4a5e      	ldr	r2, [pc, #376]	; (80041dc <HAL_RCC_OscConfig+0x4b8>)
 8004062:	f043 0304 	orr.w	r3, r3, #4
 8004066:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800406a:	4b5c      	ldr	r3, [pc, #368]	; (80041dc <HAL_RCC_OscConfig+0x4b8>)
 800406c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004070:	4a5a      	ldr	r2, [pc, #360]	; (80041dc <HAL_RCC_OscConfig+0x4b8>)
 8004072:	f043 0301 	orr.w	r3, r3, #1
 8004076:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800407a:	e00f      	b.n	800409c <HAL_RCC_OscConfig+0x378>
 800407c:	4b57      	ldr	r3, [pc, #348]	; (80041dc <HAL_RCC_OscConfig+0x4b8>)
 800407e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004082:	4a56      	ldr	r2, [pc, #344]	; (80041dc <HAL_RCC_OscConfig+0x4b8>)
 8004084:	f023 0301 	bic.w	r3, r3, #1
 8004088:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800408c:	4b53      	ldr	r3, [pc, #332]	; (80041dc <HAL_RCC_OscConfig+0x4b8>)
 800408e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004092:	4a52      	ldr	r2, [pc, #328]	; (80041dc <HAL_RCC_OscConfig+0x4b8>)
 8004094:	f023 0304 	bic.w	r3, r3, #4
 8004098:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d016      	beq.n	80040d2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040a4:	f7fd fcb2 	bl	8001a0c <HAL_GetTick>
 80040a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040aa:	e00a      	b.n	80040c2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ac:	f7fd fcae 	bl	8001a0c <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d901      	bls.n	80040c2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e138      	b.n	8004334 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040c2:	4b46      	ldr	r3, [pc, #280]	; (80041dc <HAL_RCC_OscConfig+0x4b8>)
 80040c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c8:	f003 0302 	and.w	r3, r3, #2
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d0ed      	beq.n	80040ac <HAL_RCC_OscConfig+0x388>
 80040d0:	e015      	b.n	80040fe <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040d2:	f7fd fc9b 	bl	8001a0c <HAL_GetTick>
 80040d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040d8:	e00a      	b.n	80040f0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040da:	f7fd fc97 	bl	8001a0c <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d901      	bls.n	80040f0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e121      	b.n	8004334 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040f0:	4b3a      	ldr	r3, [pc, #232]	; (80041dc <HAL_RCC_OscConfig+0x4b8>)
 80040f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040f6:	f003 0302 	and.w	r3, r3, #2
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1ed      	bne.n	80040da <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80040fe:	7ffb      	ldrb	r3, [r7, #31]
 8004100:	2b01      	cmp	r3, #1
 8004102:	d105      	bne.n	8004110 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004104:	4b35      	ldr	r3, [pc, #212]	; (80041dc <HAL_RCC_OscConfig+0x4b8>)
 8004106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004108:	4a34      	ldr	r2, [pc, #208]	; (80041dc <HAL_RCC_OscConfig+0x4b8>)
 800410a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800410e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0320 	and.w	r3, r3, #32
 8004118:	2b00      	cmp	r3, #0
 800411a:	d03c      	beq.n	8004196 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d01c      	beq.n	800415e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004124:	4b2d      	ldr	r3, [pc, #180]	; (80041dc <HAL_RCC_OscConfig+0x4b8>)
 8004126:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800412a:	4a2c      	ldr	r2, [pc, #176]	; (80041dc <HAL_RCC_OscConfig+0x4b8>)
 800412c:	f043 0301 	orr.w	r3, r3, #1
 8004130:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004134:	f7fd fc6a 	bl	8001a0c <HAL_GetTick>
 8004138:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800413a:	e008      	b.n	800414e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800413c:	f7fd fc66 	bl	8001a0c <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	2b02      	cmp	r3, #2
 8004148:	d901      	bls.n	800414e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e0f2      	b.n	8004334 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800414e:	4b23      	ldr	r3, [pc, #140]	; (80041dc <HAL_RCC_OscConfig+0x4b8>)
 8004150:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004154:	f003 0302 	and.w	r3, r3, #2
 8004158:	2b00      	cmp	r3, #0
 800415a:	d0ef      	beq.n	800413c <HAL_RCC_OscConfig+0x418>
 800415c:	e01b      	b.n	8004196 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800415e:	4b1f      	ldr	r3, [pc, #124]	; (80041dc <HAL_RCC_OscConfig+0x4b8>)
 8004160:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004164:	4a1d      	ldr	r2, [pc, #116]	; (80041dc <HAL_RCC_OscConfig+0x4b8>)
 8004166:	f023 0301 	bic.w	r3, r3, #1
 800416a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800416e:	f7fd fc4d 	bl	8001a0c <HAL_GetTick>
 8004172:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004174:	e008      	b.n	8004188 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004176:	f7fd fc49 	bl	8001a0c <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	2b02      	cmp	r3, #2
 8004182:	d901      	bls.n	8004188 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e0d5      	b.n	8004334 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004188:	4b14      	ldr	r3, [pc, #80]	; (80041dc <HAL_RCC_OscConfig+0x4b8>)
 800418a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1ef      	bne.n	8004176 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	69db      	ldr	r3, [r3, #28]
 800419a:	2b00      	cmp	r3, #0
 800419c:	f000 80c9 	beq.w	8004332 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041a0:	4b0e      	ldr	r3, [pc, #56]	; (80041dc <HAL_RCC_OscConfig+0x4b8>)
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f003 030c 	and.w	r3, r3, #12
 80041a8:	2b0c      	cmp	r3, #12
 80041aa:	f000 8083 	beq.w	80042b4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	69db      	ldr	r3, [r3, #28]
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d15e      	bne.n	8004274 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041b6:	4b09      	ldr	r3, [pc, #36]	; (80041dc <HAL_RCC_OscConfig+0x4b8>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a08      	ldr	r2, [pc, #32]	; (80041dc <HAL_RCC_OscConfig+0x4b8>)
 80041bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c2:	f7fd fc23 	bl	8001a0c <HAL_GetTick>
 80041c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041c8:	e00c      	b.n	80041e4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041ca:	f7fd fc1f 	bl	8001a0c <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d905      	bls.n	80041e4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e0ab      	b.n	8004334 <HAL_RCC_OscConfig+0x610>
 80041dc:	40021000 	.word	0x40021000
 80041e0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041e4:	4b55      	ldr	r3, [pc, #340]	; (800433c <HAL_RCC_OscConfig+0x618>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d1ec      	bne.n	80041ca <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041f0:	4b52      	ldr	r3, [pc, #328]	; (800433c <HAL_RCC_OscConfig+0x618>)
 80041f2:	68da      	ldr	r2, [r3, #12]
 80041f4:	4b52      	ldr	r3, [pc, #328]	; (8004340 <HAL_RCC_OscConfig+0x61c>)
 80041f6:	4013      	ands	r3, r2
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	6a11      	ldr	r1, [r2, #32]
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004200:	3a01      	subs	r2, #1
 8004202:	0112      	lsls	r2, r2, #4
 8004204:	4311      	orrs	r1, r2
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800420a:	0212      	lsls	r2, r2, #8
 800420c:	4311      	orrs	r1, r2
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004212:	0852      	lsrs	r2, r2, #1
 8004214:	3a01      	subs	r2, #1
 8004216:	0552      	lsls	r2, r2, #21
 8004218:	4311      	orrs	r1, r2
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800421e:	0852      	lsrs	r2, r2, #1
 8004220:	3a01      	subs	r2, #1
 8004222:	0652      	lsls	r2, r2, #25
 8004224:	4311      	orrs	r1, r2
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800422a:	06d2      	lsls	r2, r2, #27
 800422c:	430a      	orrs	r2, r1
 800422e:	4943      	ldr	r1, [pc, #268]	; (800433c <HAL_RCC_OscConfig+0x618>)
 8004230:	4313      	orrs	r3, r2
 8004232:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004234:	4b41      	ldr	r3, [pc, #260]	; (800433c <HAL_RCC_OscConfig+0x618>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a40      	ldr	r2, [pc, #256]	; (800433c <HAL_RCC_OscConfig+0x618>)
 800423a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800423e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004240:	4b3e      	ldr	r3, [pc, #248]	; (800433c <HAL_RCC_OscConfig+0x618>)
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	4a3d      	ldr	r2, [pc, #244]	; (800433c <HAL_RCC_OscConfig+0x618>)
 8004246:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800424a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800424c:	f7fd fbde 	bl	8001a0c <HAL_GetTick>
 8004250:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004252:	e008      	b.n	8004266 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004254:	f7fd fbda 	bl	8001a0c <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	2b02      	cmp	r3, #2
 8004260:	d901      	bls.n	8004266 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e066      	b.n	8004334 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004266:	4b35      	ldr	r3, [pc, #212]	; (800433c <HAL_RCC_OscConfig+0x618>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d0f0      	beq.n	8004254 <HAL_RCC_OscConfig+0x530>
 8004272:	e05e      	b.n	8004332 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004274:	4b31      	ldr	r3, [pc, #196]	; (800433c <HAL_RCC_OscConfig+0x618>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a30      	ldr	r2, [pc, #192]	; (800433c <HAL_RCC_OscConfig+0x618>)
 800427a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800427e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004280:	f7fd fbc4 	bl	8001a0c <HAL_GetTick>
 8004284:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004286:	e008      	b.n	800429a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004288:	f7fd fbc0 	bl	8001a0c <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b02      	cmp	r3, #2
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e04c      	b.n	8004334 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800429a:	4b28      	ldr	r3, [pc, #160]	; (800433c <HAL_RCC_OscConfig+0x618>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1f0      	bne.n	8004288 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80042a6:	4b25      	ldr	r3, [pc, #148]	; (800433c <HAL_RCC_OscConfig+0x618>)
 80042a8:	68da      	ldr	r2, [r3, #12]
 80042aa:	4924      	ldr	r1, [pc, #144]	; (800433c <HAL_RCC_OscConfig+0x618>)
 80042ac:	4b25      	ldr	r3, [pc, #148]	; (8004344 <HAL_RCC_OscConfig+0x620>)
 80042ae:	4013      	ands	r3, r2
 80042b0:	60cb      	str	r3, [r1, #12]
 80042b2:	e03e      	b.n	8004332 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	69db      	ldr	r3, [r3, #28]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d101      	bne.n	80042c0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e039      	b.n	8004334 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80042c0:	4b1e      	ldr	r3, [pc, #120]	; (800433c <HAL_RCC_OscConfig+0x618>)
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	f003 0203 	and.w	r2, r3, #3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6a1b      	ldr	r3, [r3, #32]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d12c      	bne.n	800432e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042de:	3b01      	subs	r3, #1
 80042e0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d123      	bne.n	800432e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d11b      	bne.n	800432e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004300:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004302:	429a      	cmp	r2, r3
 8004304:	d113      	bne.n	800432e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004310:	085b      	lsrs	r3, r3, #1
 8004312:	3b01      	subs	r3, #1
 8004314:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004316:	429a      	cmp	r2, r3
 8004318:	d109      	bne.n	800432e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004324:	085b      	lsrs	r3, r3, #1
 8004326:	3b01      	subs	r3, #1
 8004328:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800432a:	429a      	cmp	r2, r3
 800432c:	d001      	beq.n	8004332 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e000      	b.n	8004334 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004332:	2300      	movs	r3, #0
}
 8004334:	4618      	mov	r0, r3
 8004336:	3720      	adds	r7, #32
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}
 800433c:	40021000 	.word	0x40021000
 8004340:	019f800c 	.word	0x019f800c
 8004344:	feeefffc 	.word	0xfeeefffc

08004348 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b086      	sub	sp, #24
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004352:	2300      	movs	r3, #0
 8004354:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d101      	bne.n	8004360 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e11e      	b.n	800459e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004360:	4b91      	ldr	r3, [pc, #580]	; (80045a8 <HAL_RCC_ClockConfig+0x260>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 030f 	and.w	r3, r3, #15
 8004368:	683a      	ldr	r2, [r7, #0]
 800436a:	429a      	cmp	r2, r3
 800436c:	d910      	bls.n	8004390 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800436e:	4b8e      	ldr	r3, [pc, #568]	; (80045a8 <HAL_RCC_ClockConfig+0x260>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f023 020f 	bic.w	r2, r3, #15
 8004376:	498c      	ldr	r1, [pc, #560]	; (80045a8 <HAL_RCC_ClockConfig+0x260>)
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	4313      	orrs	r3, r2
 800437c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800437e:	4b8a      	ldr	r3, [pc, #552]	; (80045a8 <HAL_RCC_ClockConfig+0x260>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 030f 	and.w	r3, r3, #15
 8004386:	683a      	ldr	r2, [r7, #0]
 8004388:	429a      	cmp	r2, r3
 800438a:	d001      	beq.n	8004390 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e106      	b.n	800459e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0301 	and.w	r3, r3, #1
 8004398:	2b00      	cmp	r3, #0
 800439a:	d073      	beq.n	8004484 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	2b03      	cmp	r3, #3
 80043a2:	d129      	bne.n	80043f8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043a4:	4b81      	ldr	r3, [pc, #516]	; (80045ac <HAL_RCC_ClockConfig+0x264>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d101      	bne.n	80043b4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e0f4      	b.n	800459e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80043b4:	f000 f99e 	bl	80046f4 <RCC_GetSysClockFreqFromPLLSource>
 80043b8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	4a7c      	ldr	r2, [pc, #496]	; (80045b0 <HAL_RCC_ClockConfig+0x268>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d93f      	bls.n	8004442 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80043c2:	4b7a      	ldr	r3, [pc, #488]	; (80045ac <HAL_RCC_ClockConfig+0x264>)
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d009      	beq.n	80043e2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d033      	beq.n	8004442 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d12f      	bne.n	8004442 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80043e2:	4b72      	ldr	r3, [pc, #456]	; (80045ac <HAL_RCC_ClockConfig+0x264>)
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043ea:	4a70      	ldr	r2, [pc, #448]	; (80045ac <HAL_RCC_ClockConfig+0x264>)
 80043ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043f0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80043f2:	2380      	movs	r3, #128	; 0x80
 80043f4:	617b      	str	r3, [r7, #20]
 80043f6:	e024      	b.n	8004442 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d107      	bne.n	8004410 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004400:	4b6a      	ldr	r3, [pc, #424]	; (80045ac <HAL_RCC_ClockConfig+0x264>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d109      	bne.n	8004420 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e0c6      	b.n	800459e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004410:	4b66      	ldr	r3, [pc, #408]	; (80045ac <HAL_RCC_ClockConfig+0x264>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004418:	2b00      	cmp	r3, #0
 800441a:	d101      	bne.n	8004420 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e0be      	b.n	800459e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004420:	f000 f8ce 	bl	80045c0 <HAL_RCC_GetSysClockFreq>
 8004424:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	4a61      	ldr	r2, [pc, #388]	; (80045b0 <HAL_RCC_ClockConfig+0x268>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d909      	bls.n	8004442 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800442e:	4b5f      	ldr	r3, [pc, #380]	; (80045ac <HAL_RCC_ClockConfig+0x264>)
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004436:	4a5d      	ldr	r2, [pc, #372]	; (80045ac <HAL_RCC_ClockConfig+0x264>)
 8004438:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800443c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800443e:	2380      	movs	r3, #128	; 0x80
 8004440:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004442:	4b5a      	ldr	r3, [pc, #360]	; (80045ac <HAL_RCC_ClockConfig+0x264>)
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f023 0203 	bic.w	r2, r3, #3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	4957      	ldr	r1, [pc, #348]	; (80045ac <HAL_RCC_ClockConfig+0x264>)
 8004450:	4313      	orrs	r3, r2
 8004452:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004454:	f7fd fada 	bl	8001a0c <HAL_GetTick>
 8004458:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800445a:	e00a      	b.n	8004472 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800445c:	f7fd fad6 	bl	8001a0c <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	f241 3288 	movw	r2, #5000	; 0x1388
 800446a:	4293      	cmp	r3, r2
 800446c:	d901      	bls.n	8004472 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e095      	b.n	800459e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004472:	4b4e      	ldr	r3, [pc, #312]	; (80045ac <HAL_RCC_ClockConfig+0x264>)
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f003 020c 	and.w	r2, r3, #12
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	429a      	cmp	r2, r3
 8004482:	d1eb      	bne.n	800445c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0302 	and.w	r3, r3, #2
 800448c:	2b00      	cmp	r3, #0
 800448e:	d023      	beq.n	80044d8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0304 	and.w	r3, r3, #4
 8004498:	2b00      	cmp	r3, #0
 800449a:	d005      	beq.n	80044a8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800449c:	4b43      	ldr	r3, [pc, #268]	; (80045ac <HAL_RCC_ClockConfig+0x264>)
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	4a42      	ldr	r2, [pc, #264]	; (80045ac <HAL_RCC_ClockConfig+0x264>)
 80044a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80044a6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0308 	and.w	r3, r3, #8
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d007      	beq.n	80044c4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80044b4:	4b3d      	ldr	r3, [pc, #244]	; (80045ac <HAL_RCC_ClockConfig+0x264>)
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80044bc:	4a3b      	ldr	r2, [pc, #236]	; (80045ac <HAL_RCC_ClockConfig+0x264>)
 80044be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80044c2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044c4:	4b39      	ldr	r3, [pc, #228]	; (80045ac <HAL_RCC_ClockConfig+0x264>)
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	4936      	ldr	r1, [pc, #216]	; (80045ac <HAL_RCC_ClockConfig+0x264>)
 80044d2:	4313      	orrs	r3, r2
 80044d4:	608b      	str	r3, [r1, #8]
 80044d6:	e008      	b.n	80044ea <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	2b80      	cmp	r3, #128	; 0x80
 80044dc:	d105      	bne.n	80044ea <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80044de:	4b33      	ldr	r3, [pc, #204]	; (80045ac <HAL_RCC_ClockConfig+0x264>)
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	4a32      	ldr	r2, [pc, #200]	; (80045ac <HAL_RCC_ClockConfig+0x264>)
 80044e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044e8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044ea:	4b2f      	ldr	r3, [pc, #188]	; (80045a8 <HAL_RCC_ClockConfig+0x260>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 030f 	and.w	r3, r3, #15
 80044f2:	683a      	ldr	r2, [r7, #0]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d21d      	bcs.n	8004534 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044f8:	4b2b      	ldr	r3, [pc, #172]	; (80045a8 <HAL_RCC_ClockConfig+0x260>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f023 020f 	bic.w	r2, r3, #15
 8004500:	4929      	ldr	r1, [pc, #164]	; (80045a8 <HAL_RCC_ClockConfig+0x260>)
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	4313      	orrs	r3, r2
 8004506:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004508:	f7fd fa80 	bl	8001a0c <HAL_GetTick>
 800450c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800450e:	e00a      	b.n	8004526 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004510:	f7fd fa7c 	bl	8001a0c <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	f241 3288 	movw	r2, #5000	; 0x1388
 800451e:	4293      	cmp	r3, r2
 8004520:	d901      	bls.n	8004526 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e03b      	b.n	800459e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004526:	4b20      	ldr	r3, [pc, #128]	; (80045a8 <HAL_RCC_ClockConfig+0x260>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 030f 	and.w	r3, r3, #15
 800452e:	683a      	ldr	r2, [r7, #0]
 8004530:	429a      	cmp	r2, r3
 8004532:	d1ed      	bne.n	8004510 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0304 	and.w	r3, r3, #4
 800453c:	2b00      	cmp	r3, #0
 800453e:	d008      	beq.n	8004552 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004540:	4b1a      	ldr	r3, [pc, #104]	; (80045ac <HAL_RCC_ClockConfig+0x264>)
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	4917      	ldr	r1, [pc, #92]	; (80045ac <HAL_RCC_ClockConfig+0x264>)
 800454e:	4313      	orrs	r3, r2
 8004550:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0308 	and.w	r3, r3, #8
 800455a:	2b00      	cmp	r3, #0
 800455c:	d009      	beq.n	8004572 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800455e:	4b13      	ldr	r3, [pc, #76]	; (80045ac <HAL_RCC_ClockConfig+0x264>)
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	00db      	lsls	r3, r3, #3
 800456c:	490f      	ldr	r1, [pc, #60]	; (80045ac <HAL_RCC_ClockConfig+0x264>)
 800456e:	4313      	orrs	r3, r2
 8004570:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004572:	f000 f825 	bl	80045c0 <HAL_RCC_GetSysClockFreq>
 8004576:	4602      	mov	r2, r0
 8004578:	4b0c      	ldr	r3, [pc, #48]	; (80045ac <HAL_RCC_ClockConfig+0x264>)
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	091b      	lsrs	r3, r3, #4
 800457e:	f003 030f 	and.w	r3, r3, #15
 8004582:	490c      	ldr	r1, [pc, #48]	; (80045b4 <HAL_RCC_ClockConfig+0x26c>)
 8004584:	5ccb      	ldrb	r3, [r1, r3]
 8004586:	f003 031f 	and.w	r3, r3, #31
 800458a:	fa22 f303 	lsr.w	r3, r2, r3
 800458e:	4a0a      	ldr	r2, [pc, #40]	; (80045b8 <HAL_RCC_ClockConfig+0x270>)
 8004590:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004592:	4b0a      	ldr	r3, [pc, #40]	; (80045bc <HAL_RCC_ClockConfig+0x274>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4618      	mov	r0, r3
 8004598:	f7fd f9ec 	bl	8001974 <HAL_InitTick>
 800459c:	4603      	mov	r3, r0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3718      	adds	r7, #24
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	40022000 	.word	0x40022000
 80045ac:	40021000 	.word	0x40021000
 80045b0:	04c4b400 	.word	0x04c4b400
 80045b4:	08006e24 	.word	0x08006e24
 80045b8:	20000000 	.word	0x20000000
 80045bc:	20000004 	.word	0x20000004

080045c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b087      	sub	sp, #28
 80045c4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80045c6:	4b2c      	ldr	r3, [pc, #176]	; (8004678 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f003 030c 	and.w	r3, r3, #12
 80045ce:	2b04      	cmp	r3, #4
 80045d0:	d102      	bne.n	80045d8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80045d2:	4b2a      	ldr	r3, [pc, #168]	; (800467c <HAL_RCC_GetSysClockFreq+0xbc>)
 80045d4:	613b      	str	r3, [r7, #16]
 80045d6:	e047      	b.n	8004668 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80045d8:	4b27      	ldr	r3, [pc, #156]	; (8004678 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	f003 030c 	and.w	r3, r3, #12
 80045e0:	2b08      	cmp	r3, #8
 80045e2:	d102      	bne.n	80045ea <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80045e4:	4b26      	ldr	r3, [pc, #152]	; (8004680 <HAL_RCC_GetSysClockFreq+0xc0>)
 80045e6:	613b      	str	r3, [r7, #16]
 80045e8:	e03e      	b.n	8004668 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80045ea:	4b23      	ldr	r3, [pc, #140]	; (8004678 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f003 030c 	and.w	r3, r3, #12
 80045f2:	2b0c      	cmp	r3, #12
 80045f4:	d136      	bne.n	8004664 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80045f6:	4b20      	ldr	r3, [pc, #128]	; (8004678 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	f003 0303 	and.w	r3, r3, #3
 80045fe:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004600:	4b1d      	ldr	r3, [pc, #116]	; (8004678 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	091b      	lsrs	r3, r3, #4
 8004606:	f003 030f 	and.w	r3, r3, #15
 800460a:	3301      	adds	r3, #1
 800460c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2b03      	cmp	r3, #3
 8004612:	d10c      	bne.n	800462e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004614:	4a1a      	ldr	r2, [pc, #104]	; (8004680 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	fbb2 f3f3 	udiv	r3, r2, r3
 800461c:	4a16      	ldr	r2, [pc, #88]	; (8004678 <HAL_RCC_GetSysClockFreq+0xb8>)
 800461e:	68d2      	ldr	r2, [r2, #12]
 8004620:	0a12      	lsrs	r2, r2, #8
 8004622:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004626:	fb02 f303 	mul.w	r3, r2, r3
 800462a:	617b      	str	r3, [r7, #20]
      break;
 800462c:	e00c      	b.n	8004648 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800462e:	4a13      	ldr	r2, [pc, #76]	; (800467c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	fbb2 f3f3 	udiv	r3, r2, r3
 8004636:	4a10      	ldr	r2, [pc, #64]	; (8004678 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004638:	68d2      	ldr	r2, [r2, #12]
 800463a:	0a12      	lsrs	r2, r2, #8
 800463c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004640:	fb02 f303 	mul.w	r3, r2, r3
 8004644:	617b      	str	r3, [r7, #20]
      break;
 8004646:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004648:	4b0b      	ldr	r3, [pc, #44]	; (8004678 <HAL_RCC_GetSysClockFreq+0xb8>)
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	0e5b      	lsrs	r3, r3, #25
 800464e:	f003 0303 	and.w	r3, r3, #3
 8004652:	3301      	adds	r3, #1
 8004654:	005b      	lsls	r3, r3, #1
 8004656:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004658:	697a      	ldr	r2, [r7, #20]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004660:	613b      	str	r3, [r7, #16]
 8004662:	e001      	b.n	8004668 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004664:	2300      	movs	r3, #0
 8004666:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004668:	693b      	ldr	r3, [r7, #16]
}
 800466a:	4618      	mov	r0, r3
 800466c:	371c      	adds	r7, #28
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	40021000 	.word	0x40021000
 800467c:	00f42400 	.word	0x00f42400
 8004680:	007a1200 	.word	0x007a1200

08004684 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004684:	b480      	push	{r7}
 8004686:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004688:	4b03      	ldr	r3, [pc, #12]	; (8004698 <HAL_RCC_GetHCLKFreq+0x14>)
 800468a:	681b      	ldr	r3, [r3, #0]
}
 800468c:	4618      	mov	r0, r3
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	20000000 	.word	0x20000000

0800469c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80046a0:	f7ff fff0 	bl	8004684 <HAL_RCC_GetHCLKFreq>
 80046a4:	4602      	mov	r2, r0
 80046a6:	4b06      	ldr	r3, [pc, #24]	; (80046c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	0a1b      	lsrs	r3, r3, #8
 80046ac:	f003 0307 	and.w	r3, r3, #7
 80046b0:	4904      	ldr	r1, [pc, #16]	; (80046c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80046b2:	5ccb      	ldrb	r3, [r1, r3]
 80046b4:	f003 031f 	and.w	r3, r3, #31
 80046b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046bc:	4618      	mov	r0, r3
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	40021000 	.word	0x40021000
 80046c4:	08006e34 	.word	0x08006e34

080046c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80046cc:	f7ff ffda 	bl	8004684 <HAL_RCC_GetHCLKFreq>
 80046d0:	4602      	mov	r2, r0
 80046d2:	4b06      	ldr	r3, [pc, #24]	; (80046ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	0adb      	lsrs	r3, r3, #11
 80046d8:	f003 0307 	and.w	r3, r3, #7
 80046dc:	4904      	ldr	r1, [pc, #16]	; (80046f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80046de:	5ccb      	ldrb	r3, [r1, r3]
 80046e0:	f003 031f 	and.w	r3, r3, #31
 80046e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	40021000 	.word	0x40021000
 80046f0:	08006e34 	.word	0x08006e34

080046f4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b087      	sub	sp, #28
 80046f8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80046fa:	4b1e      	ldr	r3, [pc, #120]	; (8004774 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	f003 0303 	and.w	r3, r3, #3
 8004702:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004704:	4b1b      	ldr	r3, [pc, #108]	; (8004774 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	091b      	lsrs	r3, r3, #4
 800470a:	f003 030f 	and.w	r3, r3, #15
 800470e:	3301      	adds	r3, #1
 8004710:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	2b03      	cmp	r3, #3
 8004716:	d10c      	bne.n	8004732 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004718:	4a17      	ldr	r2, [pc, #92]	; (8004778 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004720:	4a14      	ldr	r2, [pc, #80]	; (8004774 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004722:	68d2      	ldr	r2, [r2, #12]
 8004724:	0a12      	lsrs	r2, r2, #8
 8004726:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800472a:	fb02 f303 	mul.w	r3, r2, r3
 800472e:	617b      	str	r3, [r7, #20]
    break;
 8004730:	e00c      	b.n	800474c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004732:	4a12      	ldr	r2, [pc, #72]	; (800477c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	fbb2 f3f3 	udiv	r3, r2, r3
 800473a:	4a0e      	ldr	r2, [pc, #56]	; (8004774 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800473c:	68d2      	ldr	r2, [r2, #12]
 800473e:	0a12      	lsrs	r2, r2, #8
 8004740:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004744:	fb02 f303 	mul.w	r3, r2, r3
 8004748:	617b      	str	r3, [r7, #20]
    break;
 800474a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800474c:	4b09      	ldr	r3, [pc, #36]	; (8004774 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	0e5b      	lsrs	r3, r3, #25
 8004752:	f003 0303 	and.w	r3, r3, #3
 8004756:	3301      	adds	r3, #1
 8004758:	005b      	lsls	r3, r3, #1
 800475a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800475c:	697a      	ldr	r2, [r7, #20]
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	fbb2 f3f3 	udiv	r3, r2, r3
 8004764:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004766:	687b      	ldr	r3, [r7, #4]
}
 8004768:	4618      	mov	r0, r3
 800476a:	371c      	adds	r7, #28
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr
 8004774:	40021000 	.word	0x40021000
 8004778:	007a1200 	.word	0x007a1200
 800477c:	00f42400 	.word	0x00f42400

08004780 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b086      	sub	sp, #24
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004788:	2300      	movs	r3, #0
 800478a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800478c:	2300      	movs	r3, #0
 800478e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004798:	2b00      	cmp	r3, #0
 800479a:	f000 8098 	beq.w	80048ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800479e:	2300      	movs	r3, #0
 80047a0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047a2:	4b43      	ldr	r3, [pc, #268]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d10d      	bne.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047ae:	4b40      	ldr	r3, [pc, #256]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047b2:	4a3f      	ldr	r2, [pc, #252]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047b8:	6593      	str	r3, [r2, #88]	; 0x58
 80047ba:	4b3d      	ldr	r3, [pc, #244]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047c2:	60bb      	str	r3, [r7, #8]
 80047c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047c6:	2301      	movs	r3, #1
 80047c8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047ca:	4b3a      	ldr	r3, [pc, #232]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a39      	ldr	r2, [pc, #228]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80047d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80047d6:	f7fd f919 	bl	8001a0c <HAL_GetTick>
 80047da:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047dc:	e009      	b.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047de:	f7fd f915 	bl	8001a0c <HAL_GetTick>
 80047e2:	4602      	mov	r2, r0
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d902      	bls.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	74fb      	strb	r3, [r7, #19]
        break;
 80047f0:	e005      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047f2:	4b30      	ldr	r3, [pc, #192]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d0ef      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80047fe:	7cfb      	ldrb	r3, [r7, #19]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d159      	bne.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004804:	4b2a      	ldr	r3, [pc, #168]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800480a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800480e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d01e      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800481a:	697a      	ldr	r2, [r7, #20]
 800481c:	429a      	cmp	r2, r3
 800481e:	d019      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004820:	4b23      	ldr	r3, [pc, #140]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004826:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800482a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800482c:	4b20      	ldr	r3, [pc, #128]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800482e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004832:	4a1f      	ldr	r2, [pc, #124]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004838:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800483c:	4b1c      	ldr	r3, [pc, #112]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800483e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004842:	4a1b      	ldr	r2, [pc, #108]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004844:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004848:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800484c:	4a18      	ldr	r2, [pc, #96]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	f003 0301 	and.w	r3, r3, #1
 800485a:	2b00      	cmp	r3, #0
 800485c:	d016      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800485e:	f7fd f8d5 	bl	8001a0c <HAL_GetTick>
 8004862:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004864:	e00b      	b.n	800487e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004866:	f7fd f8d1 	bl	8001a0c <HAL_GetTick>
 800486a:	4602      	mov	r2, r0
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	f241 3288 	movw	r2, #5000	; 0x1388
 8004874:	4293      	cmp	r3, r2
 8004876:	d902      	bls.n	800487e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004878:	2303      	movs	r3, #3
 800487a:	74fb      	strb	r3, [r7, #19]
            break;
 800487c:	e006      	b.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800487e:	4b0c      	ldr	r3, [pc, #48]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004884:	f003 0302 	and.w	r3, r3, #2
 8004888:	2b00      	cmp	r3, #0
 800488a:	d0ec      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800488c:	7cfb      	ldrb	r3, [r7, #19]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d10b      	bne.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004892:	4b07      	ldr	r3, [pc, #28]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004898:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048a0:	4903      	ldr	r1, [pc, #12]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80048a8:	e008      	b.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80048aa:	7cfb      	ldrb	r3, [r7, #19]
 80048ac:	74bb      	strb	r3, [r7, #18]
 80048ae:	e005      	b.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80048b0:	40021000 	.word	0x40021000
 80048b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048b8:	7cfb      	ldrb	r3, [r7, #19]
 80048ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048bc:	7c7b      	ldrb	r3, [r7, #17]
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d105      	bne.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048c2:	4ba7      	ldr	r3, [pc, #668]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048c6:	4aa6      	ldr	r2, [pc, #664]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048cc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0301 	and.w	r3, r3, #1
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00a      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048da:	4ba1      	ldr	r3, [pc, #644]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048e0:	f023 0203 	bic.w	r2, r3, #3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	499d      	ldr	r1, [pc, #628]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048ea:	4313      	orrs	r3, r2
 80048ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0302 	and.w	r3, r3, #2
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d00a      	beq.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048fc:	4b98      	ldr	r3, [pc, #608]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004902:	f023 020c 	bic.w	r2, r3, #12
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	4995      	ldr	r1, [pc, #596]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800490c:	4313      	orrs	r3, r2
 800490e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0304 	and.w	r3, r3, #4
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00a      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800491e:	4b90      	ldr	r3, [pc, #576]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004924:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	498c      	ldr	r1, [pc, #560]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800492e:	4313      	orrs	r3, r2
 8004930:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0308 	and.w	r3, r3, #8
 800493c:	2b00      	cmp	r3, #0
 800493e:	d00a      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004940:	4b87      	ldr	r3, [pc, #540]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004946:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	4984      	ldr	r1, [pc, #528]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004950:	4313      	orrs	r3, r2
 8004952:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0310 	and.w	r3, r3, #16
 800495e:	2b00      	cmp	r3, #0
 8004960:	d00a      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004962:	4b7f      	ldr	r3, [pc, #508]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004968:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	695b      	ldr	r3, [r3, #20]
 8004970:	497b      	ldr	r1, [pc, #492]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004972:	4313      	orrs	r3, r2
 8004974:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0320 	and.w	r3, r3, #32
 8004980:	2b00      	cmp	r3, #0
 8004982:	d00a      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004984:	4b76      	ldr	r3, [pc, #472]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800498a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	4973      	ldr	r1, [pc, #460]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004994:	4313      	orrs	r3, r2
 8004996:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00a      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049a6:	4b6e      	ldr	r3, [pc, #440]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	69db      	ldr	r3, [r3, #28]
 80049b4:	496a      	ldr	r1, [pc, #424]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049b6:	4313      	orrs	r3, r2
 80049b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d00a      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80049c8:	4b65      	ldr	r3, [pc, #404]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a1b      	ldr	r3, [r3, #32]
 80049d6:	4962      	ldr	r1, [pc, #392]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049d8:	4313      	orrs	r3, r2
 80049da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00a      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80049ea:	4b5d      	ldr	r3, [pc, #372]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f8:	4959      	ldr	r1, [pc, #356]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d00a      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a0c:	4b54      	ldr	r3, [pc, #336]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a12:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a1a:	4951      	ldr	r1, [pc, #324]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d015      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a2e:	4b4c      	ldr	r3, [pc, #304]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a34:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a3c:	4948      	ldr	r1, [pc, #288]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a4c:	d105      	bne.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a4e:	4b44      	ldr	r3, [pc, #272]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	4a43      	ldr	r2, [pc, #268]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a58:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d015      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004a66:	4b3e      	ldr	r3, [pc, #248]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a6c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a74:	493a      	ldr	r1, [pc, #232]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a84:	d105      	bne.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a86:	4b36      	ldr	r3, [pc, #216]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	4a35      	ldr	r2, [pc, #212]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a90:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d015      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004a9e:	4b30      	ldr	r3, [pc, #192]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aa4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aac:	492c      	ldr	r1, [pc, #176]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ab8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004abc:	d105      	bne.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004abe:	4b28      	ldr	r3, [pc, #160]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	4a27      	ldr	r2, [pc, #156]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ac4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ac8:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d015      	beq.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ad6:	4b22      	ldr	r3, [pc, #136]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004adc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae4:	491e      	ldr	r1, [pc, #120]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004af4:	d105      	bne.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004af6:	4b1a      	ldr	r3, [pc, #104]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	4a19      	ldr	r2, [pc, #100]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004afc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b00:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d015      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b0e:	4b14      	ldr	r3, [pc, #80]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b14:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b1c:	4910      	ldr	r1, [pc, #64]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b2c:	d105      	bne.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b2e:	4b0c      	ldr	r3, [pc, #48]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	4a0b      	ldr	r2, [pc, #44]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b38:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d018      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004b46:	4b06      	ldr	r3, [pc, #24]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b4c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b54:	4902      	ldr	r1, [pc, #8]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b56:	4313      	orrs	r3, r2
 8004b58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	e001      	b.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004b60:	40021000 	.word	0x40021000
 8004b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b6a:	d105      	bne.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004b6c:	4b21      	ldr	r3, [pc, #132]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	4a20      	ldr	r2, [pc, #128]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004b72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b76:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d015      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004b84:	4b1b      	ldr	r3, [pc, #108]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b8a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b92:	4918      	ldr	r1, [pc, #96]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004b94:	4313      	orrs	r3, r2
 8004b96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ba2:	d105      	bne.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004ba4:	4b13      	ldr	r3, [pc, #76]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	4a12      	ldr	r2, [pc, #72]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004baa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bae:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d015      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004bbc:	4b0d      	ldr	r3, [pc, #52]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004bbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004bc2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bca:	490a      	ldr	r1, [pc, #40]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bd6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004bda:	d105      	bne.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bdc:	4b05      	ldr	r3, [pc, #20]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	4a04      	ldr	r2, [pc, #16]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004be2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004be6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004be8:	7cbb      	ldrb	r3, [r7, #18]
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3718      	adds	r7, #24
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	40021000 	.word	0x40021000

08004bf8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d101      	bne.n	8004c0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e049      	b.n	8004c9e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d106      	bne.n	8004c24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f7fc fd16 	bl	8001650 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2202      	movs	r2, #2
 8004c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	3304      	adds	r3, #4
 8004c34:	4619      	mov	r1, r3
 8004c36:	4610      	mov	r0, r2
 8004c38:	f000 fa1e 	bl	8005078 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3708      	adds	r7, #8
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
	...

08004ca8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b085      	sub	sp, #20
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d001      	beq.n	8004cc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e04f      	b.n	8004d60 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2202      	movs	r2, #2
 8004cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	68da      	ldr	r2, [r3, #12]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f042 0201 	orr.w	r2, r2, #1
 8004cd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a23      	ldr	r2, [pc, #140]	; (8004d6c <HAL_TIM_Base_Start_IT+0xc4>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d01d      	beq.n	8004d1e <HAL_TIM_Base_Start_IT+0x76>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cea:	d018      	beq.n	8004d1e <HAL_TIM_Base_Start_IT+0x76>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a1f      	ldr	r2, [pc, #124]	; (8004d70 <HAL_TIM_Base_Start_IT+0xc8>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d013      	beq.n	8004d1e <HAL_TIM_Base_Start_IT+0x76>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a1e      	ldr	r2, [pc, #120]	; (8004d74 <HAL_TIM_Base_Start_IT+0xcc>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d00e      	beq.n	8004d1e <HAL_TIM_Base_Start_IT+0x76>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a1c      	ldr	r2, [pc, #112]	; (8004d78 <HAL_TIM_Base_Start_IT+0xd0>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d009      	beq.n	8004d1e <HAL_TIM_Base_Start_IT+0x76>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a1b      	ldr	r2, [pc, #108]	; (8004d7c <HAL_TIM_Base_Start_IT+0xd4>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d004      	beq.n	8004d1e <HAL_TIM_Base_Start_IT+0x76>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a19      	ldr	r2, [pc, #100]	; (8004d80 <HAL_TIM_Base_Start_IT+0xd8>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d115      	bne.n	8004d4a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	689a      	ldr	r2, [r3, #8]
 8004d24:	4b17      	ldr	r3, [pc, #92]	; (8004d84 <HAL_TIM_Base_Start_IT+0xdc>)
 8004d26:	4013      	ands	r3, r2
 8004d28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2b06      	cmp	r3, #6
 8004d2e:	d015      	beq.n	8004d5c <HAL_TIM_Base_Start_IT+0xb4>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d36:	d011      	beq.n	8004d5c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f042 0201 	orr.w	r2, r2, #1
 8004d46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d48:	e008      	b.n	8004d5c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f042 0201 	orr.w	r2, r2, #1
 8004d58:	601a      	str	r2, [r3, #0]
 8004d5a:	e000      	b.n	8004d5e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d5c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d5e:	2300      	movs	r3, #0
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3714      	adds	r7, #20
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr
 8004d6c:	40012c00 	.word	0x40012c00
 8004d70:	40000400 	.word	0x40000400
 8004d74:	40000800 	.word	0x40000800
 8004d78:	40013400 	.word	0x40013400
 8004d7c:	40014000 	.word	0x40014000
 8004d80:	40015000 	.word	0x40015000
 8004d84:	00010007 	.word	0x00010007

08004d88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	f003 0302 	and.w	r3, r3, #2
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d020      	beq.n	8004dec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f003 0302 	and.w	r3, r3, #2
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d01b      	beq.n	8004dec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f06f 0202 	mvn.w	r2, #2
 8004dbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	699b      	ldr	r3, [r3, #24]
 8004dca:	f003 0303 	and.w	r3, r3, #3
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d003      	beq.n	8004dda <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 f931 	bl	800503a <HAL_TIM_IC_CaptureCallback>
 8004dd8:	e005      	b.n	8004de6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 f923 	bl	8005026 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f000 f934 	bl	800504e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	f003 0304 	and.w	r3, r3, #4
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d020      	beq.n	8004e38 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	f003 0304 	and.w	r3, r3, #4
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d01b      	beq.n	8004e38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f06f 0204 	mvn.w	r2, #4
 8004e08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2202      	movs	r2, #2
 8004e0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	699b      	ldr	r3, [r3, #24]
 8004e16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d003      	beq.n	8004e26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 f90b 	bl	800503a <HAL_TIM_IC_CaptureCallback>
 8004e24:	e005      	b.n	8004e32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 f8fd 	bl	8005026 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f000 f90e 	bl	800504e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	f003 0308 	and.w	r3, r3, #8
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d020      	beq.n	8004e84 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f003 0308 	and.w	r3, r3, #8
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d01b      	beq.n	8004e84 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f06f 0208 	mvn.w	r2, #8
 8004e54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2204      	movs	r2, #4
 8004e5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	69db      	ldr	r3, [r3, #28]
 8004e62:	f003 0303 	and.w	r3, r3, #3
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d003      	beq.n	8004e72 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 f8e5 	bl	800503a <HAL_TIM_IC_CaptureCallback>
 8004e70:	e005      	b.n	8004e7e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 f8d7 	bl	8005026 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f000 f8e8 	bl	800504e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	f003 0310 	and.w	r3, r3, #16
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d020      	beq.n	8004ed0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f003 0310 	and.w	r3, r3, #16
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d01b      	beq.n	8004ed0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f06f 0210 	mvn.w	r2, #16
 8004ea0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2208      	movs	r2, #8
 8004ea6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	69db      	ldr	r3, [r3, #28]
 8004eae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d003      	beq.n	8004ebe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 f8bf 	bl	800503a <HAL_TIM_IC_CaptureCallback>
 8004ebc:	e005      	b.n	8004eca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 f8b1 	bl	8005026 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f000 f8c2 	bl	800504e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	f003 0301 	and.w	r3, r3, #1
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d00c      	beq.n	8004ef4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f003 0301 	and.w	r3, r3, #1
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d007      	beq.n	8004ef4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f06f 0201 	mvn.w	r2, #1
 8004eec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f7fc faaa 	bl	8001448 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d104      	bne.n	8004f08 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d00c      	beq.n	8004f22 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d007      	beq.n	8004f22 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8004f1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f000 f9ed 	bl	80052fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d00c      	beq.n	8004f46 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d007      	beq.n	8004f46 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004f3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f000 f9e5 	bl	8005310 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d00c      	beq.n	8004f6a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d007      	beq.n	8004f6a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f000 f87c 	bl	8005062 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	f003 0320 	and.w	r3, r3, #32
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d00c      	beq.n	8004f8e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f003 0320 	and.w	r3, r3, #32
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d007      	beq.n	8004f8e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f06f 0220 	mvn.w	r2, #32
 8004f86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f000 f9ad 	bl	80052e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00c      	beq.n	8004fb2 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d007      	beq.n	8004fb2 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004faa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f000 f9b9 	bl	8005324 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d00c      	beq.n	8004fd6 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d007      	beq.n	8004fd6 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004fce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 f9b1 	bl	8005338 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d00c      	beq.n	8004ffa <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d007      	beq.n	8004ffa <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004ff2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f000 f9a9 	bl	800534c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005000:	2b00      	cmp	r3, #0
 8005002:	d00c      	beq.n	800501e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d007      	beq.n	800501e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005016:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f000 f9a1 	bl	8005360 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800501e:	bf00      	nop
 8005020:	3710      	adds	r7, #16
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}

08005026 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005026:	b480      	push	{r7}
 8005028:	b083      	sub	sp, #12
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800502e:	bf00      	nop
 8005030:	370c      	adds	r7, #12
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr

0800503a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800503a:	b480      	push	{r7}
 800503c:	b083      	sub	sp, #12
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005042:	bf00      	nop
 8005044:	370c      	adds	r7, #12
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr

0800504e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800504e:	b480      	push	{r7}
 8005050:	b083      	sub	sp, #12
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005056:	bf00      	nop
 8005058:	370c      	adds	r7, #12
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr

08005062 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005062:	b480      	push	{r7}
 8005064:	b083      	sub	sp, #12
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800506a:	bf00      	nop
 800506c:	370c      	adds	r7, #12
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr
	...

08005078 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005078:	b480      	push	{r7}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4a48      	ldr	r2, [pc, #288]	; (80051ac <TIM_Base_SetConfig+0x134>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d013      	beq.n	80050b8 <TIM_Base_SetConfig+0x40>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005096:	d00f      	beq.n	80050b8 <TIM_Base_SetConfig+0x40>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a45      	ldr	r2, [pc, #276]	; (80051b0 <TIM_Base_SetConfig+0x138>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d00b      	beq.n	80050b8 <TIM_Base_SetConfig+0x40>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4a44      	ldr	r2, [pc, #272]	; (80051b4 <TIM_Base_SetConfig+0x13c>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d007      	beq.n	80050b8 <TIM_Base_SetConfig+0x40>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a43      	ldr	r2, [pc, #268]	; (80051b8 <TIM_Base_SetConfig+0x140>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d003      	beq.n	80050b8 <TIM_Base_SetConfig+0x40>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a42      	ldr	r2, [pc, #264]	; (80051bc <TIM_Base_SetConfig+0x144>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d108      	bne.n	80050ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a37      	ldr	r2, [pc, #220]	; (80051ac <TIM_Base_SetConfig+0x134>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d01f      	beq.n	8005112 <TIM_Base_SetConfig+0x9a>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050d8:	d01b      	beq.n	8005112 <TIM_Base_SetConfig+0x9a>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a34      	ldr	r2, [pc, #208]	; (80051b0 <TIM_Base_SetConfig+0x138>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d017      	beq.n	8005112 <TIM_Base_SetConfig+0x9a>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a33      	ldr	r2, [pc, #204]	; (80051b4 <TIM_Base_SetConfig+0x13c>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d013      	beq.n	8005112 <TIM_Base_SetConfig+0x9a>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a32      	ldr	r2, [pc, #200]	; (80051b8 <TIM_Base_SetConfig+0x140>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d00f      	beq.n	8005112 <TIM_Base_SetConfig+0x9a>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a32      	ldr	r2, [pc, #200]	; (80051c0 <TIM_Base_SetConfig+0x148>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d00b      	beq.n	8005112 <TIM_Base_SetConfig+0x9a>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a31      	ldr	r2, [pc, #196]	; (80051c4 <TIM_Base_SetConfig+0x14c>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d007      	beq.n	8005112 <TIM_Base_SetConfig+0x9a>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a30      	ldr	r2, [pc, #192]	; (80051c8 <TIM_Base_SetConfig+0x150>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d003      	beq.n	8005112 <TIM_Base_SetConfig+0x9a>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a2b      	ldr	r2, [pc, #172]	; (80051bc <TIM_Base_SetConfig+0x144>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d108      	bne.n	8005124 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005118:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	4313      	orrs	r3, r2
 8005122:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	695b      	ldr	r3, [r3, #20]
 800512e:	4313      	orrs	r3, r2
 8005130:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	689a      	ldr	r2, [r3, #8]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4a18      	ldr	r2, [pc, #96]	; (80051ac <TIM_Base_SetConfig+0x134>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d013      	beq.n	8005178 <TIM_Base_SetConfig+0x100>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4a19      	ldr	r2, [pc, #100]	; (80051b8 <TIM_Base_SetConfig+0x140>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d00f      	beq.n	8005178 <TIM_Base_SetConfig+0x100>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a19      	ldr	r2, [pc, #100]	; (80051c0 <TIM_Base_SetConfig+0x148>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d00b      	beq.n	8005178 <TIM_Base_SetConfig+0x100>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4a18      	ldr	r2, [pc, #96]	; (80051c4 <TIM_Base_SetConfig+0x14c>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d007      	beq.n	8005178 <TIM_Base_SetConfig+0x100>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4a17      	ldr	r2, [pc, #92]	; (80051c8 <TIM_Base_SetConfig+0x150>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d003      	beq.n	8005178 <TIM_Base_SetConfig+0x100>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4a12      	ldr	r2, [pc, #72]	; (80051bc <TIM_Base_SetConfig+0x144>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d103      	bne.n	8005180 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	691a      	ldr	r2, [r3, #16]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	f003 0301 	and.w	r3, r3, #1
 800518e:	2b01      	cmp	r3, #1
 8005190:	d105      	bne.n	800519e <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	f023 0201 	bic.w	r2, r3, #1
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	611a      	str	r2, [r3, #16]
  }
}
 800519e:	bf00      	nop
 80051a0:	3714      	adds	r7, #20
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	40012c00 	.word	0x40012c00
 80051b0:	40000400 	.word	0x40000400
 80051b4:	40000800 	.word	0x40000800
 80051b8:	40013400 	.word	0x40013400
 80051bc:	40015000 	.word	0x40015000
 80051c0:	40014000 	.word	0x40014000
 80051c4:	40014400 	.word	0x40014400
 80051c8:	40014800 	.word	0x40014800

080051cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b085      	sub	sp, #20
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d101      	bne.n	80051e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051e0:	2302      	movs	r3, #2
 80051e2:	e06f      	b.n	80052c4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2202      	movs	r2, #2
 80051f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a31      	ldr	r2, [pc, #196]	; (80052d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d009      	beq.n	8005222 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a30      	ldr	r2, [pc, #192]	; (80052d4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d004      	beq.n	8005222 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a2e      	ldr	r2, [pc, #184]	; (80052d8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d108      	bne.n	8005234 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005228:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	4313      	orrs	r3, r2
 8005232:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800523a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800523e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	68fa      	ldr	r2, [r7, #12]
 8005246:	4313      	orrs	r3, r2
 8005248:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a1e      	ldr	r2, [pc, #120]	; (80052d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d01d      	beq.n	8005298 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005264:	d018      	beq.n	8005298 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a1c      	ldr	r2, [pc, #112]	; (80052dc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d013      	beq.n	8005298 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a1a      	ldr	r2, [pc, #104]	; (80052e0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d00e      	beq.n	8005298 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a15      	ldr	r2, [pc, #84]	; (80052d4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d009      	beq.n	8005298 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a16      	ldr	r2, [pc, #88]	; (80052e4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d004      	beq.n	8005298 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a11      	ldr	r2, [pc, #68]	; (80052d8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d10c      	bne.n	80052b2 <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800529e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	68ba      	ldr	r2, [r7, #8]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	68ba      	ldr	r2, [r7, #8]
 80052b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2201      	movs	r2, #1
 80052b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052c2:	2300      	movs	r3, #0
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3714      	adds	r7, #20
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr
 80052d0:	40012c00 	.word	0x40012c00
 80052d4:	40013400 	.word	0x40013400
 80052d8:	40015000 	.word	0x40015000
 80052dc:	40000400 	.word	0x40000400
 80052e0:	40000800 	.word	0x40000800
 80052e4:	40014000 	.word	0x40014000

080052e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052f0:	bf00      	nop
 80052f2:	370c      	adds	r7, #12
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005304:	bf00      	nop
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005318:	bf00      	nop
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005324:	b480      	push	{r7}
 8005326:	b083      	sub	sp, #12
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800532c:	bf00      	nop
 800532e:	370c      	adds	r7, #12
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005340:	bf00      	nop
 8005342:	370c      	adds	r7, #12
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005354:	bf00      	nop
 8005356:	370c      	adds	r7, #12
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr

08005360 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005368:	bf00      	nop
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b082      	sub	sp, #8
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d101      	bne.n	8005386 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e042      	b.n	800540c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800538c:	2b00      	cmp	r3, #0
 800538e:	d106      	bne.n	800539e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f7fc f97f 	bl	800169c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2224      	movs	r2, #36	; 0x24
 80053a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f022 0201 	bic.w	r2, r2, #1
 80053b4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d002      	beq.n	80053c4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 ff3e 	bl	8006240 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f000 fc3f 	bl	8005c48 <UART_SetConfig>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d101      	bne.n	80053d4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e01b      	b.n	800540c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	685a      	ldr	r2, [r3, #4]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80053e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	689a      	ldr	r2, [r3, #8]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80053f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f042 0201 	orr.w	r2, r2, #1
 8005402:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f000 ffbd 	bl	8006384 <UART_CheckIdleState>
 800540a:	4603      	mov	r3, r0
}
 800540c:	4618      	mov	r0, r3
 800540e:	3708      	adds	r7, #8
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b08a      	sub	sp, #40	; 0x28
 8005418:	af00      	add	r7, sp, #0
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	4613      	mov	r3, r2
 8005420:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005428:	2b20      	cmp	r3, #32
 800542a:	d167      	bne.n	80054fc <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d002      	beq.n	8005438 <HAL_UART_Transmit_DMA+0x24>
 8005432:	88fb      	ldrh	r3, [r7, #6]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d101      	bne.n	800543c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e060      	b.n	80054fe <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	68ba      	ldr	r2, [r7, #8]
 8005440:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	88fa      	ldrh	r2, [r7, #6]
 8005446:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	88fa      	ldrh	r2, [r7, #6]
 800544e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2200      	movs	r2, #0
 8005456:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2221      	movs	r2, #33	; 0x21
 800545e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005466:	2b00      	cmp	r3, #0
 8005468:	d028      	beq.n	80054bc <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800546e:	4a26      	ldr	r2, [pc, #152]	; (8005508 <HAL_UART_Transmit_DMA+0xf4>)
 8005470:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005476:	4a25      	ldr	r2, [pc, #148]	; (800550c <HAL_UART_Transmit_DMA+0xf8>)
 8005478:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800547e:	4a24      	ldr	r2, [pc, #144]	; (8005510 <HAL_UART_Transmit_DMA+0xfc>)
 8005480:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005486:	2200      	movs	r2, #0
 8005488:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005492:	4619      	mov	r1, r3
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	3328      	adds	r3, #40	; 0x28
 800549a:	461a      	mov	r2, r3
 800549c:	88fb      	ldrh	r3, [r7, #6]
 800549e:	f7fd ff91 	bl	80033c4 <HAL_DMA_Start_IT>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d009      	beq.n	80054bc <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2210      	movs	r2, #16
 80054ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2220      	movs	r2, #32
 80054b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e020      	b.n	80054fe <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	2240      	movs	r2, #64	; 0x40
 80054c2:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	3308      	adds	r3, #8
 80054ca:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	e853 3f00 	ldrex	r3, [r3]
 80054d2:	613b      	str	r3, [r7, #16]
   return(result);
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054da:	627b      	str	r3, [r7, #36]	; 0x24
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	3308      	adds	r3, #8
 80054e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054e4:	623a      	str	r2, [r7, #32]
 80054e6:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e8:	69f9      	ldr	r1, [r7, #28]
 80054ea:	6a3a      	ldr	r2, [r7, #32]
 80054ec:	e841 2300 	strex	r3, r2, [r1]
 80054f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d1e5      	bne.n	80054c4 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80054f8:	2300      	movs	r3, #0
 80054fa:	e000      	b.n	80054fe <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80054fc:	2302      	movs	r3, #2
  }
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3728      	adds	r7, #40	; 0x28
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	0800684f 	.word	0x0800684f
 800550c:	080068e9 	.word	0x080068e9
 8005510:	08006a6f 	.word	0x08006a6f

08005514 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b08a      	sub	sp, #40	; 0x28
 8005518:	af00      	add	r7, sp, #0
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	60b9      	str	r1, [r7, #8]
 800551e:	4613      	mov	r3, r2
 8005520:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005528:	2b20      	cmp	r3, #32
 800552a:	d137      	bne.n	800559c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d002      	beq.n	8005538 <HAL_UART_Receive_DMA+0x24>
 8005532:	88fb      	ldrh	r3, [r7, #6]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d101      	bne.n	800553c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	e030      	b.n	800559e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2200      	movs	r2, #0
 8005540:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a18      	ldr	r2, [pc, #96]	; (80055a8 <HAL_UART_Receive_DMA+0x94>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d01f      	beq.n	800558c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005556:	2b00      	cmp	r3, #0
 8005558:	d018      	beq.n	800558c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	e853 3f00 	ldrex	r3, [r3]
 8005566:	613b      	str	r3, [r7, #16]
   return(result);
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800556e:	627b      	str	r3, [r7, #36]	; 0x24
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	461a      	mov	r2, r3
 8005576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005578:	623b      	str	r3, [r7, #32]
 800557a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800557c:	69f9      	ldr	r1, [r7, #28]
 800557e:	6a3a      	ldr	r2, [r7, #32]
 8005580:	e841 2300 	strex	r3, r2, [r1]
 8005584:	61bb      	str	r3, [r7, #24]
   return(result);
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d1e6      	bne.n	800555a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800558c:	88fb      	ldrh	r3, [r7, #6]
 800558e:	461a      	mov	r2, r3
 8005590:	68b9      	ldr	r1, [r7, #8]
 8005592:	68f8      	ldr	r0, [r7, #12]
 8005594:	f001 f80e 	bl	80065b4 <UART_Start_Receive_DMA>
 8005598:	4603      	mov	r3, r0
 800559a:	e000      	b.n	800559e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800559c:	2302      	movs	r3, #2
  }
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3728      	adds	r7, #40	; 0x28
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	40008000 	.word	0x40008000

080055ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b0ba      	sub	sp, #232	; 0xe8
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	69db      	ldr	r3, [r3, #28]
 80055ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80055d2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80055d6:	f640 030f 	movw	r3, #2063	; 0x80f
 80055da:	4013      	ands	r3, r2
 80055dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80055e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d11b      	bne.n	8005620 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80055e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055ec:	f003 0320 	and.w	r3, r3, #32
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d015      	beq.n	8005620 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80055f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055f8:	f003 0320 	and.w	r3, r3, #32
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d105      	bne.n	800560c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005600:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005608:	2b00      	cmp	r3, #0
 800560a:	d009      	beq.n	8005620 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005610:	2b00      	cmp	r3, #0
 8005612:	f000 82e3 	beq.w	8005bdc <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	4798      	blx	r3
      }
      return;
 800561e:	e2dd      	b.n	8005bdc <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005620:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005624:	2b00      	cmp	r3, #0
 8005626:	f000 8123 	beq.w	8005870 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800562a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800562e:	4b8d      	ldr	r3, [pc, #564]	; (8005864 <HAL_UART_IRQHandler+0x2b8>)
 8005630:	4013      	ands	r3, r2
 8005632:	2b00      	cmp	r3, #0
 8005634:	d106      	bne.n	8005644 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005636:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800563a:	4b8b      	ldr	r3, [pc, #556]	; (8005868 <HAL_UART_IRQHandler+0x2bc>)
 800563c:	4013      	ands	r3, r2
 800563e:	2b00      	cmp	r3, #0
 8005640:	f000 8116 	beq.w	8005870 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005648:	f003 0301 	and.w	r3, r3, #1
 800564c:	2b00      	cmp	r3, #0
 800564e:	d011      	beq.n	8005674 <HAL_UART_IRQHandler+0xc8>
 8005650:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005658:	2b00      	cmp	r3, #0
 800565a:	d00b      	beq.n	8005674 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	2201      	movs	r2, #1
 8005662:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800566a:	f043 0201 	orr.w	r2, r3, #1
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005674:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005678:	f003 0302 	and.w	r3, r3, #2
 800567c:	2b00      	cmp	r3, #0
 800567e:	d011      	beq.n	80056a4 <HAL_UART_IRQHandler+0xf8>
 8005680:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005684:	f003 0301 	and.w	r3, r3, #1
 8005688:	2b00      	cmp	r3, #0
 800568a:	d00b      	beq.n	80056a4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2202      	movs	r2, #2
 8005692:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800569a:	f043 0204 	orr.w	r2, r3, #4
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80056a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056a8:	f003 0304 	and.w	r3, r3, #4
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d011      	beq.n	80056d4 <HAL_UART_IRQHandler+0x128>
 80056b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056b4:	f003 0301 	and.w	r3, r3, #1
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d00b      	beq.n	80056d4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2204      	movs	r2, #4
 80056c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ca:	f043 0202 	orr.w	r2, r3, #2
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80056d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056d8:	f003 0308 	and.w	r3, r3, #8
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d017      	beq.n	8005710 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80056e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056e4:	f003 0320 	and.w	r3, r3, #32
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d105      	bne.n	80056f8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80056ec:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80056f0:	4b5c      	ldr	r3, [pc, #368]	; (8005864 <HAL_UART_IRQHandler+0x2b8>)
 80056f2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d00b      	beq.n	8005710 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	2208      	movs	r2, #8
 80056fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005706:	f043 0208 	orr.w	r2, r3, #8
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005710:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005714:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005718:	2b00      	cmp	r3, #0
 800571a:	d012      	beq.n	8005742 <HAL_UART_IRQHandler+0x196>
 800571c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005720:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005724:	2b00      	cmp	r3, #0
 8005726:	d00c      	beq.n	8005742 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005730:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005738:	f043 0220 	orr.w	r2, r3, #32
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005748:	2b00      	cmp	r3, #0
 800574a:	f000 8249 	beq.w	8005be0 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800574e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005752:	f003 0320 	and.w	r3, r3, #32
 8005756:	2b00      	cmp	r3, #0
 8005758:	d013      	beq.n	8005782 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800575a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800575e:	f003 0320 	and.w	r3, r3, #32
 8005762:	2b00      	cmp	r3, #0
 8005764:	d105      	bne.n	8005772 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005766:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800576a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800576e:	2b00      	cmp	r3, #0
 8005770:	d007      	beq.n	8005782 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005776:	2b00      	cmp	r3, #0
 8005778:	d003      	beq.n	8005782 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005788:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005796:	2b40      	cmp	r3, #64	; 0x40
 8005798:	d005      	beq.n	80057a6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800579a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800579e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d054      	beq.n	8005850 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 ffeb 	bl	8006782 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057b6:	2b40      	cmp	r3, #64	; 0x40
 80057b8:	d146      	bne.n	8005848 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	3308      	adds	r3, #8
 80057c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80057c8:	e853 3f00 	ldrex	r3, [r3]
 80057cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80057d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80057d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	3308      	adds	r3, #8
 80057e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80057e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80057ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80057f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80057f6:	e841 2300 	strex	r3, r2, [r1]
 80057fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80057fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d1d9      	bne.n	80057ba <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800580c:	2b00      	cmp	r3, #0
 800580e:	d017      	beq.n	8005840 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005816:	4a15      	ldr	r2, [pc, #84]	; (800586c <HAL_UART_IRQHandler+0x2c0>)
 8005818:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005820:	4618      	mov	r0, r3
 8005822:	f7fd fea3 	bl	800356c <HAL_DMA_Abort_IT>
 8005826:	4603      	mov	r3, r0
 8005828:	2b00      	cmp	r3, #0
 800582a:	d019      	beq.n	8005860 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800583a:	4610      	mov	r0, r2
 800583c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800583e:	e00f      	b.n	8005860 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f000 f9eb 	bl	8005c1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005846:	e00b      	b.n	8005860 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f000 f9e7 	bl	8005c1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800584e:	e007      	b.n	8005860 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f000 f9e3 	bl	8005c1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800585e:	e1bf      	b.n	8005be0 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005860:	bf00      	nop
    return;
 8005862:	e1bd      	b.n	8005be0 <HAL_UART_IRQHandler+0x634>
 8005864:	10000001 	.word	0x10000001
 8005868:	04000120 	.word	0x04000120
 800586c:	08006aef 	.word	0x08006aef

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005874:	2b01      	cmp	r3, #1
 8005876:	f040 8153 	bne.w	8005b20 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800587a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800587e:	f003 0310 	and.w	r3, r3, #16
 8005882:	2b00      	cmp	r3, #0
 8005884:	f000 814c 	beq.w	8005b20 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005888:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800588c:	f003 0310 	and.w	r3, r3, #16
 8005890:	2b00      	cmp	r3, #0
 8005892:	f000 8145 	beq.w	8005b20 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	2210      	movs	r2, #16
 800589c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058a8:	2b40      	cmp	r3, #64	; 0x40
 80058aa:	f040 80bb 	bne.w	8005a24 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80058bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	f000 818f 	beq.w	8005be4 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80058cc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80058d0:	429a      	cmp	r2, r3
 80058d2:	f080 8187 	bcs.w	8005be4 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80058dc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 0320 	and.w	r3, r3, #32
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	f040 8087 	bne.w	8005a02 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005900:	e853 3f00 	ldrex	r3, [r3]
 8005904:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005908:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800590c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005910:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	461a      	mov	r2, r3
 800591a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800591e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005922:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005926:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800592a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800592e:	e841 2300 	strex	r3, r2, [r1]
 8005932:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005936:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800593a:	2b00      	cmp	r3, #0
 800593c:	d1da      	bne.n	80058f4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	3308      	adds	r3, #8
 8005944:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005946:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005948:	e853 3f00 	ldrex	r3, [r3]
 800594c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800594e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005950:	f023 0301 	bic.w	r3, r3, #1
 8005954:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	3308      	adds	r3, #8
 800595e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005962:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005966:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005968:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800596a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800596e:	e841 2300 	strex	r3, r2, [r1]
 8005972:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005974:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005976:	2b00      	cmp	r3, #0
 8005978:	d1e1      	bne.n	800593e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	3308      	adds	r3, #8
 8005980:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005982:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005984:	e853 3f00 	ldrex	r3, [r3]
 8005988:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800598a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800598c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005990:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	3308      	adds	r3, #8
 800599a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800599e:	66fa      	str	r2, [r7, #108]	; 0x6c
 80059a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80059a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80059a6:	e841 2300 	strex	r3, r2, [r1]
 80059aa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80059ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d1e3      	bne.n	800597a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2220      	movs	r2, #32
 80059b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059c8:	e853 3f00 	ldrex	r3, [r3]
 80059cc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80059ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059d0:	f023 0310 	bic.w	r3, r3, #16
 80059d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	461a      	mov	r2, r3
 80059de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80059e2:	65bb      	str	r3, [r7, #88]	; 0x58
 80059e4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80059e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80059ea:	e841 2300 	strex	r3, r2, [r1]
 80059ee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80059f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d1e4      	bne.n	80059c0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059fc:	4618      	mov	r0, r3
 80059fe:	f7fd fd5c 	bl	80034ba <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2202      	movs	r2, #2
 8005a06:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	1ad3      	subs	r3, r2, r3
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f000 f907 	bl	8005c30 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005a22:	e0df      	b.n	8005be4 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	f000 80d1 	beq.w	8005be8 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8005a46:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	f000 80cc 	beq.w	8005be8 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a58:	e853 3f00 	ldrex	r3, [r3]
 8005a5c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005a72:	647b      	str	r3, [r7, #68]	; 0x44
 8005a74:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a76:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a7a:	e841 2300 	strex	r3, r2, [r1]
 8005a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d1e4      	bne.n	8005a50 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	3308      	adds	r3, #8
 8005a8c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a90:	e853 3f00 	ldrex	r3, [r3]
 8005a94:	623b      	str	r3, [r7, #32]
   return(result);
 8005a96:	6a3b      	ldr	r3, [r7, #32]
 8005a98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a9c:	f023 0301 	bic.w	r3, r3, #1
 8005aa0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	3308      	adds	r3, #8
 8005aaa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005aae:	633a      	str	r2, [r7, #48]	; 0x30
 8005ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ab4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ab6:	e841 2300 	strex	r3, r2, [r1]
 8005aba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d1e1      	bne.n	8005a86 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2220      	movs	r2, #32
 8005ac6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	e853 3f00 	ldrex	r3, [r3]
 8005ae2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f023 0310 	bic.w	r3, r3, #16
 8005aea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	461a      	mov	r2, r3
 8005af4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005af8:	61fb      	str	r3, [r7, #28]
 8005afa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005afc:	69b9      	ldr	r1, [r7, #24]
 8005afe:	69fa      	ldr	r2, [r7, #28]
 8005b00:	e841 2300 	strex	r3, r2, [r1]
 8005b04:	617b      	str	r3, [r7, #20]
   return(result);
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d1e4      	bne.n	8005ad6 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2202      	movs	r2, #2
 8005b10:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b12:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005b16:	4619      	mov	r1, r3
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f000 f889 	bl	8005c30 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005b1e:	e063      	b.n	8005be8 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005b20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d00e      	beq.n	8005b4a <HAL_UART_IRQHandler+0x59e>
 8005b2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d008      	beq.n	8005b4a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005b40:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f001 f814 	bl	8006b70 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005b48:	e051      	b.n	8005bee <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d014      	beq.n	8005b80 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005b56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d105      	bne.n	8005b6e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005b62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d008      	beq.n	8005b80 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d03a      	beq.n	8005bec <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	4798      	blx	r3
    }
    return;
 8005b7e:	e035      	b.n	8005bec <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005b80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d009      	beq.n	8005ba0 <HAL_UART_IRQHandler+0x5f4>
 8005b8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d003      	beq.n	8005ba0 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f000 ffbe 	bl	8006b1a <UART_EndTransmit_IT>
    return;
 8005b9e:	e026      	b.n	8005bee <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005ba0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ba4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d009      	beq.n	8005bc0 <HAL_UART_IRQHandler+0x614>
 8005bac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bb0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d003      	beq.n	8005bc0 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f000 ffed 	bl	8006b98 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005bbe:	e016      	b.n	8005bee <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005bc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d010      	beq.n	8005bee <HAL_UART_IRQHandler+0x642>
 8005bcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	da0c      	bge.n	8005bee <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f000 ffd5 	bl	8006b84 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005bda:	e008      	b.n	8005bee <HAL_UART_IRQHandler+0x642>
      return;
 8005bdc:	bf00      	nop
 8005bde:	e006      	b.n	8005bee <HAL_UART_IRQHandler+0x642>
    return;
 8005be0:	bf00      	nop
 8005be2:	e004      	b.n	8005bee <HAL_UART_IRQHandler+0x642>
      return;
 8005be4:	bf00      	nop
 8005be6:	e002      	b.n	8005bee <HAL_UART_IRQHandler+0x642>
      return;
 8005be8:	bf00      	nop
 8005bea:	e000      	b.n	8005bee <HAL_UART_IRQHandler+0x642>
    return;
 8005bec:	bf00      	nop
  }
}
 8005bee:	37e8      	adds	r7, #232	; 0xe8
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005bfc:	bf00      	nop
 8005bfe:	370c      	adds	r7, #12
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b083      	sub	sp, #12
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005c10:	bf00      	nop
 8005c12:	370c      	adds	r7, #12
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr

08005c1c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005c24:	bf00      	nop
 8005c26:	370c      	adds	r7, #12
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr

08005c30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	460b      	mov	r3, r1
 8005c3a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c3c:	bf00      	nop
 8005c3e:	370c      	adds	r7, #12
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c4c:	b08c      	sub	sp, #48	; 0x30
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c52:	2300      	movs	r3, #0
 8005c54:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	689a      	ldr	r2, [r3, #8]
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	691b      	ldr	r3, [r3, #16]
 8005c60:	431a      	orrs	r2, r3
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	695b      	ldr	r3, [r3, #20]
 8005c66:	431a      	orrs	r2, r3
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	69db      	ldr	r3, [r3, #28]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	4baa      	ldr	r3, [pc, #680]	; (8005f20 <UART_SetConfig+0x2d8>)
 8005c78:	4013      	ands	r3, r2
 8005c7a:	697a      	ldr	r2, [r7, #20]
 8005c7c:	6812      	ldr	r2, [r2, #0]
 8005c7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c80:	430b      	orrs	r3, r1
 8005c82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	68da      	ldr	r2, [r3, #12]
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	430a      	orrs	r2, r1
 8005c98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	699b      	ldr	r3, [r3, #24]
 8005c9e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a9f      	ldr	r2, [pc, #636]	; (8005f24 <UART_SetConfig+0x2dc>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d004      	beq.n	8005cb4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	6a1b      	ldr	r3, [r3, #32]
 8005cae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005cbe:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005cc2:	697a      	ldr	r2, [r7, #20]
 8005cc4:	6812      	ldr	r2, [r2, #0]
 8005cc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005cc8:	430b      	orrs	r3, r1
 8005cca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd2:	f023 010f 	bic.w	r1, r3, #15
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	430a      	orrs	r2, r1
 8005ce0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a90      	ldr	r2, [pc, #576]	; (8005f28 <UART_SetConfig+0x2e0>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d125      	bne.n	8005d38 <UART_SetConfig+0xf0>
 8005cec:	4b8f      	ldr	r3, [pc, #572]	; (8005f2c <UART_SetConfig+0x2e4>)
 8005cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cf2:	f003 0303 	and.w	r3, r3, #3
 8005cf6:	2b03      	cmp	r3, #3
 8005cf8:	d81a      	bhi.n	8005d30 <UART_SetConfig+0xe8>
 8005cfa:	a201      	add	r2, pc, #4	; (adr r2, 8005d00 <UART_SetConfig+0xb8>)
 8005cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d00:	08005d11 	.word	0x08005d11
 8005d04:	08005d21 	.word	0x08005d21
 8005d08:	08005d19 	.word	0x08005d19
 8005d0c:	08005d29 	.word	0x08005d29
 8005d10:	2301      	movs	r3, #1
 8005d12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d16:	e116      	b.n	8005f46 <UART_SetConfig+0x2fe>
 8005d18:	2302      	movs	r3, #2
 8005d1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d1e:	e112      	b.n	8005f46 <UART_SetConfig+0x2fe>
 8005d20:	2304      	movs	r3, #4
 8005d22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d26:	e10e      	b.n	8005f46 <UART_SetConfig+0x2fe>
 8005d28:	2308      	movs	r3, #8
 8005d2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d2e:	e10a      	b.n	8005f46 <UART_SetConfig+0x2fe>
 8005d30:	2310      	movs	r3, #16
 8005d32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d36:	e106      	b.n	8005f46 <UART_SetConfig+0x2fe>
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a7c      	ldr	r2, [pc, #496]	; (8005f30 <UART_SetConfig+0x2e8>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d138      	bne.n	8005db4 <UART_SetConfig+0x16c>
 8005d42:	4b7a      	ldr	r3, [pc, #488]	; (8005f2c <UART_SetConfig+0x2e4>)
 8005d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d48:	f003 030c 	and.w	r3, r3, #12
 8005d4c:	2b0c      	cmp	r3, #12
 8005d4e:	d82d      	bhi.n	8005dac <UART_SetConfig+0x164>
 8005d50:	a201      	add	r2, pc, #4	; (adr r2, 8005d58 <UART_SetConfig+0x110>)
 8005d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d56:	bf00      	nop
 8005d58:	08005d8d 	.word	0x08005d8d
 8005d5c:	08005dad 	.word	0x08005dad
 8005d60:	08005dad 	.word	0x08005dad
 8005d64:	08005dad 	.word	0x08005dad
 8005d68:	08005d9d 	.word	0x08005d9d
 8005d6c:	08005dad 	.word	0x08005dad
 8005d70:	08005dad 	.word	0x08005dad
 8005d74:	08005dad 	.word	0x08005dad
 8005d78:	08005d95 	.word	0x08005d95
 8005d7c:	08005dad 	.word	0x08005dad
 8005d80:	08005dad 	.word	0x08005dad
 8005d84:	08005dad 	.word	0x08005dad
 8005d88:	08005da5 	.word	0x08005da5
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d92:	e0d8      	b.n	8005f46 <UART_SetConfig+0x2fe>
 8005d94:	2302      	movs	r3, #2
 8005d96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d9a:	e0d4      	b.n	8005f46 <UART_SetConfig+0x2fe>
 8005d9c:	2304      	movs	r3, #4
 8005d9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005da2:	e0d0      	b.n	8005f46 <UART_SetConfig+0x2fe>
 8005da4:	2308      	movs	r3, #8
 8005da6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005daa:	e0cc      	b.n	8005f46 <UART_SetConfig+0x2fe>
 8005dac:	2310      	movs	r3, #16
 8005dae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005db2:	e0c8      	b.n	8005f46 <UART_SetConfig+0x2fe>
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a5e      	ldr	r2, [pc, #376]	; (8005f34 <UART_SetConfig+0x2ec>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d125      	bne.n	8005e0a <UART_SetConfig+0x1c2>
 8005dbe:	4b5b      	ldr	r3, [pc, #364]	; (8005f2c <UART_SetConfig+0x2e4>)
 8005dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dc4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005dc8:	2b30      	cmp	r3, #48	; 0x30
 8005dca:	d016      	beq.n	8005dfa <UART_SetConfig+0x1b2>
 8005dcc:	2b30      	cmp	r3, #48	; 0x30
 8005dce:	d818      	bhi.n	8005e02 <UART_SetConfig+0x1ba>
 8005dd0:	2b20      	cmp	r3, #32
 8005dd2:	d00a      	beq.n	8005dea <UART_SetConfig+0x1a2>
 8005dd4:	2b20      	cmp	r3, #32
 8005dd6:	d814      	bhi.n	8005e02 <UART_SetConfig+0x1ba>
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d002      	beq.n	8005de2 <UART_SetConfig+0x19a>
 8005ddc:	2b10      	cmp	r3, #16
 8005dde:	d008      	beq.n	8005df2 <UART_SetConfig+0x1aa>
 8005de0:	e00f      	b.n	8005e02 <UART_SetConfig+0x1ba>
 8005de2:	2300      	movs	r3, #0
 8005de4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005de8:	e0ad      	b.n	8005f46 <UART_SetConfig+0x2fe>
 8005dea:	2302      	movs	r3, #2
 8005dec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005df0:	e0a9      	b.n	8005f46 <UART_SetConfig+0x2fe>
 8005df2:	2304      	movs	r3, #4
 8005df4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005df8:	e0a5      	b.n	8005f46 <UART_SetConfig+0x2fe>
 8005dfa:	2308      	movs	r3, #8
 8005dfc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e00:	e0a1      	b.n	8005f46 <UART_SetConfig+0x2fe>
 8005e02:	2310      	movs	r3, #16
 8005e04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e08:	e09d      	b.n	8005f46 <UART_SetConfig+0x2fe>
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a4a      	ldr	r2, [pc, #296]	; (8005f38 <UART_SetConfig+0x2f0>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d125      	bne.n	8005e60 <UART_SetConfig+0x218>
 8005e14:	4b45      	ldr	r3, [pc, #276]	; (8005f2c <UART_SetConfig+0x2e4>)
 8005e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e1a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005e1e:	2bc0      	cmp	r3, #192	; 0xc0
 8005e20:	d016      	beq.n	8005e50 <UART_SetConfig+0x208>
 8005e22:	2bc0      	cmp	r3, #192	; 0xc0
 8005e24:	d818      	bhi.n	8005e58 <UART_SetConfig+0x210>
 8005e26:	2b80      	cmp	r3, #128	; 0x80
 8005e28:	d00a      	beq.n	8005e40 <UART_SetConfig+0x1f8>
 8005e2a:	2b80      	cmp	r3, #128	; 0x80
 8005e2c:	d814      	bhi.n	8005e58 <UART_SetConfig+0x210>
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d002      	beq.n	8005e38 <UART_SetConfig+0x1f0>
 8005e32:	2b40      	cmp	r3, #64	; 0x40
 8005e34:	d008      	beq.n	8005e48 <UART_SetConfig+0x200>
 8005e36:	e00f      	b.n	8005e58 <UART_SetConfig+0x210>
 8005e38:	2300      	movs	r3, #0
 8005e3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e3e:	e082      	b.n	8005f46 <UART_SetConfig+0x2fe>
 8005e40:	2302      	movs	r3, #2
 8005e42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e46:	e07e      	b.n	8005f46 <UART_SetConfig+0x2fe>
 8005e48:	2304      	movs	r3, #4
 8005e4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e4e:	e07a      	b.n	8005f46 <UART_SetConfig+0x2fe>
 8005e50:	2308      	movs	r3, #8
 8005e52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e56:	e076      	b.n	8005f46 <UART_SetConfig+0x2fe>
 8005e58:	2310      	movs	r3, #16
 8005e5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e5e:	e072      	b.n	8005f46 <UART_SetConfig+0x2fe>
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a35      	ldr	r2, [pc, #212]	; (8005f3c <UART_SetConfig+0x2f4>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d12a      	bne.n	8005ec0 <UART_SetConfig+0x278>
 8005e6a:	4b30      	ldr	r3, [pc, #192]	; (8005f2c <UART_SetConfig+0x2e4>)
 8005e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e78:	d01a      	beq.n	8005eb0 <UART_SetConfig+0x268>
 8005e7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e7e:	d81b      	bhi.n	8005eb8 <UART_SetConfig+0x270>
 8005e80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e84:	d00c      	beq.n	8005ea0 <UART_SetConfig+0x258>
 8005e86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e8a:	d815      	bhi.n	8005eb8 <UART_SetConfig+0x270>
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d003      	beq.n	8005e98 <UART_SetConfig+0x250>
 8005e90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e94:	d008      	beq.n	8005ea8 <UART_SetConfig+0x260>
 8005e96:	e00f      	b.n	8005eb8 <UART_SetConfig+0x270>
 8005e98:	2300      	movs	r3, #0
 8005e9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e9e:	e052      	b.n	8005f46 <UART_SetConfig+0x2fe>
 8005ea0:	2302      	movs	r3, #2
 8005ea2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ea6:	e04e      	b.n	8005f46 <UART_SetConfig+0x2fe>
 8005ea8:	2304      	movs	r3, #4
 8005eaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005eae:	e04a      	b.n	8005f46 <UART_SetConfig+0x2fe>
 8005eb0:	2308      	movs	r3, #8
 8005eb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005eb6:	e046      	b.n	8005f46 <UART_SetConfig+0x2fe>
 8005eb8:	2310      	movs	r3, #16
 8005eba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ebe:	e042      	b.n	8005f46 <UART_SetConfig+0x2fe>
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a17      	ldr	r2, [pc, #92]	; (8005f24 <UART_SetConfig+0x2dc>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d13a      	bne.n	8005f40 <UART_SetConfig+0x2f8>
 8005eca:	4b18      	ldr	r3, [pc, #96]	; (8005f2c <UART_SetConfig+0x2e4>)
 8005ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ed0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005ed4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ed8:	d01a      	beq.n	8005f10 <UART_SetConfig+0x2c8>
 8005eda:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ede:	d81b      	bhi.n	8005f18 <UART_SetConfig+0x2d0>
 8005ee0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ee4:	d00c      	beq.n	8005f00 <UART_SetConfig+0x2b8>
 8005ee6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005eea:	d815      	bhi.n	8005f18 <UART_SetConfig+0x2d0>
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d003      	beq.n	8005ef8 <UART_SetConfig+0x2b0>
 8005ef0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ef4:	d008      	beq.n	8005f08 <UART_SetConfig+0x2c0>
 8005ef6:	e00f      	b.n	8005f18 <UART_SetConfig+0x2d0>
 8005ef8:	2300      	movs	r3, #0
 8005efa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005efe:	e022      	b.n	8005f46 <UART_SetConfig+0x2fe>
 8005f00:	2302      	movs	r3, #2
 8005f02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f06:	e01e      	b.n	8005f46 <UART_SetConfig+0x2fe>
 8005f08:	2304      	movs	r3, #4
 8005f0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f0e:	e01a      	b.n	8005f46 <UART_SetConfig+0x2fe>
 8005f10:	2308      	movs	r3, #8
 8005f12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f16:	e016      	b.n	8005f46 <UART_SetConfig+0x2fe>
 8005f18:	2310      	movs	r3, #16
 8005f1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f1e:	e012      	b.n	8005f46 <UART_SetConfig+0x2fe>
 8005f20:	cfff69f3 	.word	0xcfff69f3
 8005f24:	40008000 	.word	0x40008000
 8005f28:	40013800 	.word	0x40013800
 8005f2c:	40021000 	.word	0x40021000
 8005f30:	40004400 	.word	0x40004400
 8005f34:	40004800 	.word	0x40004800
 8005f38:	40004c00 	.word	0x40004c00
 8005f3c:	40005000 	.word	0x40005000
 8005f40:	2310      	movs	r3, #16
 8005f42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4aae      	ldr	r2, [pc, #696]	; (8006204 <UART_SetConfig+0x5bc>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	f040 8097 	bne.w	8006080 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005f52:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005f56:	2b08      	cmp	r3, #8
 8005f58:	d823      	bhi.n	8005fa2 <UART_SetConfig+0x35a>
 8005f5a:	a201      	add	r2, pc, #4	; (adr r2, 8005f60 <UART_SetConfig+0x318>)
 8005f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f60:	08005f85 	.word	0x08005f85
 8005f64:	08005fa3 	.word	0x08005fa3
 8005f68:	08005f8d 	.word	0x08005f8d
 8005f6c:	08005fa3 	.word	0x08005fa3
 8005f70:	08005f93 	.word	0x08005f93
 8005f74:	08005fa3 	.word	0x08005fa3
 8005f78:	08005fa3 	.word	0x08005fa3
 8005f7c:	08005fa3 	.word	0x08005fa3
 8005f80:	08005f9b 	.word	0x08005f9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f84:	f7fe fb8a 	bl	800469c <HAL_RCC_GetPCLK1Freq>
 8005f88:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005f8a:	e010      	b.n	8005fae <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f8c:	4b9e      	ldr	r3, [pc, #632]	; (8006208 <UART_SetConfig+0x5c0>)
 8005f8e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005f90:	e00d      	b.n	8005fae <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f92:	f7fe fb15 	bl	80045c0 <HAL_RCC_GetSysClockFreq>
 8005f96:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005f98:	e009      	b.n	8005fae <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f9e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005fa0:	e005      	b.n	8005fae <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005fac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	f000 8130 	beq.w	8006216 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fba:	4a94      	ldr	r2, [pc, #592]	; (800620c <UART_SetConfig+0x5c4>)
 8005fbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc4:	fbb3 f3f2 	udiv	r3, r3, r2
 8005fc8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	685a      	ldr	r2, [r3, #4]
 8005fce:	4613      	mov	r3, r2
 8005fd0:	005b      	lsls	r3, r3, #1
 8005fd2:	4413      	add	r3, r2
 8005fd4:	69ba      	ldr	r2, [r7, #24]
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d305      	bcc.n	8005fe6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005fe0:	69ba      	ldr	r2, [r7, #24]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d903      	bls.n	8005fee <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005fec:	e113      	b.n	8006216 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	60bb      	str	r3, [r7, #8]
 8005ff4:	60fa      	str	r2, [r7, #12]
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffa:	4a84      	ldr	r2, [pc, #528]	; (800620c <UART_SetConfig+0x5c4>)
 8005ffc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006000:	b29b      	uxth	r3, r3
 8006002:	2200      	movs	r2, #0
 8006004:	603b      	str	r3, [r7, #0]
 8006006:	607a      	str	r2, [r7, #4]
 8006008:	e9d7 2300 	ldrd	r2, r3, [r7]
 800600c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006010:	f7fa fc38 	bl	8000884 <__aeabi_uldivmod>
 8006014:	4602      	mov	r2, r0
 8006016:	460b      	mov	r3, r1
 8006018:	4610      	mov	r0, r2
 800601a:	4619      	mov	r1, r3
 800601c:	f04f 0200 	mov.w	r2, #0
 8006020:	f04f 0300 	mov.w	r3, #0
 8006024:	020b      	lsls	r3, r1, #8
 8006026:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800602a:	0202      	lsls	r2, r0, #8
 800602c:	6979      	ldr	r1, [r7, #20]
 800602e:	6849      	ldr	r1, [r1, #4]
 8006030:	0849      	lsrs	r1, r1, #1
 8006032:	2000      	movs	r0, #0
 8006034:	460c      	mov	r4, r1
 8006036:	4605      	mov	r5, r0
 8006038:	eb12 0804 	adds.w	r8, r2, r4
 800603c:	eb43 0905 	adc.w	r9, r3, r5
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	469a      	mov	sl, r3
 8006048:	4693      	mov	fp, r2
 800604a:	4652      	mov	r2, sl
 800604c:	465b      	mov	r3, fp
 800604e:	4640      	mov	r0, r8
 8006050:	4649      	mov	r1, r9
 8006052:	f7fa fc17 	bl	8000884 <__aeabi_uldivmod>
 8006056:	4602      	mov	r2, r0
 8006058:	460b      	mov	r3, r1
 800605a:	4613      	mov	r3, r2
 800605c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800605e:	6a3b      	ldr	r3, [r7, #32]
 8006060:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006064:	d308      	bcc.n	8006078 <UART_SetConfig+0x430>
 8006066:	6a3b      	ldr	r3, [r7, #32]
 8006068:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800606c:	d204      	bcs.n	8006078 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	6a3a      	ldr	r2, [r7, #32]
 8006074:	60da      	str	r2, [r3, #12]
 8006076:	e0ce      	b.n	8006216 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800607e:	e0ca      	b.n	8006216 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	69db      	ldr	r3, [r3, #28]
 8006084:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006088:	d166      	bne.n	8006158 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800608a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800608e:	2b08      	cmp	r3, #8
 8006090:	d827      	bhi.n	80060e2 <UART_SetConfig+0x49a>
 8006092:	a201      	add	r2, pc, #4	; (adr r2, 8006098 <UART_SetConfig+0x450>)
 8006094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006098:	080060bd 	.word	0x080060bd
 800609c:	080060c5 	.word	0x080060c5
 80060a0:	080060cd 	.word	0x080060cd
 80060a4:	080060e3 	.word	0x080060e3
 80060a8:	080060d3 	.word	0x080060d3
 80060ac:	080060e3 	.word	0x080060e3
 80060b0:	080060e3 	.word	0x080060e3
 80060b4:	080060e3 	.word	0x080060e3
 80060b8:	080060db 	.word	0x080060db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060bc:	f7fe faee 	bl	800469c <HAL_RCC_GetPCLK1Freq>
 80060c0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80060c2:	e014      	b.n	80060ee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060c4:	f7fe fb00 	bl	80046c8 <HAL_RCC_GetPCLK2Freq>
 80060c8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80060ca:	e010      	b.n	80060ee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060cc:	4b4e      	ldr	r3, [pc, #312]	; (8006208 <UART_SetConfig+0x5c0>)
 80060ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80060d0:	e00d      	b.n	80060ee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060d2:	f7fe fa75 	bl	80045c0 <HAL_RCC_GetSysClockFreq>
 80060d6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80060d8:	e009      	b.n	80060ee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80060e0:	e005      	b.n	80060ee <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80060e2:	2300      	movs	r3, #0
 80060e4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80060ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80060ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	f000 8090 	beq.w	8006216 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fa:	4a44      	ldr	r2, [pc, #272]	; (800620c <UART_SetConfig+0x5c4>)
 80060fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006100:	461a      	mov	r2, r3
 8006102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006104:	fbb3 f3f2 	udiv	r3, r3, r2
 8006108:	005a      	lsls	r2, r3, #1
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	085b      	lsrs	r3, r3, #1
 8006110:	441a      	add	r2, r3
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	fbb2 f3f3 	udiv	r3, r2, r3
 800611a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800611c:	6a3b      	ldr	r3, [r7, #32]
 800611e:	2b0f      	cmp	r3, #15
 8006120:	d916      	bls.n	8006150 <UART_SetConfig+0x508>
 8006122:	6a3b      	ldr	r3, [r7, #32]
 8006124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006128:	d212      	bcs.n	8006150 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800612a:	6a3b      	ldr	r3, [r7, #32]
 800612c:	b29b      	uxth	r3, r3
 800612e:	f023 030f 	bic.w	r3, r3, #15
 8006132:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006134:	6a3b      	ldr	r3, [r7, #32]
 8006136:	085b      	lsrs	r3, r3, #1
 8006138:	b29b      	uxth	r3, r3
 800613a:	f003 0307 	and.w	r3, r3, #7
 800613e:	b29a      	uxth	r2, r3
 8006140:	8bfb      	ldrh	r3, [r7, #30]
 8006142:	4313      	orrs	r3, r2
 8006144:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	8bfa      	ldrh	r2, [r7, #30]
 800614c:	60da      	str	r2, [r3, #12]
 800614e:	e062      	b.n	8006216 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006156:	e05e      	b.n	8006216 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006158:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800615c:	2b08      	cmp	r3, #8
 800615e:	d828      	bhi.n	80061b2 <UART_SetConfig+0x56a>
 8006160:	a201      	add	r2, pc, #4	; (adr r2, 8006168 <UART_SetConfig+0x520>)
 8006162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006166:	bf00      	nop
 8006168:	0800618d 	.word	0x0800618d
 800616c:	08006195 	.word	0x08006195
 8006170:	0800619d 	.word	0x0800619d
 8006174:	080061b3 	.word	0x080061b3
 8006178:	080061a3 	.word	0x080061a3
 800617c:	080061b3 	.word	0x080061b3
 8006180:	080061b3 	.word	0x080061b3
 8006184:	080061b3 	.word	0x080061b3
 8006188:	080061ab 	.word	0x080061ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800618c:	f7fe fa86 	bl	800469c <HAL_RCC_GetPCLK1Freq>
 8006190:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006192:	e014      	b.n	80061be <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006194:	f7fe fa98 	bl	80046c8 <HAL_RCC_GetPCLK2Freq>
 8006198:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800619a:	e010      	b.n	80061be <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800619c:	4b1a      	ldr	r3, [pc, #104]	; (8006208 <UART_SetConfig+0x5c0>)
 800619e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80061a0:	e00d      	b.n	80061be <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061a2:	f7fe fa0d 	bl	80045c0 <HAL_RCC_GetSysClockFreq>
 80061a6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80061a8:	e009      	b.n	80061be <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80061b0:	e005      	b.n	80061be <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80061b2:	2300      	movs	r3, #0
 80061b4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80061bc:	bf00      	nop
    }

    if (pclk != 0U)
 80061be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d028      	beq.n	8006216 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c8:	4a10      	ldr	r2, [pc, #64]	; (800620c <UART_SetConfig+0x5c4>)
 80061ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061ce:	461a      	mov	r2, r3
 80061d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d2:	fbb3 f2f2 	udiv	r2, r3, r2
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	085b      	lsrs	r3, r3, #1
 80061dc:	441a      	add	r2, r3
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80061e6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061e8:	6a3b      	ldr	r3, [r7, #32]
 80061ea:	2b0f      	cmp	r3, #15
 80061ec:	d910      	bls.n	8006210 <UART_SetConfig+0x5c8>
 80061ee:	6a3b      	ldr	r3, [r7, #32]
 80061f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061f4:	d20c      	bcs.n	8006210 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80061f6:	6a3b      	ldr	r3, [r7, #32]
 80061f8:	b29a      	uxth	r2, r3
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	60da      	str	r2, [r3, #12]
 8006200:	e009      	b.n	8006216 <UART_SetConfig+0x5ce>
 8006202:	bf00      	nop
 8006204:	40008000 	.word	0x40008000
 8006208:	00f42400 	.word	0x00f42400
 800620c:	08006e3c 	.word	0x08006e3c
      }
      else
      {
        ret = HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	2201      	movs	r2, #1
 800621a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	2201      	movs	r2, #1
 8006222:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	2200      	movs	r2, #0
 800622a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	2200      	movs	r2, #0
 8006230:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006232:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006236:	4618      	mov	r0, r3
 8006238:	3730      	adds	r7, #48	; 0x30
 800623a:	46bd      	mov	sp, r7
 800623c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006240 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800624c:	f003 0308 	and.w	r3, r3, #8
 8006250:	2b00      	cmp	r3, #0
 8006252:	d00a      	beq.n	800626a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	430a      	orrs	r2, r1
 8006268:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800626e:	f003 0301 	and.w	r3, r3, #1
 8006272:	2b00      	cmp	r3, #0
 8006274:	d00a      	beq.n	800628c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	430a      	orrs	r2, r1
 800628a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006290:	f003 0302 	and.w	r3, r3, #2
 8006294:	2b00      	cmp	r3, #0
 8006296:	d00a      	beq.n	80062ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	430a      	orrs	r2, r1
 80062ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062b2:	f003 0304 	and.w	r3, r3, #4
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d00a      	beq.n	80062d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	430a      	orrs	r2, r1
 80062ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062d4:	f003 0310 	and.w	r3, r3, #16
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d00a      	beq.n	80062f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	430a      	orrs	r2, r1
 80062f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062f6:	f003 0320 	and.w	r3, r3, #32
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d00a      	beq.n	8006314 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	430a      	orrs	r2, r1
 8006312:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800631c:	2b00      	cmp	r3, #0
 800631e:	d01a      	beq.n	8006356 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	430a      	orrs	r2, r1
 8006334:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800633a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800633e:	d10a      	bne.n	8006356 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	430a      	orrs	r2, r1
 8006354:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800635a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800635e:	2b00      	cmp	r3, #0
 8006360:	d00a      	beq.n	8006378 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	430a      	orrs	r2, r1
 8006376:	605a      	str	r2, [r3, #4]
  }
}
 8006378:	bf00      	nop
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b098      	sub	sp, #96	; 0x60
 8006388:	af02      	add	r7, sp, #8
 800638a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006394:	f7fb fb3a 	bl	8001a0c <HAL_GetTick>
 8006398:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 0308 	and.w	r3, r3, #8
 80063a4:	2b08      	cmp	r3, #8
 80063a6:	d12f      	bne.n	8006408 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80063ac:	9300      	str	r3, [sp, #0]
 80063ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063b0:	2200      	movs	r2, #0
 80063b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f000 f88e 	bl	80064d8 <UART_WaitOnFlagUntilTimeout>
 80063bc:	4603      	mov	r3, r0
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d022      	beq.n	8006408 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ca:	e853 3f00 	ldrex	r3, [r3]
 80063ce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80063d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063d6:	653b      	str	r3, [r7, #80]	; 0x50
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	461a      	mov	r2, r3
 80063de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063e0:	647b      	str	r3, [r7, #68]	; 0x44
 80063e2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80063e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063e8:	e841 2300 	strex	r3, r2, [r1]
 80063ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80063ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d1e6      	bne.n	80063c2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2220      	movs	r2, #32
 80063f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2200      	movs	r2, #0
 8006400:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006404:	2303      	movs	r3, #3
 8006406:	e063      	b.n	80064d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f003 0304 	and.w	r3, r3, #4
 8006412:	2b04      	cmp	r3, #4
 8006414:	d149      	bne.n	80064aa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006416:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800641a:	9300      	str	r3, [sp, #0]
 800641c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800641e:	2200      	movs	r2, #0
 8006420:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f000 f857 	bl	80064d8 <UART_WaitOnFlagUntilTimeout>
 800642a:	4603      	mov	r3, r0
 800642c:	2b00      	cmp	r3, #0
 800642e:	d03c      	beq.n	80064aa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006438:	e853 3f00 	ldrex	r3, [r3]
 800643c:	623b      	str	r3, [r7, #32]
   return(result);
 800643e:	6a3b      	ldr	r3, [r7, #32]
 8006440:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006444:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	461a      	mov	r2, r3
 800644c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800644e:	633b      	str	r3, [r7, #48]	; 0x30
 8006450:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006452:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006454:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006456:	e841 2300 	strex	r3, r2, [r1]
 800645a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800645c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800645e:	2b00      	cmp	r3, #0
 8006460:	d1e6      	bne.n	8006430 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	3308      	adds	r3, #8
 8006468:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	e853 3f00 	ldrex	r3, [r3]
 8006470:	60fb      	str	r3, [r7, #12]
   return(result);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f023 0301 	bic.w	r3, r3, #1
 8006478:	64bb      	str	r3, [r7, #72]	; 0x48
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	3308      	adds	r3, #8
 8006480:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006482:	61fa      	str	r2, [r7, #28]
 8006484:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006486:	69b9      	ldr	r1, [r7, #24]
 8006488:	69fa      	ldr	r2, [r7, #28]
 800648a:	e841 2300 	strex	r3, r2, [r1]
 800648e:	617b      	str	r3, [r7, #20]
   return(result);
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d1e5      	bne.n	8006462 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2220      	movs	r2, #32
 800649a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064a6:	2303      	movs	r3, #3
 80064a8:	e012      	b.n	80064d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2220      	movs	r2, #32
 80064ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2220      	movs	r2, #32
 80064b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80064ce:	2300      	movs	r3, #0
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3758      	adds	r7, #88	; 0x58
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	60f8      	str	r0, [r7, #12]
 80064e0:	60b9      	str	r1, [r7, #8]
 80064e2:	603b      	str	r3, [r7, #0]
 80064e4:	4613      	mov	r3, r2
 80064e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064e8:	e04f      	b.n	800658a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064f0:	d04b      	beq.n	800658a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064f2:	f7fb fa8b 	bl	8001a0c <HAL_GetTick>
 80064f6:	4602      	mov	r2, r0
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	1ad3      	subs	r3, r2, r3
 80064fc:	69ba      	ldr	r2, [r7, #24]
 80064fe:	429a      	cmp	r2, r3
 8006500:	d302      	bcc.n	8006508 <UART_WaitOnFlagUntilTimeout+0x30>
 8006502:	69bb      	ldr	r3, [r7, #24]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d101      	bne.n	800650c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006508:	2303      	movs	r3, #3
 800650a:	e04e      	b.n	80065aa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f003 0304 	and.w	r3, r3, #4
 8006516:	2b00      	cmp	r3, #0
 8006518:	d037      	beq.n	800658a <UART_WaitOnFlagUntilTimeout+0xb2>
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	2b80      	cmp	r3, #128	; 0x80
 800651e:	d034      	beq.n	800658a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	2b40      	cmp	r3, #64	; 0x40
 8006524:	d031      	beq.n	800658a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	69db      	ldr	r3, [r3, #28]
 800652c:	f003 0308 	and.w	r3, r3, #8
 8006530:	2b08      	cmp	r3, #8
 8006532:	d110      	bne.n	8006556 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	2208      	movs	r2, #8
 800653a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800653c:	68f8      	ldr	r0, [r7, #12]
 800653e:	f000 f920 	bl	8006782 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2208      	movs	r2, #8
 8006546:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2200      	movs	r2, #0
 800654e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	e029      	b.n	80065aa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	69db      	ldr	r3, [r3, #28]
 800655c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006560:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006564:	d111      	bne.n	800658a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800656e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006570:	68f8      	ldr	r0, [r7, #12]
 8006572:	f000 f906 	bl	8006782 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2220      	movs	r2, #32
 800657a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2200      	movs	r2, #0
 8006582:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006586:	2303      	movs	r3, #3
 8006588:	e00f      	b.n	80065aa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	69da      	ldr	r2, [r3, #28]
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	4013      	ands	r3, r2
 8006594:	68ba      	ldr	r2, [r7, #8]
 8006596:	429a      	cmp	r2, r3
 8006598:	bf0c      	ite	eq
 800659a:	2301      	moveq	r3, #1
 800659c:	2300      	movne	r3, #0
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	461a      	mov	r2, r3
 80065a2:	79fb      	ldrb	r3, [r7, #7]
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d0a0      	beq.n	80064ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065a8:	2300      	movs	r3, #0
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3710      	adds	r7, #16
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}
	...

080065b4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b096      	sub	sp, #88	; 0x58
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	60f8      	str	r0, [r7, #12]
 80065bc:	60b9      	str	r1, [r7, #8]
 80065be:	4613      	mov	r3, r2
 80065c0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	68ba      	ldr	r2, [r7, #8]
 80065c6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	88fa      	ldrh	r2, [r7, #6]
 80065cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2200      	movs	r2, #0
 80065d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2222      	movs	r2, #34	; 0x22
 80065dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d02d      	beq.n	8006646 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065f0:	4a40      	ldr	r2, [pc, #256]	; (80066f4 <UART_Start_Receive_DMA+0x140>)
 80065f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065fa:	4a3f      	ldr	r2, [pc, #252]	; (80066f8 <UART_Start_Receive_DMA+0x144>)
 80065fc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006604:	4a3d      	ldr	r2, [pc, #244]	; (80066fc <UART_Start_Receive_DMA+0x148>)
 8006606:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800660e:	2200      	movs	r2, #0
 8006610:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	3324      	adds	r3, #36	; 0x24
 800661e:	4619      	mov	r1, r3
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006624:	461a      	mov	r2, r3
 8006626:	88fb      	ldrh	r3, [r7, #6]
 8006628:	f7fc fecc 	bl	80033c4 <HAL_DMA_Start_IT>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d009      	beq.n	8006646 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2210      	movs	r2, #16
 8006636:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2220      	movs	r2, #32
 800663e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	e051      	b.n	80066ea <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	691b      	ldr	r3, [r3, #16]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d018      	beq.n	8006680 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006656:	e853 3f00 	ldrex	r3, [r3]
 800665a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800665c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800665e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006662:	657b      	str	r3, [r7, #84]	; 0x54
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	461a      	mov	r2, r3
 800666a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800666c:	64bb      	str	r3, [r7, #72]	; 0x48
 800666e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006670:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006672:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006674:	e841 2300 	strex	r3, r2, [r1]
 8006678:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800667a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800667c:	2b00      	cmp	r3, #0
 800667e:	d1e6      	bne.n	800664e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	3308      	adds	r3, #8
 8006686:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800668a:	e853 3f00 	ldrex	r3, [r3]
 800668e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006692:	f043 0301 	orr.w	r3, r3, #1
 8006696:	653b      	str	r3, [r7, #80]	; 0x50
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	3308      	adds	r3, #8
 800669e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80066a0:	637a      	str	r2, [r7, #52]	; 0x34
 80066a2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80066a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066a8:	e841 2300 	strex	r3, r2, [r1]
 80066ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80066ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d1e5      	bne.n	8006680 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	3308      	adds	r3, #8
 80066ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	e853 3f00 	ldrex	r3, [r3]
 80066c2:	613b      	str	r3, [r7, #16]
   return(result);
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	3308      	adds	r3, #8
 80066d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80066d4:	623a      	str	r2, [r7, #32]
 80066d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d8:	69f9      	ldr	r1, [r7, #28]
 80066da:	6a3a      	ldr	r2, [r7, #32]
 80066dc:	e841 2300 	strex	r3, r2, [r1]
 80066e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80066e2:	69bb      	ldr	r3, [r7, #24]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d1e5      	bne.n	80066b4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80066e8:	2300      	movs	r3, #0
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3758      	adds	r7, #88	; 0x58
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}
 80066f2:	bf00      	nop
 80066f4:	08006905 	.word	0x08006905
 80066f8:	08006a31 	.word	0x08006a31
 80066fc:	08006a6f 	.word	0x08006a6f

08006700 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006700:	b480      	push	{r7}
 8006702:	b08f      	sub	sp, #60	; 0x3c
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800670e:	6a3b      	ldr	r3, [r7, #32]
 8006710:	e853 3f00 	ldrex	r3, [r3]
 8006714:	61fb      	str	r3, [r7, #28]
   return(result);
 8006716:	69fb      	ldr	r3, [r7, #28]
 8006718:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800671c:	637b      	str	r3, [r7, #52]	; 0x34
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	461a      	mov	r2, r3
 8006724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006726:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006728:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800672a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800672c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800672e:	e841 2300 	strex	r3, r2, [r1]
 8006732:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006736:	2b00      	cmp	r3, #0
 8006738:	d1e6      	bne.n	8006708 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	3308      	adds	r3, #8
 8006740:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	e853 3f00 	ldrex	r3, [r3]
 8006748:	60bb      	str	r3, [r7, #8]
   return(result);
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006750:	633b      	str	r3, [r7, #48]	; 0x30
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	3308      	adds	r3, #8
 8006758:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800675a:	61ba      	str	r2, [r7, #24]
 800675c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800675e:	6979      	ldr	r1, [r7, #20]
 8006760:	69ba      	ldr	r2, [r7, #24]
 8006762:	e841 2300 	strex	r3, r2, [r1]
 8006766:	613b      	str	r3, [r7, #16]
   return(result);
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d1e5      	bne.n	800673a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2220      	movs	r2, #32
 8006772:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8006776:	bf00      	nop
 8006778:	373c      	adds	r7, #60	; 0x3c
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr

08006782 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006782:	b480      	push	{r7}
 8006784:	b095      	sub	sp, #84	; 0x54
 8006786:	af00      	add	r7, sp, #0
 8006788:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006792:	e853 3f00 	ldrex	r3, [r3]
 8006796:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800679a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800679e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	461a      	mov	r2, r3
 80067a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067a8:	643b      	str	r3, [r7, #64]	; 0x40
 80067aa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80067ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80067b0:	e841 2300 	strex	r3, r2, [r1]
 80067b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80067b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d1e6      	bne.n	800678a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	3308      	adds	r3, #8
 80067c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c4:	6a3b      	ldr	r3, [r7, #32]
 80067c6:	e853 3f00 	ldrex	r3, [r3]
 80067ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80067cc:	69fb      	ldr	r3, [r7, #28]
 80067ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067d2:	f023 0301 	bic.w	r3, r3, #1
 80067d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	3308      	adds	r3, #8
 80067de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80067e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067e8:	e841 2300 	strex	r3, r2, [r1]
 80067ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80067ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d1e3      	bne.n	80067bc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d118      	bne.n	800682e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	e853 3f00 	ldrex	r3, [r3]
 8006808:	60bb      	str	r3, [r7, #8]
   return(result);
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	f023 0310 	bic.w	r3, r3, #16
 8006810:	647b      	str	r3, [r7, #68]	; 0x44
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	461a      	mov	r2, r3
 8006818:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800681a:	61bb      	str	r3, [r7, #24]
 800681c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800681e:	6979      	ldr	r1, [r7, #20]
 8006820:	69ba      	ldr	r2, [r7, #24]
 8006822:	e841 2300 	strex	r3, r2, [r1]
 8006826:	613b      	str	r3, [r7, #16]
   return(result);
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d1e6      	bne.n	80067fc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2220      	movs	r2, #32
 8006832:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006842:	bf00      	nop
 8006844:	3754      	adds	r7, #84	; 0x54
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr

0800684e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800684e:	b580      	push	{r7, lr}
 8006850:	b090      	sub	sp, #64	; 0x40
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800685a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f003 0320 	and.w	r3, r3, #32
 8006866:	2b00      	cmp	r3, #0
 8006868:	d137      	bne.n	80068da <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800686a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800686c:	2200      	movs	r2, #0
 800686e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	3308      	adds	r3, #8
 8006878:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800687a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687c:	e853 3f00 	ldrex	r3, [r3]
 8006880:	623b      	str	r3, [r7, #32]
   return(result);
 8006882:	6a3b      	ldr	r3, [r7, #32]
 8006884:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006888:	63bb      	str	r3, [r7, #56]	; 0x38
 800688a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	3308      	adds	r3, #8
 8006890:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006892:	633a      	str	r2, [r7, #48]	; 0x30
 8006894:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006896:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006898:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800689a:	e841 2300 	strex	r3, r2, [r1]
 800689e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80068a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d1e5      	bne.n	8006872 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80068a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	e853 3f00 	ldrex	r3, [r3]
 80068b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068ba:	637b      	str	r3, [r7, #52]	; 0x34
 80068bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	461a      	mov	r2, r3
 80068c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068c4:	61fb      	str	r3, [r7, #28]
 80068c6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c8:	69b9      	ldr	r1, [r7, #24]
 80068ca:	69fa      	ldr	r2, [r7, #28]
 80068cc:	e841 2300 	strex	r3, r2, [r1]
 80068d0:	617b      	str	r3, [r7, #20]
   return(result);
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d1e6      	bne.n	80068a6 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80068d8:	e002      	b.n	80068e0 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80068da:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80068dc:	f7fa fd6e 	bl	80013bc <HAL_UART_TxCpltCallback>
}
 80068e0:	bf00      	nop
 80068e2:	3740      	adds	r7, #64	; 0x40
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}

080068e8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b084      	sub	sp, #16
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068f4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80068f6:	68f8      	ldr	r0, [r7, #12]
 80068f8:	f7ff f97c 	bl	8005bf4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068fc:	bf00      	nop
 80068fe:	3710      	adds	r7, #16
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}

08006904 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b09c      	sub	sp, #112	; 0x70
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006910:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f003 0320 	and.w	r3, r3, #32
 800691c:	2b00      	cmp	r3, #0
 800691e:	d171      	bne.n	8006a04 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8006920:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006922:	2200      	movs	r2, #0
 8006924:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006928:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006930:	e853 3f00 	ldrex	r3, [r3]
 8006934:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006936:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006938:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800693c:	66bb      	str	r3, [r7, #104]	; 0x68
 800693e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	461a      	mov	r2, r3
 8006944:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006946:	65bb      	str	r3, [r7, #88]	; 0x58
 8006948:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800694c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800694e:	e841 2300 	strex	r3, r2, [r1]
 8006952:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006954:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006956:	2b00      	cmp	r3, #0
 8006958:	d1e6      	bne.n	8006928 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800695a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	3308      	adds	r3, #8
 8006960:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006964:	e853 3f00 	ldrex	r3, [r3]
 8006968:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800696a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800696c:	f023 0301 	bic.w	r3, r3, #1
 8006970:	667b      	str	r3, [r7, #100]	; 0x64
 8006972:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	3308      	adds	r3, #8
 8006978:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800697a:	647a      	str	r2, [r7, #68]	; 0x44
 800697c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800697e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006980:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006982:	e841 2300 	strex	r3, r2, [r1]
 8006986:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800698a:	2b00      	cmp	r3, #0
 800698c:	d1e5      	bne.n	800695a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800698e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	3308      	adds	r3, #8
 8006994:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006998:	e853 3f00 	ldrex	r3, [r3]
 800699c:	623b      	str	r3, [r7, #32]
   return(result);
 800699e:	6a3b      	ldr	r3, [r7, #32]
 80069a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069a4:	663b      	str	r3, [r7, #96]	; 0x60
 80069a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	3308      	adds	r3, #8
 80069ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80069ae:	633a      	str	r2, [r7, #48]	; 0x30
 80069b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80069b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069b6:	e841 2300 	strex	r3, r2, [r1]
 80069ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80069bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d1e5      	bne.n	800698e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80069c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069c4:	2220      	movs	r2, #32
 80069c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d118      	bne.n	8006a04 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	e853 3f00 	ldrex	r3, [r3]
 80069de:	60fb      	str	r3, [r7, #12]
   return(result);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f023 0310 	bic.w	r3, r3, #16
 80069e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80069e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	461a      	mov	r2, r3
 80069ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069f0:	61fb      	str	r3, [r7, #28]
 80069f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f4:	69b9      	ldr	r1, [r7, #24]
 80069f6:	69fa      	ldr	r2, [r7, #28]
 80069f8:	e841 2300 	strex	r3, r2, [r1]
 80069fc:	617b      	str	r3, [r7, #20]
   return(result);
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d1e6      	bne.n	80069d2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a06:	2200      	movs	r2, #0
 8006a08:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d107      	bne.n	8006a22 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006a18:	4619      	mov	r1, r3
 8006a1a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006a1c:	f7ff f908 	bl	8005c30 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006a20:	e002      	b.n	8006a28 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006a22:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006a24:	f7fa fce2 	bl	80013ec <HAL_UART_RxCpltCallback>
}
 8006a28:	bf00      	nop
 8006a2a:	3770      	adds	r7, #112	; 0x70
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a3c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2201      	movs	r2, #1
 8006a42:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d109      	bne.n	8006a60 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006a52:	085b      	lsrs	r3, r3, #1
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	4619      	mov	r1, r3
 8006a58:	68f8      	ldr	r0, [r7, #12]
 8006a5a:	f7ff f8e9 	bl	8005c30 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006a5e:	e002      	b.n	8006a66 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8006a60:	68f8      	ldr	r0, [r7, #12]
 8006a62:	f7ff f8d1 	bl	8005c08 <HAL_UART_RxHalfCpltCallback>
}
 8006a66:	bf00      	nop
 8006a68:	3710      	adds	r7, #16
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}

08006a6e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006a6e:	b580      	push	{r7, lr}
 8006a70:	b086      	sub	sp, #24
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a7a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a82:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a8a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a96:	2b80      	cmp	r3, #128	; 0x80
 8006a98:	d109      	bne.n	8006aae <UART_DMAError+0x40>
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	2b21      	cmp	r3, #33	; 0x21
 8006a9e:	d106      	bne.n	8006aae <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8006aa8:	6978      	ldr	r0, [r7, #20]
 8006aaa:	f7ff fe29 	bl	8006700 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ab8:	2b40      	cmp	r3, #64	; 0x40
 8006aba:	d109      	bne.n	8006ad0 <UART_DMAError+0x62>
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2b22      	cmp	r3, #34	; 0x22
 8006ac0:	d106      	bne.n	8006ad0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8006aca:	6978      	ldr	r0, [r7, #20]
 8006acc:	f7ff fe59 	bl	8006782 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ad6:	f043 0210 	orr.w	r2, r3, #16
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ae0:	6978      	ldr	r0, [r7, #20]
 8006ae2:	f7ff f89b 	bl	8005c1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ae6:	bf00      	nop
 8006ae8:	3718      	adds	r7, #24
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}

08006aee <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006aee:	b580      	push	{r7, lr}
 8006af0:	b084      	sub	sp, #16
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006afa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2200      	movs	r2, #0
 8006b08:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b0c:	68f8      	ldr	r0, [r7, #12]
 8006b0e:	f7ff f885 	bl	8005c1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b12:	bf00      	nop
 8006b14:	3710      	adds	r7, #16
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}

08006b1a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b1a:	b580      	push	{r7, lr}
 8006b1c:	b088      	sub	sp, #32
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	e853 3f00 	ldrex	r3, [r3]
 8006b2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b36:	61fb      	str	r3, [r7, #28]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	69fb      	ldr	r3, [r7, #28]
 8006b40:	61bb      	str	r3, [r7, #24]
 8006b42:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b44:	6979      	ldr	r1, [r7, #20]
 8006b46:	69ba      	ldr	r2, [r7, #24]
 8006b48:	e841 2300 	strex	r3, r2, [r1]
 8006b4c:	613b      	str	r3, [r7, #16]
   return(result);
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d1e6      	bne.n	8006b22 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2220      	movs	r2, #32
 8006b58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f7fa fc2a 	bl	80013bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b68:	bf00      	nop
 8006b6a:	3720      	adds	r7, #32
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b083      	sub	sp, #12
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006b78:	bf00      	nop
 8006b7a:	370c      	adds	r7, #12
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr

08006b84 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b083      	sub	sp, #12
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006b8c:	bf00      	nop
 8006b8e:	370c      	adds	r7, #12
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr

08006b98 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006ba0:	bf00      	nop
 8006ba2:	370c      	adds	r7, #12
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr

08006bac <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b085      	sub	sp, #20
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d101      	bne.n	8006bc2 <HAL_UARTEx_DisableFifoMode+0x16>
 8006bbe:	2302      	movs	r3, #2
 8006bc0:	e027      	b.n	8006c12 <HAL_UARTEx_DisableFifoMode+0x66>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2224      	movs	r2, #36	; 0x24
 8006bce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f022 0201 	bic.w	r2, r2, #1
 8006be8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006bf0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	68fa      	ldr	r2, [r7, #12]
 8006bfe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2220      	movs	r2, #32
 8006c04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006c10:	2300      	movs	r3, #0
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3714      	adds	r7, #20
 8006c16:	46bd      	mov	sp, r7
 8006c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1c:	4770      	bx	lr

08006c1e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c1e:	b580      	push	{r7, lr}
 8006c20:	b084      	sub	sp, #16
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	6078      	str	r0, [r7, #4]
 8006c26:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d101      	bne.n	8006c36 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006c32:	2302      	movs	r3, #2
 8006c34:	e02d      	b.n	8006c92 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2201      	movs	r2, #1
 8006c3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2224      	movs	r2, #36	; 0x24
 8006c42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f022 0201 	bic.w	r2, r2, #1
 8006c5c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	683a      	ldr	r2, [r7, #0]
 8006c6e:	430a      	orrs	r2, r1
 8006c70:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 f850 	bl	8006d18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	68fa      	ldr	r2, [r7, #12]
 8006c7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2220      	movs	r2, #32
 8006c84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006c90:	2300      	movs	r3, #0
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3710      	adds	r7, #16
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}

08006c9a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c9a:	b580      	push	{r7, lr}
 8006c9c:	b084      	sub	sp, #16
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
 8006ca2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006caa:	2b01      	cmp	r3, #1
 8006cac:	d101      	bne.n	8006cb2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006cae:	2302      	movs	r3, #2
 8006cb0:	e02d      	b.n	8006d0e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2224      	movs	r2, #36	; 0x24
 8006cbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f022 0201 	bic.w	r2, r2, #1
 8006cd8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	683a      	ldr	r2, [r7, #0]
 8006cea:	430a      	orrs	r2, r1
 8006cec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f000 f812 	bl	8006d18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	68fa      	ldr	r2, [r7, #12]
 8006cfa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2220      	movs	r2, #32
 8006d00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2200      	movs	r2, #0
 8006d08:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006d0c:	2300      	movs	r3, #0
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3710      	adds	r7, #16
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}
	...

08006d18 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b085      	sub	sp, #20
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d108      	bne.n	8006d3a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2201      	movs	r2, #1
 8006d34:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006d38:	e031      	b.n	8006d9e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006d3a:	2308      	movs	r3, #8
 8006d3c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006d3e:	2308      	movs	r3, #8
 8006d40:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	0e5b      	lsrs	r3, r3, #25
 8006d4a:	b2db      	uxtb	r3, r3
 8006d4c:	f003 0307 	and.w	r3, r3, #7
 8006d50:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	0f5b      	lsrs	r3, r3, #29
 8006d5a:	b2db      	uxtb	r3, r3
 8006d5c:	f003 0307 	and.w	r3, r3, #7
 8006d60:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d62:	7bbb      	ldrb	r3, [r7, #14]
 8006d64:	7b3a      	ldrb	r2, [r7, #12]
 8006d66:	4911      	ldr	r1, [pc, #68]	; (8006dac <UARTEx_SetNbDataToProcess+0x94>)
 8006d68:	5c8a      	ldrb	r2, [r1, r2]
 8006d6a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006d6e:	7b3a      	ldrb	r2, [r7, #12]
 8006d70:	490f      	ldr	r1, [pc, #60]	; (8006db0 <UARTEx_SetNbDataToProcess+0x98>)
 8006d72:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d74:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d78:	b29a      	uxth	r2, r3
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d80:	7bfb      	ldrb	r3, [r7, #15]
 8006d82:	7b7a      	ldrb	r2, [r7, #13]
 8006d84:	4909      	ldr	r1, [pc, #36]	; (8006dac <UARTEx_SetNbDataToProcess+0x94>)
 8006d86:	5c8a      	ldrb	r2, [r1, r2]
 8006d88:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006d8c:	7b7a      	ldrb	r2, [r7, #13]
 8006d8e:	4908      	ldr	r1, [pc, #32]	; (8006db0 <UARTEx_SetNbDataToProcess+0x98>)
 8006d90:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d92:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d96:	b29a      	uxth	r2, r3
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006d9e:	bf00      	nop
 8006da0:	3714      	adds	r7, #20
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr
 8006daa:	bf00      	nop
 8006dac:	08006e54 	.word	0x08006e54
 8006db0:	08006e5c 	.word	0x08006e5c

08006db4 <__libc_init_array>:
 8006db4:	b570      	push	{r4, r5, r6, lr}
 8006db6:	4d0d      	ldr	r5, [pc, #52]	; (8006dec <__libc_init_array+0x38>)
 8006db8:	4c0d      	ldr	r4, [pc, #52]	; (8006df0 <__libc_init_array+0x3c>)
 8006dba:	1b64      	subs	r4, r4, r5
 8006dbc:	10a4      	asrs	r4, r4, #2
 8006dbe:	2600      	movs	r6, #0
 8006dc0:	42a6      	cmp	r6, r4
 8006dc2:	d109      	bne.n	8006dd8 <__libc_init_array+0x24>
 8006dc4:	4d0b      	ldr	r5, [pc, #44]	; (8006df4 <__libc_init_array+0x40>)
 8006dc6:	4c0c      	ldr	r4, [pc, #48]	; (8006df8 <__libc_init_array+0x44>)
 8006dc8:	f000 f820 	bl	8006e0c <_init>
 8006dcc:	1b64      	subs	r4, r4, r5
 8006dce:	10a4      	asrs	r4, r4, #2
 8006dd0:	2600      	movs	r6, #0
 8006dd2:	42a6      	cmp	r6, r4
 8006dd4:	d105      	bne.n	8006de2 <__libc_init_array+0x2e>
 8006dd6:	bd70      	pop	{r4, r5, r6, pc}
 8006dd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ddc:	4798      	blx	r3
 8006dde:	3601      	adds	r6, #1
 8006de0:	e7ee      	b.n	8006dc0 <__libc_init_array+0xc>
 8006de2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006de6:	4798      	blx	r3
 8006de8:	3601      	adds	r6, #1
 8006dea:	e7f2      	b.n	8006dd2 <__libc_init_array+0x1e>
 8006dec:	08006e6c 	.word	0x08006e6c
 8006df0:	08006e6c 	.word	0x08006e6c
 8006df4:	08006e6c 	.word	0x08006e6c
 8006df8:	08006e70 	.word	0x08006e70

08006dfc <memset>:
 8006dfc:	4402      	add	r2, r0
 8006dfe:	4603      	mov	r3, r0
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d100      	bne.n	8006e06 <memset+0xa>
 8006e04:	4770      	bx	lr
 8006e06:	f803 1b01 	strb.w	r1, [r3], #1
 8006e0a:	e7f9      	b.n	8006e00 <memset+0x4>

08006e0c <_init>:
 8006e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e0e:	bf00      	nop
 8006e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e12:	bc08      	pop	{r3}
 8006e14:	469e      	mov	lr, r3
 8006e16:	4770      	bx	lr

08006e18 <_fini>:
 8006e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e1a:	bf00      	nop
 8006e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e1e:	bc08      	pop	{r3}
 8006e20:	469e      	mov	lr, r3
 8006e22:	4770      	bx	lr
