
path.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077ac  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08007984  08007984  00017984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079c4  080079c4  00020138  2**0
                  CONTENTS
  4 .ARM          00000008  080079c4  080079c4  000179c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080079cc  080079cc  00020138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080079cc  080079cc  000179cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080079d4  080079d4  000179d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000138  20000000  080079d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000584  20000138  08007b10  00020138  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006bc  08007b10  000206bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cf15  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031fd  00000000  00000000  0003d07d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015a0  00000000  00000000  00040280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001488  00000000  00000000  00041820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000479b  00000000  00000000  00042ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019081  00000000  00000000  00047443  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5c9e  00000000  00000000  000604c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00146162  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cd4  00000000  00000000  001461b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000138 	.word	0x20000138
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800796c 	.word	0x0800796c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000013c 	.word	0x2000013c
 8000214:	0800796c 	.word	0x0800796c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000520:	f001 fe41 	bl	80021a6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000524:	f000 f823 	bl	800056e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000528:	f000 fdcc 	bl	80010c4 <MX_GPIO_Init>
  MX_DMA_Init();
 800052c:	f000 fda0 	bl	8001070 <MX_DMA_Init>
  MX_ADC1_Init();
 8000530:	f000 f85e 	bl	80005f0 <MX_ADC1_Init>
  MX_TIM6_Init();
 8000534:	f000 fb14 	bl	8000b60 <MX_TIM6_Init>
  MX_TIM15_Init();
 8000538:	f000 fba2 	bl	8000c80 <MX_TIM15_Init>
  MX_TIM4_Init();
 800053c:	f000 faba 	bl	8000ab4 <MX_TIM4_Init>
  MX_UART5_Init();
 8000540:	f000 fcfc 	bl	8000f3c <MX_UART5_Init>
  MX_TIM3_Init();
 8000544:	f000 fa3a 	bl	80009bc <MX_TIM3_Init>
  MX_TIM1_Init();
 8000548:	f000 f92c 	bl	80007a4 <MX_TIM1_Init>
  MX_TIM8_Init();
 800054c:	f000 fb3e 	bl	8000bcc <MX_TIM8_Init>
  MX_TIM16_Init();
 8000550:	f000 fc28 	bl	8000da4 <MX_TIM16_Init>
  MX_TIM20_Init();
 8000554:	f000 fc4c 	bl	8000df0 <MX_TIM20_Init>
  MX_UART4_Init();
 8000558:	f000 fca4 	bl	8000ea4 <MX_UART4_Init>
  MX_USART3_UART_Init();
 800055c:	f000 fd3a 	bl	8000fd4 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000560:	f000 f9d8 	bl	8000914 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  //
  setup();
 8000564:	f000 fe10 	bl	8001188 <setup>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {main_function();
 8000568:	f000 fe07 	bl	800117a <main_function>
 800056c:	e7fc      	b.n	8000568 <main+0x4c>

0800056e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800056e:	b580      	push	{r7, lr}
 8000570:	b094      	sub	sp, #80	; 0x50
 8000572:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000574:	f107 0318 	add.w	r3, r7, #24
 8000578:	2238      	movs	r2, #56	; 0x38
 800057a:	2100      	movs	r1, #0
 800057c:	4618      	mov	r0, r3
 800057e:	f007 f9ed 	bl	800795c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000582:	1d3b      	adds	r3, r7, #4
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
 800058e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000590:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000594:	f003 fc5a 	bl	8003e4c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000598:	2302      	movs	r3, #2
 800059a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800059c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a2:	2340      	movs	r3, #64	; 0x40
 80005a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005a6:	2300      	movs	r3, #0
 80005a8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005aa:	f107 0318 	add.w	r3, r7, #24
 80005ae:	4618      	mov	r0, r3
 80005b0:	f003 fcf0 	bl	8003f94 <HAL_RCC_OscConfig>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0x50>
  {
    Error_Handler();
 80005ba:	f000 fdd9 	bl	8001170 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005be:	230f      	movs	r3, #15
 80005c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005c2:	2301      	movs	r3, #1
 80005c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c6:	2300      	movs	r3, #0
 80005c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ca:	2300      	movs	r3, #0
 80005cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ce:	2300      	movs	r3, #0
 80005d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005d2:	1d3b      	adds	r3, r7, #4
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f003 ffee 	bl	80045b8 <HAL_RCC_ClockConfig>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80005e2:	f000 fdc5 	bl	8001170 <Error_Handler>
  }
}
 80005e6:	bf00      	nop
 80005e8:	3750      	adds	r7, #80	; 0x50
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
	...

080005f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b08c      	sub	sp, #48	; 0x30
 80005f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
 8000600:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	2220      	movs	r2, #32
 8000606:	2100      	movs	r1, #0
 8000608:	4618      	mov	r0, r3
 800060a:	f007 f9a7 	bl	800795c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800060e:	4b5d      	ldr	r3, [pc, #372]	; (8000784 <MX_ADC1_Init+0x194>)
 8000610:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000614:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000616:	4b5b      	ldr	r3, [pc, #364]	; (8000784 <MX_ADC1_Init+0x194>)
 8000618:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800061c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800061e:	4b59      	ldr	r3, [pc, #356]	; (8000784 <MX_ADC1_Init+0x194>)
 8000620:	2200      	movs	r2, #0
 8000622:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000624:	4b57      	ldr	r3, [pc, #348]	; (8000784 <MX_ADC1_Init+0x194>)
 8000626:	2200      	movs	r2, #0
 8000628:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800062a:	4b56      	ldr	r3, [pc, #344]	; (8000784 <MX_ADC1_Init+0x194>)
 800062c:	2200      	movs	r2, #0
 800062e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000630:	4b54      	ldr	r3, [pc, #336]	; (8000784 <MX_ADC1_Init+0x194>)
 8000632:	2201      	movs	r2, #1
 8000634:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000636:	4b53      	ldr	r3, [pc, #332]	; (8000784 <MX_ADC1_Init+0x194>)
 8000638:	2204      	movs	r2, #4
 800063a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800063c:	4b51      	ldr	r3, [pc, #324]	; (8000784 <MX_ADC1_Init+0x194>)
 800063e:	2200      	movs	r2, #0
 8000640:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000642:	4b50      	ldr	r3, [pc, #320]	; (8000784 <MX_ADC1_Init+0x194>)
 8000644:	2201      	movs	r2, #1
 8000646:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 7;
 8000648:	4b4e      	ldr	r3, [pc, #312]	; (8000784 <MX_ADC1_Init+0x194>)
 800064a:	2207      	movs	r2, #7
 800064c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800064e:	4b4d      	ldr	r3, [pc, #308]	; (8000784 <MX_ADC1_Init+0x194>)
 8000650:	2200      	movs	r2, #0
 8000652:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000656:	4b4b      	ldr	r3, [pc, #300]	; (8000784 <MX_ADC1_Init+0x194>)
 8000658:	2200      	movs	r2, #0
 800065a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800065c:	4b49      	ldr	r3, [pc, #292]	; (8000784 <MX_ADC1_Init+0x194>)
 800065e:	2200      	movs	r2, #0
 8000660:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000662:	4b48      	ldr	r3, [pc, #288]	; (8000784 <MX_ADC1_Init+0x194>)
 8000664:	2201      	movs	r2, #1
 8000666:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800066a:	4b46      	ldr	r3, [pc, #280]	; (8000784 <MX_ADC1_Init+0x194>)
 800066c:	2200      	movs	r2, #0
 800066e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000670:	4b44      	ldr	r3, [pc, #272]	; (8000784 <MX_ADC1_Init+0x194>)
 8000672:	2200      	movs	r2, #0
 8000674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000678:	4842      	ldr	r0, [pc, #264]	; (8000784 <MX_ADC1_Init+0x194>)
 800067a:	f001 ffdb 	bl	8002634 <HAL_ADC_Init>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000684:	f000 fd74 	bl	8001170 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000688:	2300      	movs	r3, #0
 800068a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800068c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000690:	4619      	mov	r1, r3
 8000692:	483c      	ldr	r0, [pc, #240]	; (8000784 <MX_ADC1_Init+0x194>)
 8000694:	f002 fdce 	bl	8003234 <HAL_ADCEx_MultiModeConfigChannel>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800069e:	f000 fd67 	bl	8001170 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006a2:	4b39      	ldr	r3, [pc, #228]	; (8000788 <MX_ADC1_Init+0x198>)
 80006a4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006a6:	2306      	movs	r3, #6
 80006a8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 80006aa:	2305      	movs	r3, #5
 80006ac:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006ae:	237f      	movs	r3, #127	; 0x7f
 80006b0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006b2:	2304      	movs	r3, #4
 80006b4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	4619      	mov	r1, r3
 80006be:	4831      	ldr	r0, [pc, #196]	; (8000784 <MX_ADC1_Init+0x194>)
 80006c0:	f002 f966 	bl	8002990 <HAL_ADC_ConfigChannel>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006ca:	f000 fd51 	bl	8001170 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80006ce:	4b2f      	ldr	r3, [pc, #188]	; (800078c <MX_ADC1_Init+0x19c>)
 80006d0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006d2:	230c      	movs	r3, #12
 80006d4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	4619      	mov	r1, r3
 80006da:	482a      	ldr	r0, [pc, #168]	; (8000784 <MX_ADC1_Init+0x194>)
 80006dc:	f002 f958 	bl	8002990 <HAL_ADC_ConfigChannel>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80006e6:	f000 fd43 	bl	8001170 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80006ea:	4b29      	ldr	r3, [pc, #164]	; (8000790 <MX_ADC1_Init+0x1a0>)
 80006ec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006ee:	2312      	movs	r3, #18
 80006f0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	4619      	mov	r1, r3
 80006f6:	4823      	ldr	r0, [pc, #140]	; (8000784 <MX_ADC1_Init+0x194>)
 80006f8:	f002 f94a 	bl	8002990 <HAL_ADC_ConfigChannel>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8000702:	f000 fd35 	bl	8001170 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000706:	4b23      	ldr	r3, [pc, #140]	; (8000794 <MX_ADC1_Init+0x1a4>)
 8000708:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800070a:	2318      	movs	r3, #24
 800070c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	4619      	mov	r1, r3
 8000712:	481c      	ldr	r0, [pc, #112]	; (8000784 <MX_ADC1_Init+0x194>)
 8000714:	f002 f93c 	bl	8002990 <HAL_ADC_ConfigChannel>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 800071e:	f000 fd27 	bl	8001170 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <MX_ADC1_Init+0x1a8>)
 8000724:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000726:	f44f 7380 	mov.w	r3, #256	; 0x100
 800072a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800072c:	1d3b      	adds	r3, r7, #4
 800072e:	4619      	mov	r1, r3
 8000730:	4814      	ldr	r0, [pc, #80]	; (8000784 <MX_ADC1_Init+0x194>)
 8000732:	f002 f92d 	bl	8002990 <HAL_ADC_ConfigChannel>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 800073c:	f000 fd18 	bl	8001170 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000740:	4b16      	ldr	r3, [pc, #88]	; (800079c <MX_ADC1_Init+0x1ac>)
 8000742:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000744:	f44f 7383 	mov.w	r3, #262	; 0x106
 8000748:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800074a:	1d3b      	adds	r3, r7, #4
 800074c:	4619      	mov	r1, r3
 800074e:	480d      	ldr	r0, [pc, #52]	; (8000784 <MX_ADC1_Init+0x194>)
 8000750:	f002 f91e 	bl	8002990 <HAL_ADC_ConfigChannel>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 800075a:	f000 fd09 	bl	8001170 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800075e:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <MX_ADC1_Init+0x1b0>)
 8000760:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000762:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8000766:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000768:	1d3b      	adds	r3, r7, #4
 800076a:	4619      	mov	r1, r3
 800076c:	4805      	ldr	r0, [pc, #20]	; (8000784 <MX_ADC1_Init+0x194>)
 800076e:	f002 f90f 	bl	8002990 <HAL_ADC_ConfigChannel>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8000778:	f000 fcfa 	bl	8001170 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800077c:	bf00      	nop
 800077e:	3730      	adds	r7, #48	; 0x30
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	20000154 	.word	0x20000154
 8000788:	04300002 	.word	0x04300002
 800078c:	08600004 	.word	0x08600004
 8000790:	3ef08000 	.word	0x3ef08000
 8000794:	1d500080 	.word	0x1d500080
 8000798:	19200040 	.word	0x19200040
 800079c:	2e300800 	.word	0x2e300800
 80007a0:	3ac04000 	.word	0x3ac04000

080007a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b098      	sub	sp, #96	; 0x60
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007aa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007b6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
 80007c4:	611a      	str	r2, [r3, #16]
 80007c6:	615a      	str	r2, [r3, #20]
 80007c8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007ca:	1d3b      	adds	r3, r7, #4
 80007cc:	2234      	movs	r2, #52	; 0x34
 80007ce:	2100      	movs	r1, #0
 80007d0:	4618      	mov	r0, r3
 80007d2:	f007 f8c3 	bl	800795c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007d6:	4b4d      	ldr	r3, [pc, #308]	; (800090c <MX_TIM1_Init+0x168>)
 80007d8:	4a4d      	ldr	r2, [pc, #308]	; (8000910 <MX_TIM1_Init+0x16c>)
 80007da:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80007dc:	4b4b      	ldr	r3, [pc, #300]	; (800090c <MX_TIM1_Init+0x168>)
 80007de:	2200      	movs	r2, #0
 80007e0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e2:	4b4a      	ldr	r3, [pc, #296]	; (800090c <MX_TIM1_Init+0x168>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 799;
 80007e8:	4b48      	ldr	r3, [pc, #288]	; (800090c <MX_TIM1_Init+0x168>)
 80007ea:	f240 321f 	movw	r2, #799	; 0x31f
 80007ee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007f0:	4b46      	ldr	r3, [pc, #280]	; (800090c <MX_TIM1_Init+0x168>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007f6:	4b45      	ldr	r3, [pc, #276]	; (800090c <MX_TIM1_Init+0x168>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007fc:	4b43      	ldr	r3, [pc, #268]	; (800090c <MX_TIM1_Init+0x168>)
 80007fe:	2200      	movs	r2, #0
 8000800:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000802:	4842      	ldr	r0, [pc, #264]	; (800090c <MX_TIM1_Init+0x168>)
 8000804:	f004 fbf8 	bl	8004ff8 <HAL_TIM_PWM_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800080e:	f000 fcaf 	bl	8001170 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000812:	2300      	movs	r3, #0
 8000814:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000816:	2300      	movs	r3, #0
 8000818:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800081a:	2300      	movs	r3, #0
 800081c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800081e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000822:	4619      	mov	r1, r3
 8000824:	4839      	ldr	r0, [pc, #228]	; (800090c <MX_TIM1_Init+0x168>)
 8000826:	f005 fd05 	bl	8006234 <HAL_TIMEx_MasterConfigSynchronization>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000830:	f000 fc9e 	bl	8001170 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000834:	2360      	movs	r3, #96	; 0x60
 8000836:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000838:	2300      	movs	r3, #0
 800083a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800083c:	2300      	movs	r3, #0
 800083e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000840:	2300      	movs	r3, #0
 8000842:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000844:	2300      	movs	r3, #0
 8000846:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000848:	2300      	movs	r3, #0
 800084a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800084c:	2300      	movs	r3, #0
 800084e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000850:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000854:	2200      	movs	r2, #0
 8000856:	4619      	mov	r1, r3
 8000858:	482c      	ldr	r0, [pc, #176]	; (800090c <MX_TIM1_Init+0x168>)
 800085a:	f004 ffb5 	bl	80057c8 <HAL_TIM_PWM_ConfigChannel>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000864:	f000 fc84 	bl	8001170 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000868:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800086c:	2204      	movs	r2, #4
 800086e:	4619      	mov	r1, r3
 8000870:	4826      	ldr	r0, [pc, #152]	; (800090c <MX_TIM1_Init+0x168>)
 8000872:	f004 ffa9 	bl	80057c8 <HAL_TIM_PWM_ConfigChannel>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 800087c:	f000 fc78 	bl	8001170 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000880:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000884:	2208      	movs	r2, #8
 8000886:	4619      	mov	r1, r3
 8000888:	4820      	ldr	r0, [pc, #128]	; (800090c <MX_TIM1_Init+0x168>)
 800088a:	f004 ff9d 	bl	80057c8 <HAL_TIM_PWM_ConfigChannel>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8000894:	f000 fc6c 	bl	8001170 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000898:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800089c:	220c      	movs	r2, #12
 800089e:	4619      	mov	r1, r3
 80008a0:	481a      	ldr	r0, [pc, #104]	; (800090c <MX_TIM1_Init+0x168>)
 80008a2:	f004 ff91 	bl	80057c8 <HAL_TIM_PWM_ConfigChannel>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 80008ac:	f000 fc60 	bl	8001170 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008b0:	2300      	movs	r3, #0
 80008b2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008b4:	2300      	movs	r3, #0
 80008b6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008b8:	2300      	movs	r3, #0
 80008ba:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008bc:	2300      	movs	r3, #0
 80008be:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008c0:	2300      	movs	r3, #0
 80008c2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008c8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80008ca:	2300      	movs	r3, #0
 80008cc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80008ce:	2300      	movs	r3, #0
 80008d0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80008d2:	2300      	movs	r3, #0
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80008d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80008da:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80008dc:	2300      	movs	r3, #0
 80008de:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80008e0:	2300      	movs	r3, #0
 80008e2:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008e4:	2300      	movs	r3, #0
 80008e6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008e8:	1d3b      	adds	r3, r7, #4
 80008ea:	4619      	mov	r1, r3
 80008ec:	4807      	ldr	r0, [pc, #28]	; (800090c <MX_TIM1_Init+0x168>)
 80008ee:	f005 fd2f 	bl	8006350 <HAL_TIMEx_ConfigBreakDeadTime>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 80008f8:	f000 fc3a 	bl	8001170 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008fc:	4803      	ldr	r0, [pc, #12]	; (800090c <MX_TIM1_Init+0x168>)
 80008fe:	f001 f9d5 	bl	8001cac <HAL_TIM_MspPostInit>

}
 8000902:	bf00      	nop
 8000904:	3760      	adds	r7, #96	; 0x60
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	20000220 	.word	0x20000220
 8000910:	40012c00 	.word	0x40012c00

08000914 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b08c      	sub	sp, #48	; 0x30
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800091a:	f107 030c 	add.w	r3, r7, #12
 800091e:	2224      	movs	r2, #36	; 0x24
 8000920:	2100      	movs	r1, #0
 8000922:	4618      	mov	r0, r3
 8000924:	f007 f81a 	bl	800795c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000928:	463b      	mov	r3, r7
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]
 8000930:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000932:	4b21      	ldr	r3, [pc, #132]	; (80009b8 <MX_TIM2_Init+0xa4>)
 8000934:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000938:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800093a:	4b1f      	ldr	r3, [pc, #124]	; (80009b8 <MX_TIM2_Init+0xa4>)
 800093c:	2200      	movs	r2, #0
 800093e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000940:	4b1d      	ldr	r3, [pc, #116]	; (80009b8 <MX_TIM2_Init+0xa4>)
 8000942:	2200      	movs	r2, #0
 8000944:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8000946:	4b1c      	ldr	r3, [pc, #112]	; (80009b8 <MX_TIM2_Init+0xa4>)
 8000948:	f04f 32ff 	mov.w	r2, #4294967295
 800094c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800094e:	4b1a      	ldr	r3, [pc, #104]	; (80009b8 <MX_TIM2_Init+0xa4>)
 8000950:	2200      	movs	r2, #0
 8000952:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000954:	4b18      	ldr	r3, [pc, #96]	; (80009b8 <MX_TIM2_Init+0xa4>)
 8000956:	2200      	movs	r2, #0
 8000958:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800095a:	2301      	movs	r3, #1
 800095c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800095e:	2300      	movs	r3, #0
 8000960:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000962:	2301      	movs	r3, #1
 8000964:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000966:	2300      	movs	r3, #0
 8000968:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800096a:	2300      	movs	r3, #0
 800096c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800096e:	2300      	movs	r3, #0
 8000970:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000972:	2301      	movs	r3, #1
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000976:	2300      	movs	r3, #0
 8000978:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800097a:	2300      	movs	r3, #0
 800097c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800097e:	f107 030c 	add.w	r3, r7, #12
 8000982:	4619      	mov	r1, r3
 8000984:	480c      	ldr	r0, [pc, #48]	; (80009b8 <MX_TIM2_Init+0xa4>)
 8000986:	f004 fc9b 	bl	80052c0 <HAL_TIM_Encoder_Init>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000990:	f000 fbee 	bl	8001170 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000994:	2300      	movs	r3, #0
 8000996:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000998:	2300      	movs	r3, #0
 800099a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800099c:	463b      	mov	r3, r7
 800099e:	4619      	mov	r1, r3
 80009a0:	4805      	ldr	r0, [pc, #20]	; (80009b8 <MX_TIM2_Init+0xa4>)
 80009a2:	f005 fc47 	bl	8006234 <HAL_TIMEx_MasterConfigSynchronization>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80009ac:	f000 fbe0 	bl	8001170 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009b0:	bf00      	nop
 80009b2:	3730      	adds	r7, #48	; 0x30
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	2000026c 	.word	0x2000026c

080009bc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08a      	sub	sp, #40	; 0x28
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009c2:	f107 031c 	add.w	r3, r7, #28
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009ce:	463b      	mov	r3, r7
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]
 80009da:	611a      	str	r2, [r3, #16]
 80009dc:	615a      	str	r2, [r3, #20]
 80009de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009e0:	4b32      	ldr	r3, [pc, #200]	; (8000aac <MX_TIM3_Init+0xf0>)
 80009e2:	4a33      	ldr	r2, [pc, #204]	; (8000ab0 <MX_TIM3_Init+0xf4>)
 80009e4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80009e6:	4b31      	ldr	r3, [pc, #196]	; (8000aac <MX_TIM3_Init+0xf0>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ec:	4b2f      	ldr	r3, [pc, #188]	; (8000aac <MX_TIM3_Init+0xf0>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80009f2:	4b2e      	ldr	r3, [pc, #184]	; (8000aac <MX_TIM3_Init+0xf0>)
 80009f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009f8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009fa:	4b2c      	ldr	r3, [pc, #176]	; (8000aac <MX_TIM3_Init+0xf0>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a00:	4b2a      	ldr	r3, [pc, #168]	; (8000aac <MX_TIM3_Init+0xf0>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a06:	4829      	ldr	r0, [pc, #164]	; (8000aac <MX_TIM3_Init+0xf0>)
 8000a08:	f004 faf6 	bl	8004ff8 <HAL_TIM_PWM_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000a12:	f000 fbad 	bl	8001170 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a16:	2300      	movs	r3, #0
 8000a18:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a1e:	f107 031c 	add.w	r3, r7, #28
 8000a22:	4619      	mov	r1, r3
 8000a24:	4821      	ldr	r0, [pc, #132]	; (8000aac <MX_TIM3_Init+0xf0>)
 8000a26:	f005 fc05 	bl	8006234 <HAL_TIMEx_MasterConfigSynchronization>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000a30:	f000 fb9e 	bl	8001170 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a34:	2360      	movs	r3, #96	; 0x60
 8000a36:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a40:	2300      	movs	r3, #0
 8000a42:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a44:	463b      	mov	r3, r7
 8000a46:	2200      	movs	r2, #0
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4818      	ldr	r0, [pc, #96]	; (8000aac <MX_TIM3_Init+0xf0>)
 8000a4c:	f004 febc 	bl	80057c8 <HAL_TIM_PWM_ConfigChannel>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000a56:	f000 fb8b 	bl	8001170 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a5a:	463b      	mov	r3, r7
 8000a5c:	2204      	movs	r2, #4
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4812      	ldr	r0, [pc, #72]	; (8000aac <MX_TIM3_Init+0xf0>)
 8000a62:	f004 feb1 	bl	80057c8 <HAL_TIM_PWM_ConfigChannel>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000a6c:	f000 fb80 	bl	8001170 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a70:	463b      	mov	r3, r7
 8000a72:	2208      	movs	r2, #8
 8000a74:	4619      	mov	r1, r3
 8000a76:	480d      	ldr	r0, [pc, #52]	; (8000aac <MX_TIM3_Init+0xf0>)
 8000a78:	f004 fea6 	bl	80057c8 <HAL_TIM_PWM_ConfigChannel>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8000a82:	f000 fb75 	bl	8001170 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a86:	463b      	mov	r3, r7
 8000a88:	220c      	movs	r2, #12
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4807      	ldr	r0, [pc, #28]	; (8000aac <MX_TIM3_Init+0xf0>)
 8000a8e:	f004 fe9b 	bl	80057c8 <HAL_TIM_PWM_ConfigChannel>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8000a98:	f000 fb6a 	bl	8001170 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a9c:	4803      	ldr	r0, [pc, #12]	; (8000aac <MX_TIM3_Init+0xf0>)
 8000a9e:	f001 f905 	bl	8001cac <HAL_TIM_MspPostInit>

}
 8000aa2:	bf00      	nop
 8000aa4:	3728      	adds	r7, #40	; 0x28
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	200002b8 	.word	0x200002b8
 8000ab0:	40000400 	.word	0x40000400

08000ab4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b08c      	sub	sp, #48	; 0x30
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000aba:	f107 030c 	add.w	r3, r7, #12
 8000abe:	2224      	movs	r2, #36	; 0x24
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f006 ff4a 	bl	800795c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ac8:	463b      	mov	r3, r7
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ad2:	4b21      	ldr	r3, [pc, #132]	; (8000b58 <MX_TIM4_Init+0xa4>)
 8000ad4:	4a21      	ldr	r2, [pc, #132]	; (8000b5c <MX_TIM4_Init+0xa8>)
 8000ad6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000ad8:	4b1f      	ldr	r3, [pc, #124]	; (8000b58 <MX_TIM4_Init+0xa4>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ade:	4b1e      	ldr	r3, [pc, #120]	; (8000b58 <MX_TIM4_Init+0xa4>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000ae4:	4b1c      	ldr	r3, [pc, #112]	; (8000b58 <MX_TIM4_Init+0xa4>)
 8000ae6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000aea:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aec:	4b1a      	ldr	r3, [pc, #104]	; (8000b58 <MX_TIM4_Init+0xa4>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000af2:	4b19      	ldr	r3, [pc, #100]	; (8000b58 <MX_TIM4_Init+0xa4>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000af8:	2301      	movs	r3, #1
 8000afa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000afc:	2300      	movs	r3, #0
 8000afe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b00:	2301      	movs	r3, #1
 8000b02:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b04:	2300      	movs	r3, #0
 8000b06:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b10:	2301      	movs	r3, #1
 8000b12:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b14:	2300      	movs	r3, #0
 8000b16:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000b1c:	f107 030c 	add.w	r3, r7, #12
 8000b20:	4619      	mov	r1, r3
 8000b22:	480d      	ldr	r0, [pc, #52]	; (8000b58 <MX_TIM4_Init+0xa4>)
 8000b24:	f004 fbcc 	bl	80052c0 <HAL_TIM_Encoder_Init>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000b2e:	f000 fb1f 	bl	8001170 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b32:	2300      	movs	r3, #0
 8000b34:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b36:	2300      	movs	r3, #0
 8000b38:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b3a:	463b      	mov	r3, r7
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4806      	ldr	r0, [pc, #24]	; (8000b58 <MX_TIM4_Init+0xa4>)
 8000b40:	f005 fb78 	bl	8006234 <HAL_TIMEx_MasterConfigSynchronization>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000b4a:	f000 fb11 	bl	8001170 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000b4e:	bf00      	nop
 8000b50:	3730      	adds	r7, #48	; 0x30
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000304 	.word	0x20000304
 8000b5c:	40000800 	.word	0x40000800

08000b60 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b66:	1d3b      	adds	r3, r7, #4
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000b70:	4b14      	ldr	r3, [pc, #80]	; (8000bc4 <MX_TIM6_Init+0x64>)
 8000b72:	4a15      	ldr	r2, [pc, #84]	; (8000bc8 <MX_TIM6_Init+0x68>)
 8000b74:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 15;
 8000b76:	4b13      	ldr	r3, [pc, #76]	; (8000bc4 <MX_TIM6_Init+0x64>)
 8000b78:	220f      	movs	r2, #15
 8000b7a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b7c:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <MX_TIM6_Init+0x64>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8000b82:	4b10      	ldr	r3, [pc, #64]	; (8000bc4 <MX_TIM6_Init+0x64>)
 8000b84:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b88:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <MX_TIM6_Init+0x64>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000b90:	480c      	ldr	r0, [pc, #48]	; (8000bc4 <MX_TIM6_Init+0x64>)
 8000b92:	f004 f969 	bl	8004e68 <HAL_TIM_Base_Init>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000b9c:	f000 fae8 	bl	8001170 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000ba8:	1d3b      	adds	r3, r7, #4
 8000baa:	4619      	mov	r1, r3
 8000bac:	4805      	ldr	r0, [pc, #20]	; (8000bc4 <MX_TIM6_Init+0x64>)
 8000bae:	f005 fb41 	bl	8006234 <HAL_TIMEx_MasterConfigSynchronization>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000bb8:	f000 fada 	bl	8001170 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000bbc:	bf00      	nop
 8000bbe:	3710      	adds	r7, #16
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20000350 	.word	0x20000350
 8000bc8:	40001000 	.word	0x40001000

08000bcc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b08c      	sub	sp, #48	; 0x30
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000bd2:	f107 030c 	add.w	r3, r7, #12
 8000bd6:	2224      	movs	r2, #36	; 0x24
 8000bd8:	2100      	movs	r1, #0
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f006 febe 	bl	800795c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000be0:	463b      	mov	r3, r7
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000bea:	4b23      	ldr	r3, [pc, #140]	; (8000c78 <MX_TIM8_Init+0xac>)
 8000bec:	4a23      	ldr	r2, [pc, #140]	; (8000c7c <MX_TIM8_Init+0xb0>)
 8000bee:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000bf0:	4b21      	ldr	r3, [pc, #132]	; (8000c78 <MX_TIM8_Init+0xac>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf6:	4b20      	ldr	r3, [pc, #128]	; (8000c78 <MX_TIM8_Init+0xac>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000bfc:	4b1e      	ldr	r3, [pc, #120]	; (8000c78 <MX_TIM8_Init+0xac>)
 8000bfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c02:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c04:	4b1c      	ldr	r3, [pc, #112]	; (8000c78 <MX_TIM8_Init+0xac>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000c0a:	4b1b      	ldr	r3, [pc, #108]	; (8000c78 <MX_TIM8_Init+0xac>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c10:	4b19      	ldr	r3, [pc, #100]	; (8000c78 <MX_TIM8_Init+0xac>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000c16:	2303      	movs	r3, #3
 8000c18:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c32:	2300      	movs	r3, #0
 8000c34:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8000c3a:	f107 030c 	add.w	r3, r7, #12
 8000c3e:	4619      	mov	r1, r3
 8000c40:	480d      	ldr	r0, [pc, #52]	; (8000c78 <MX_TIM8_Init+0xac>)
 8000c42:	f004 fb3d 	bl	80052c0 <HAL_TIM_Encoder_Init>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8000c4c:	f000 fa90 	bl	8001170 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c50:	2300      	movs	r3, #0
 8000c52:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c54:	2300      	movs	r3, #0
 8000c56:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000c5c:	463b      	mov	r3, r7
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4805      	ldr	r0, [pc, #20]	; (8000c78 <MX_TIM8_Init+0xac>)
 8000c62:	f005 fae7 	bl	8006234 <HAL_TIMEx_MasterConfigSynchronization>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8000c6c:	f000 fa80 	bl	8001170 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000c70:	bf00      	nop
 8000c72:	3730      	adds	r7, #48	; 0x30
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	2000039c 	.word	0x2000039c
 8000c7c:	40013400 	.word	0x40013400

08000c80 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b098      	sub	sp, #96	; 0x60
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c86:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	605a      	str	r2, [r3, #4]
 8000c90:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c92:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	609a      	str	r2, [r3, #8]
 8000c9e:	60da      	str	r2, [r3, #12]
 8000ca0:	611a      	str	r2, [r3, #16]
 8000ca2:	615a      	str	r2, [r3, #20]
 8000ca4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ca6:	1d3b      	adds	r3, r7, #4
 8000ca8:	2234      	movs	r2, #52	; 0x34
 8000caa:	2100      	movs	r1, #0
 8000cac:	4618      	mov	r0, r3
 8000cae:	f006 fe55 	bl	800795c <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000cb2:	4b3a      	ldr	r3, [pc, #232]	; (8000d9c <MX_TIM15_Init+0x11c>)
 8000cb4:	4a3a      	ldr	r2, [pc, #232]	; (8000da0 <MX_TIM15_Init+0x120>)
 8000cb6:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 15;
 8000cb8:	4b38      	ldr	r3, [pc, #224]	; (8000d9c <MX_TIM15_Init+0x11c>)
 8000cba:	220f      	movs	r2, #15
 8000cbc:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cbe:	4b37      	ldr	r3, [pc, #220]	; (8000d9c <MX_TIM15_Init+0x11c>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 19999;
 8000cc4:	4b35      	ldr	r3, [pc, #212]	; (8000d9c <MX_TIM15_Init+0x11c>)
 8000cc6:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000cca:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ccc:	4b33      	ldr	r3, [pc, #204]	; (8000d9c <MX_TIM15_Init+0x11c>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000cd2:	4b32      	ldr	r3, [pc, #200]	; (8000d9c <MX_TIM15_Init+0x11c>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cd8:	4b30      	ldr	r3, [pc, #192]	; (8000d9c <MX_TIM15_Init+0x11c>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000cde:	482f      	ldr	r0, [pc, #188]	; (8000d9c <MX_TIM15_Init+0x11c>)
 8000ce0:	f004 f98a 	bl	8004ff8 <HAL_TIM_PWM_Init>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8000cea:	f000 fa41 	bl	8001170 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000cf6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4827      	ldr	r0, [pc, #156]	; (8000d9c <MX_TIM15_Init+0x11c>)
 8000cfe:	f005 fa99 	bl	8006234 <HAL_TIMEx_MasterConfigSynchronization>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8000d08:	f000 fa32 	bl	8001170 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d0c:	2360      	movs	r3, #96	; 0x60
 8000d0e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d14:	2300      	movs	r3, #0
 8000d16:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d20:	2300      	movs	r3, #0
 8000d22:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d24:	2300      	movs	r3, #0
 8000d26:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d28:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4619      	mov	r1, r3
 8000d30:	481a      	ldr	r0, [pc, #104]	; (8000d9c <MX_TIM15_Init+0x11c>)
 8000d32:	f004 fd49 	bl	80057c8 <HAL_TIM_PWM_ConfigChannel>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8000d3c:	f000 fa18 	bl	8001170 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d40:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d44:	2204      	movs	r2, #4
 8000d46:	4619      	mov	r1, r3
 8000d48:	4814      	ldr	r0, [pc, #80]	; (8000d9c <MX_TIM15_Init+0x11c>)
 8000d4a:	f004 fd3d 	bl	80057c8 <HAL_TIM_PWM_ConfigChannel>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8000d54:	f000 fa0c 	bl	8001170 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d60:	2300      	movs	r3, #0
 8000d62:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d64:	2300      	movs	r3, #0
 8000d66:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d70:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d72:	2300      	movs	r3, #0
 8000d74:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d76:	2300      	movs	r3, #0
 8000d78:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000d7a:	1d3b      	adds	r3, r7, #4
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4807      	ldr	r0, [pc, #28]	; (8000d9c <MX_TIM15_Init+0x11c>)
 8000d80:	f005 fae6 	bl	8006350 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8000d8a:	f000 f9f1 	bl	8001170 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000d8e:	4803      	ldr	r0, [pc, #12]	; (8000d9c <MX_TIM15_Init+0x11c>)
 8000d90:	f000 ff8c 	bl	8001cac <HAL_TIM_MspPostInit>

}
 8000d94:	bf00      	nop
 8000d96:	3760      	adds	r7, #96	; 0x60
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	200003e8 	.word	0x200003e8
 8000da0:	40014000 	.word	0x40014000

08000da4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000da8:	4b0f      	ldr	r3, [pc, #60]	; (8000de8 <MX_TIM16_Init+0x44>)
 8000daa:	4a10      	ldr	r2, [pc, #64]	; (8000dec <MX_TIM16_Init+0x48>)
 8000dac:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000dae:	4b0e      	ldr	r3, [pc, #56]	; (8000de8 <MX_TIM16_Init+0x44>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db4:	4b0c      	ldr	r3, [pc, #48]	; (8000de8 <MX_TIM16_Init+0x44>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000dba:	4b0b      	ldr	r3, [pc, #44]	; (8000de8 <MX_TIM16_Init+0x44>)
 8000dbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dc0:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dc2:	4b09      	ldr	r3, [pc, #36]	; (8000de8 <MX_TIM16_Init+0x44>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000dc8:	4b07      	ldr	r3, [pc, #28]	; (8000de8 <MX_TIM16_Init+0x44>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dce:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <MX_TIM16_Init+0x44>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000dd4:	4804      	ldr	r0, [pc, #16]	; (8000de8 <MX_TIM16_Init+0x44>)
 8000dd6:	f004 f847 	bl	8004e68 <HAL_TIM_Base_Init>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8000de0:	f000 f9c6 	bl	8001170 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000de4:	bf00      	nop
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	20000434 	.word	0x20000434
 8000dec:	40014400 	.word	0x40014400

08000df0 <MX_TIM20_Init>:
  * @brief TIM20 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM20_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b08c      	sub	sp, #48	; 0x30
 8000df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000df6:	f107 030c 	add.w	r3, r7, #12
 8000dfa:	2224      	movs	r2, #36	; 0x24
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f006 fdac 	bl	800795c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e04:	463b      	mov	r3, r7
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	605a      	str	r2, [r3, #4]
 8000e0c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 8000e0e:	4b23      	ldr	r3, [pc, #140]	; (8000e9c <MX_TIM20_Init+0xac>)
 8000e10:	4a23      	ldr	r2, [pc, #140]	; (8000ea0 <MX_TIM20_Init+0xb0>)
 8000e12:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 0;
 8000e14:	4b21      	ldr	r3, [pc, #132]	; (8000e9c <MX_TIM20_Init+0xac>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e1a:	4b20      	ldr	r3, [pc, #128]	; (8000e9c <MX_TIM20_Init+0xac>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 65535;
 8000e20:	4b1e      	ldr	r3, [pc, #120]	; (8000e9c <MX_TIM20_Init+0xac>)
 8000e22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e26:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e28:	4b1c      	ldr	r3, [pc, #112]	; (8000e9c <MX_TIM20_Init+0xac>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 8000e2e:	4b1b      	ldr	r3, [pc, #108]	; (8000e9c <MX_TIM20_Init+0xac>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e34:	4b19      	ldr	r3, [pc, #100]	; (8000e9c <MX_TIM20_Init+0xac>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e42:	2301      	movs	r3, #1
 8000e44:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e46:	2300      	movs	r3, #0
 8000e48:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e52:	2301      	movs	r3, #1
 8000e54:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e56:	2300      	movs	r3, #0
 8000e58:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim20, &sConfig) != HAL_OK)
 8000e5e:	f107 030c 	add.w	r3, r7, #12
 8000e62:	4619      	mov	r1, r3
 8000e64:	480d      	ldr	r0, [pc, #52]	; (8000e9c <MX_TIM20_Init+0xac>)
 8000e66:	f004 fa2b 	bl	80052c0 <HAL_TIM_Encoder_Init>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_TIM20_Init+0x84>
  {
    Error_Handler();
 8000e70:	f000 f97e 	bl	8001170 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e74:	2300      	movs	r3, #0
 8000e76:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8000e80:	463b      	mov	r3, r7
 8000e82:	4619      	mov	r1, r3
 8000e84:	4805      	ldr	r0, [pc, #20]	; (8000e9c <MX_TIM20_Init+0xac>)
 8000e86:	f005 f9d5 	bl	8006234 <HAL_TIMEx_MasterConfigSynchronization>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_TIM20_Init+0xa4>
  {
    Error_Handler();
 8000e90:	f000 f96e 	bl	8001170 <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */

}
 8000e94:	bf00      	nop
 8000e96:	3730      	adds	r7, #48	; 0x30
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	20000480 	.word	0x20000480
 8000ea0:	40015000 	.word	0x40015000

08000ea4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000ea8:	4b22      	ldr	r3, [pc, #136]	; (8000f34 <MX_UART4_Init+0x90>)
 8000eaa:	4a23      	ldr	r2, [pc, #140]	; (8000f38 <MX_UART4_Init+0x94>)
 8000eac:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000eae:	4b21      	ldr	r3, [pc, #132]	; (8000f34 <MX_UART4_Init+0x90>)
 8000eb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000eb4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000eb6:	4b1f      	ldr	r3, [pc, #124]	; (8000f34 <MX_UART4_Init+0x90>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000ebc:	4b1d      	ldr	r3, [pc, #116]	; (8000f34 <MX_UART4_Init+0x90>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000ec2:	4b1c      	ldr	r3, [pc, #112]	; (8000f34 <MX_UART4_Init+0x90>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000ec8:	4b1a      	ldr	r3, [pc, #104]	; (8000f34 <MX_UART4_Init+0x90>)
 8000eca:	220c      	movs	r2, #12
 8000ecc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ece:	4b19      	ldr	r3, [pc, #100]	; (8000f34 <MX_UART4_Init+0x90>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ed4:	4b17      	ldr	r3, [pc, #92]	; (8000f34 <MX_UART4_Init+0x90>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eda:	4b16      	ldr	r3, [pc, #88]	; (8000f34 <MX_UART4_Init+0x90>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ee0:	4b14      	ldr	r3, [pc, #80]	; (8000f34 <MX_UART4_Init+0x90>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ee6:	4b13      	ldr	r3, [pc, #76]	; (8000f34 <MX_UART4_Init+0x90>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000eec:	4811      	ldr	r0, [pc, #68]	; (8000f34 <MX_UART4_Init+0x90>)
 8000eee:	f005 fb09 	bl	8006504 <HAL_UART_Init>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000ef8:	f000 f93a 	bl	8001170 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000efc:	2100      	movs	r1, #0
 8000efe:	480d      	ldr	r0, [pc, #52]	; (8000f34 <MX_UART4_Init+0x90>)
 8000f00:	f006 fc3d 	bl	800777e <HAL_UARTEx_SetTxFifoThreshold>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000f0a:	f000 f931 	bl	8001170 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f0e:	2100      	movs	r1, #0
 8000f10:	4808      	ldr	r0, [pc, #32]	; (8000f34 <MX_UART4_Init+0x90>)
 8000f12:	f006 fc72 	bl	80077fa <HAL_UARTEx_SetRxFifoThreshold>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000f1c:	f000 f928 	bl	8001170 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000f20:	4804      	ldr	r0, [pc, #16]	; (8000f34 <MX_UART4_Init+0x90>)
 8000f22:	f006 fbf3 	bl	800770c <HAL_UARTEx_DisableFifoMode>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000f2c:	f000 f920 	bl	8001170 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	200004cc 	.word	0x200004cc
 8000f38:	40004c00 	.word	0x40004c00

08000f3c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000f40:	4b22      	ldr	r3, [pc, #136]	; (8000fcc <MX_UART5_Init+0x90>)
 8000f42:	4a23      	ldr	r2, [pc, #140]	; (8000fd0 <MX_UART5_Init+0x94>)
 8000f44:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8000f46:	4b21      	ldr	r3, [pc, #132]	; (8000fcc <MX_UART5_Init+0x90>)
 8000f48:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f4c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000f4e:	4b1f      	ldr	r3, [pc, #124]	; (8000fcc <MX_UART5_Init+0x90>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000f54:	4b1d      	ldr	r3, [pc, #116]	; (8000fcc <MX_UART5_Init+0x90>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000f5a:	4b1c      	ldr	r3, [pc, #112]	; (8000fcc <MX_UART5_Init+0x90>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000f60:	4b1a      	ldr	r3, [pc, #104]	; (8000fcc <MX_UART5_Init+0x90>)
 8000f62:	220c      	movs	r2, #12
 8000f64:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f66:	4b19      	ldr	r3, [pc, #100]	; (8000fcc <MX_UART5_Init+0x90>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f6c:	4b17      	ldr	r3, [pc, #92]	; (8000fcc <MX_UART5_Init+0x90>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f72:	4b16      	ldr	r3, [pc, #88]	; (8000fcc <MX_UART5_Init+0x90>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f78:	4b14      	ldr	r3, [pc, #80]	; (8000fcc <MX_UART5_Init+0x90>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f7e:	4b13      	ldr	r3, [pc, #76]	; (8000fcc <MX_UART5_Init+0x90>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000f84:	4811      	ldr	r0, [pc, #68]	; (8000fcc <MX_UART5_Init+0x90>)
 8000f86:	f005 fabd 	bl	8006504 <HAL_UART_Init>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8000f90:	f000 f8ee 	bl	8001170 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f94:	2100      	movs	r1, #0
 8000f96:	480d      	ldr	r0, [pc, #52]	; (8000fcc <MX_UART5_Init+0x90>)
 8000f98:	f006 fbf1 	bl	800777e <HAL_UARTEx_SetTxFifoThreshold>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8000fa2:	f000 f8e5 	bl	8001170 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	4808      	ldr	r0, [pc, #32]	; (8000fcc <MX_UART5_Init+0x90>)
 8000faa:	f006 fc26 	bl	80077fa <HAL_UARTEx_SetRxFifoThreshold>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8000fb4:	f000 f8dc 	bl	8001170 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8000fb8:	4804      	ldr	r0, [pc, #16]	; (8000fcc <MX_UART5_Init+0x90>)
 8000fba:	f006 fba7 	bl	800770c <HAL_UARTEx_DisableFifoMode>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8000fc4:	f000 f8d4 	bl	8001170 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	20000560 	.word	0x20000560
 8000fd0:	40005000 	.word	0x40005000

08000fd4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000fd8:	4b22      	ldr	r3, [pc, #136]	; (8001064 <MX_USART3_UART_Init+0x90>)
 8000fda:	4a23      	ldr	r2, [pc, #140]	; (8001068 <MX_USART3_UART_Init+0x94>)
 8000fdc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 500000;
 8000fde:	4b21      	ldr	r3, [pc, #132]	; (8001064 <MX_USART3_UART_Init+0x90>)
 8000fe0:	4a22      	ldr	r2, [pc, #136]	; (800106c <MX_USART3_UART_Init+0x98>)
 8000fe2:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000fe4:	4b1f      	ldr	r3, [pc, #124]	; (8001064 <MX_USART3_UART_Init+0x90>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000fea:	4b1e      	ldr	r3, [pc, #120]	; (8001064 <MX_USART3_UART_Init+0x90>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ff0:	4b1c      	ldr	r3, [pc, #112]	; (8001064 <MX_USART3_UART_Init+0x90>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ff6:	4b1b      	ldr	r3, [pc, #108]	; (8001064 <MX_USART3_UART_Init+0x90>)
 8000ff8:	220c      	movs	r2, #12
 8000ffa:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ffc:	4b19      	ldr	r3, [pc, #100]	; (8001064 <MX_USART3_UART_Init+0x90>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001002:	4b18      	ldr	r3, [pc, #96]	; (8001064 <MX_USART3_UART_Init+0x90>)
 8001004:	2200      	movs	r2, #0
 8001006:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001008:	4b16      	ldr	r3, [pc, #88]	; (8001064 <MX_USART3_UART_Init+0x90>)
 800100a:	2200      	movs	r2, #0
 800100c:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800100e:	4b15      	ldr	r3, [pc, #84]	; (8001064 <MX_USART3_UART_Init+0x90>)
 8001010:	2200      	movs	r2, #0
 8001012:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001014:	4b13      	ldr	r3, [pc, #76]	; (8001064 <MX_USART3_UART_Init+0x90>)
 8001016:	2200      	movs	r2, #0
 8001018:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800101a:	4812      	ldr	r0, [pc, #72]	; (8001064 <MX_USART3_UART_Init+0x90>)
 800101c:	f005 fa72 	bl	8006504 <HAL_UART_Init>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8001026:	f000 f8a3 	bl	8001170 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800102a:	2100      	movs	r1, #0
 800102c:	480d      	ldr	r0, [pc, #52]	; (8001064 <MX_USART3_UART_Init+0x90>)
 800102e:	f006 fba6 	bl	800777e <HAL_UARTEx_SetTxFifoThreshold>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8001038:	f000 f89a 	bl	8001170 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800103c:	2100      	movs	r1, #0
 800103e:	4809      	ldr	r0, [pc, #36]	; (8001064 <MX_USART3_UART_Init+0x90>)
 8001040:	f006 fbdb 	bl	80077fa <HAL_UARTEx_SetRxFifoThreshold>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 800104a:	f000 f891 	bl	8001170 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800104e:	4805      	ldr	r0, [pc, #20]	; (8001064 <MX_USART3_UART_Init+0x90>)
 8001050:	f006 fb5c 	bl	800770c <HAL_UARTEx_DisableFifoMode>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 800105a:	f000 f889 	bl	8001170 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	200005f4 	.word	0x200005f4
 8001068:	40004800 	.word	0x40004800
 800106c:	0007a120 	.word	0x0007a120

08001070 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001076:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <MX_DMA_Init+0x50>)
 8001078:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800107a:	4a11      	ldr	r2, [pc, #68]	; (80010c0 <MX_DMA_Init+0x50>)
 800107c:	f043 0304 	orr.w	r3, r3, #4
 8001080:	6493      	str	r3, [r2, #72]	; 0x48
 8001082:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <MX_DMA_Init+0x50>)
 8001084:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001086:	f003 0304 	and.w	r3, r3, #4
 800108a:	607b      	str	r3, [r7, #4]
 800108c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800108e:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <MX_DMA_Init+0x50>)
 8001090:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001092:	4a0b      	ldr	r2, [pc, #44]	; (80010c0 <MX_DMA_Init+0x50>)
 8001094:	f043 0301 	orr.w	r3, r3, #1
 8001098:	6493      	str	r3, [r2, #72]	; 0x48
 800109a:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <MX_DMA_Init+0x50>)
 800109c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	603b      	str	r3, [r7, #0]
 80010a4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80010a6:	2200      	movs	r2, #0
 80010a8:	2100      	movs	r1, #0
 80010aa:	200d      	movs	r0, #13
 80010ac:	f002 fa85 	bl	80035ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80010b0:	200d      	movs	r0, #13
 80010b2:	f002 fa9c 	bl	80035ee <HAL_NVIC_EnableIRQ>

}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40021000 	.word	0x40021000

080010c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b08a      	sub	sp, #40	; 0x28
 80010c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ca:	f107 0314 	add.w	r3, r7, #20
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	605a      	str	r2, [r3, #4]
 80010d4:	609a      	str	r2, [r3, #8]
 80010d6:	60da      	str	r2, [r3, #12]
 80010d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010da:	4b23      	ldr	r3, [pc, #140]	; (8001168 <MX_GPIO_Init+0xa4>)
 80010dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010de:	4a22      	ldr	r2, [pc, #136]	; (8001168 <MX_GPIO_Init+0xa4>)
 80010e0:	f043 0304 	orr.w	r3, r3, #4
 80010e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010e6:	4b20      	ldr	r3, [pc, #128]	; (8001168 <MX_GPIO_Init+0xa4>)
 80010e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ea:	f003 0304 	and.w	r3, r3, #4
 80010ee:	613b      	str	r3, [r7, #16]
 80010f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f2:	4b1d      	ldr	r3, [pc, #116]	; (8001168 <MX_GPIO_Init+0xa4>)
 80010f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f6:	4a1c      	ldr	r2, [pc, #112]	; (8001168 <MX_GPIO_Init+0xa4>)
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010fe:	4b1a      	ldr	r3, [pc, #104]	; (8001168 <MX_GPIO_Init+0xa4>)
 8001100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800110a:	4b17      	ldr	r3, [pc, #92]	; (8001168 <MX_GPIO_Init+0xa4>)
 800110c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110e:	4a16      	ldr	r2, [pc, #88]	; (8001168 <MX_GPIO_Init+0xa4>)
 8001110:	f043 0302 	orr.w	r3, r3, #2
 8001114:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001116:	4b14      	ldr	r3, [pc, #80]	; (8001168 <MX_GPIO_Init+0xa4>)
 8001118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111a:	f003 0302 	and.w	r3, r3, #2
 800111e:	60bb      	str	r3, [r7, #8]
 8001120:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001122:	4b11      	ldr	r3, [pc, #68]	; (8001168 <MX_GPIO_Init+0xa4>)
 8001124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001126:	4a10      	ldr	r2, [pc, #64]	; (8001168 <MX_GPIO_Init+0xa4>)
 8001128:	f043 0308 	orr.w	r3, r3, #8
 800112c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800112e:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <MX_GPIO_Init+0xa4>)
 8001130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001132:	f003 0308 	and.w	r3, r3, #8
 8001136:	607b      	str	r3, [r7, #4]
 8001138:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800113a:	2200      	movs	r2, #0
 800113c:	21e0      	movs	r1, #224	; 0xe0
 800113e:	480b      	ldr	r0, [pc, #44]	; (800116c <MX_GPIO_Init+0xa8>)
 8001140:	f002 fe6c 	bl	8003e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001144:	23e0      	movs	r3, #224	; 0xe0
 8001146:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001148:	2301      	movs	r3, #1
 800114a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001150:	2300      	movs	r3, #0
 8001152:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	4619      	mov	r1, r3
 800115a:	4804      	ldr	r0, [pc, #16]	; (800116c <MX_GPIO_Init+0xa8>)
 800115c:	f002 fcdc 	bl	8003b18 <HAL_GPIO_Init>

}
 8001160:	bf00      	nop
 8001162:	3728      	adds	r7, #40	; 0x28
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40021000 	.word	0x40021000
 800116c:	48000400 	.word	0x48000400

08001170 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001174:	b672      	cpsid	i
}
 8001176:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001178:	e7fe      	b.n	8001178 <Error_Handler+0x8>

0800117a <main_function>:
float sp[2];
int tx = 0, rx = 0;
float speed1, speed2;
uint8_t buffer_RX[2 * sizeof(float)];
bool state [5];
void main_function(){
 800117a:	b480      	push	{r7}
 800117c:	af00      	add	r7, sp, #0
	//servo_setup();
	//motor_setup();
	//while(1){
	//path(sp);
	//}
}
 800117e:	bf00      	nop
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <setup>:
void setup(){
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
	DCmotor_setup();
 800118c:	f000 f848 	bl	8001220 <_Z13DCmotor_setupv>
	servo_setup();
 8001190:	f000 fa4e 	bl	8001630 <_Z11servo_setupv>
	HAL_TIM_Base_Start_IT(&htim6);
 8001194:	4802      	ldr	r0, [pc, #8]	; (80011a0 <setup+0x18>)
 8001196:	f003 febf 	bl	8004f18 <HAL_TIM_Base_Start_IT>
}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000350 	.word	0x20000350

080011a4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]

	if(huart -> Instance == UART5)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a06      	ldr	r2, [pc, #24]	; (80011cc <HAL_UART_TxCpltCallback+0x28>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d104      	bne.n	80011c0 <HAL_UART_TxCpltCallback+0x1c>
        tx++;
 80011b6:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <HAL_UART_TxCpltCallback+0x2c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	3301      	adds	r3, #1
 80011bc:	4a04      	ldr	r2, [pc, #16]	; (80011d0 <HAL_UART_TxCpltCallback+0x2c>)
 80011be:	6013      	str	r3, [r2, #0]

}
 80011c0:	bf00      	nop
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	40005000 	.word	0x40005000
 80011d0:	20000688 	.word	0x20000688

080011d4 <HAL_TIM_PeriodElapsedCallback>:

		rx++;
	}
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef*htim){
 80011d4:	b5b0      	push	{r4, r5, r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af02      	add	r7, sp, #8
 80011da:	6078      	str	r0, [r7, #4]

	if (htim -> Instance == TIM6){
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a0d      	ldr	r2, [pc, #52]	; (8001218 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d113      	bne.n	800120e <HAL_TIM_PeriodElapsedCallback+0x3a>

		//timer++;
		//UART_Transmit_Two_Floats_DMA(&huart5,sp[0],sp[1]);
		blockState(state[0],state[1],state[2],state[3],state[4],state[5]);/////git add
 80011e6:	4b0d      	ldr	r3, [pc, #52]	; (800121c <HAL_TIM_PeriodElapsedCallback+0x48>)
 80011e8:	7818      	ldrb	r0, [r3, #0]
 80011ea:	4b0c      	ldr	r3, [pc, #48]	; (800121c <HAL_TIM_PeriodElapsedCallback+0x48>)
 80011ec:	7859      	ldrb	r1, [r3, #1]
 80011ee:	4b0b      	ldr	r3, [pc, #44]	; (800121c <HAL_TIM_PeriodElapsedCallback+0x48>)
 80011f0:	789c      	ldrb	r4, [r3, #2]
 80011f2:	4b0a      	ldr	r3, [pc, #40]	; (800121c <HAL_TIM_PeriodElapsedCallback+0x48>)
 80011f4:	78dd      	ldrb	r5, [r3, #3]
 80011f6:	4b09      	ldr	r3, [pc, #36]	; (800121c <HAL_TIM_PeriodElapsedCallback+0x48>)
 80011f8:	791b      	ldrb	r3, [r3, #4]
 80011fa:	4a08      	ldr	r2, [pc, #32]	; (800121c <HAL_TIM_PeriodElapsedCallback+0x48>)
 80011fc:	7952      	ldrb	r2, [r2, #5]
 80011fe:	9201      	str	r2, [sp, #4]
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	462b      	mov	r3, r5
 8001204:	4622      	mov	r2, r4
 8001206:	f000 fa3f 	bl	8001688 <_Z10blockStatebbbbbb>
		DCmotor_run();
 800120a:	f000 f965 	bl	80014d8 <_Z11DCmotor_runv>
		//arm_run();

	}
}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bdb0      	pop	{r4, r5, r7, pc}
 8001216:	bf00      	nop
 8001218:	40001000 	.word	0x40001000
 800121c:	2000068c 	.word	0x2000068c

08001220 <_Z13DCmotor_setupv>:
extern TIM_HandleTypeDef htim15;
extern TIM_HandleTypeDef htim20;
extern UART_HandleTypeDef huart1;


void DCmotor_setup(){
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_2);//motor[1]
 8001224:	2104      	movs	r1, #4
 8001226:	4814      	ldr	r0, [pc, #80]	; (8001278 <_Z13DCmotor_setupv+0x58>)
 8001228:	f004 f8f0 	bl	800540c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1);
 800122c:	2100      	movs	r1, #0
 800122e:	4812      	ldr	r0, [pc, #72]	; (8001278 <_Z13DCmotor_setupv+0x58>)
 8001230:	f004 f8ec 	bl	800540c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_2);//motor[2]
 8001234:	2104      	movs	r1, #4
 8001236:	4811      	ldr	r0, [pc, #68]	; (800127c <_Z13DCmotor_setupv+0x5c>)
 8001238:	f004 f8e8 	bl	800540c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_1);
 800123c:	2100      	movs	r1, #0
 800123e:	480f      	ldr	r0, [pc, #60]	; (800127c <_Z13DCmotor_setupv+0x5c>)
 8001240:	f004 f8e4 	bl	800540c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim20, TIM_CHANNEL_2);//motor[3]
 8001244:	2104      	movs	r1, #4
 8001246:	480e      	ldr	r0, [pc, #56]	; (8001280 <_Z13DCmotor_setupv+0x60>)
 8001248:	f004 f8e0 	bl	800540c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim20, TIM_CHANNEL_1);
 800124c:	2100      	movs	r1, #0
 800124e:	480c      	ldr	r0, [pc, #48]	; (8001280 <_Z13DCmotor_setupv+0x60>)
 8001250:	f004 f8dc 	bl	800540c <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001254:	2100      	movs	r1, #0
 8001256:	480b      	ldr	r0, [pc, #44]	; (8001284 <_Z13DCmotor_setupv+0x64>)
 8001258:	f003 ff26 	bl	80050a8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800125c:	2104      	movs	r1, #4
 800125e:	4809      	ldr	r0, [pc, #36]	; (8001284 <_Z13DCmotor_setupv+0x64>)
 8001260:	f003 ff22 	bl	80050a8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001264:	2108      	movs	r1, #8
 8001266:	4807      	ldr	r0, [pc, #28]	; (8001284 <_Z13DCmotor_setupv+0x64>)
 8001268:	f003 ff1e 	bl	80050a8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800126c:	210c      	movs	r1, #12
 800126e:	4805      	ldr	r0, [pc, #20]	; (8001284 <_Z13DCmotor_setupv+0x64>)
 8001270:	f003 ff1a 	bl	80050a8 <HAL_TIM_PWM_Start>

}
 8001274:	bf00      	nop
 8001276:	bd80      	pop	{r7, pc}
 8001278:	2000026c 	.word	0x2000026c
 800127c:	2000039c 	.word	0x2000039c
 8001280:	20000480 	.word	0x20000480
 8001284:	20000220 	.word	0x20000220

08001288 <_Z14PI_control_runP14PID_controllerff>:
    {2, 10, 0, span, arr, GPIOB, GPIO_PIN_7, &htim1, TIM_CHANNEL_3}    // motor_c
};



void PI_control_run(PID_controller* motor, float sp, float speed) {
 8001288:	b580      	push	{r7, lr}
 800128a:	b088      	sub	sp, #32
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	ed87 0a02 	vstr	s0, [r7, #8]
 8001294:	edc7 0a01 	vstr	s1, [r7, #4]
    float error, u_a = 0;
 8001298:	f04f 0300 	mov.w	r3, #0
 800129c:	61fb      	str	r3, [r7, #28]
    int pul = 0;
 800129e:	2300      	movs	r3, #0
 80012a0:	61bb      	str	r3, [r7, #24]
    float bound = 1 / motor->ki;
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	ed93 7a01 	vldr	s14, [r3, #4]
 80012a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80012ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012b0:	edc7 7a05 	vstr	s15, [r7, #20]

    error = sp - speed;
 80012b4:	ed97 7a02 	vldr	s14, [r7, #8]
 80012b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80012bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012c0:	edc7 7a04 	vstr	s15, [r7, #16]
    motor->integral += error * motor->span;
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	ed93 7a02 	vldr	s14, [r3, #8]
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	edd3 6a03 	vldr	s13, [r3, #12]
 80012d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80012d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	edc3 7a02 	vstr	s15, [r3, #8]
    if (motor->integral > bound) motor->integral = bound;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	edd3 7a02 	vldr	s15, [r3, #8]
 80012e8:	ed97 7a05 	vldr	s14, [r7, #20]
 80012ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012f4:	d503      	bpl.n	80012fe <_Z14PI_control_runP14PID_controllerff+0x76>
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	697a      	ldr	r2, [r7, #20]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	e012      	b.n	8001324 <_Z14PI_control_runP14PID_controllerff+0x9c>
    else if (motor->integral < -bound) motor->integral = -bound;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	ed93 7a02 	vldr	s14, [r3, #8]
 8001304:	edd7 7a05 	vldr	s15, [r7, #20]
 8001308:	eef1 7a67 	vneg.f32	s15, s15
 800130c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001314:	d506      	bpl.n	8001324 <_Z14PI_control_runP14PID_controllerff+0x9c>
 8001316:	edd7 7a05 	vldr	s15, [r7, #20]
 800131a:	eef1 7a67 	vneg.f32	s15, s15
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	edc3 7a02 	vstr	s15, [r3, #8]

    u_a = motor->kp * error + motor->ki * motor->integral;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	ed93 7a00 	vldr	s14, [r3]
 800132a:	edd7 7a04 	vldr	s15, [r7, #16]
 800132e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	edd3 6a01 	vldr	s13, [r3, #4]
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	edd3 7a02 	vldr	s15, [r3, #8]
 800133e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001342:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001346:	edc7 7a07 	vstr	s15, [r7, #28]
    if (u_a > 1) u_a = 1;
 800134a:	edd7 7a07 	vldr	s15, [r7, #28]
 800134e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001352:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800135a:	dd03      	ble.n	8001364 <_Z14PI_control_runP14PID_controllerff+0xdc>
 800135c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001360:	61fb      	str	r3, [r7, #28]
 8001362:	e00a      	b.n	800137a <_Z14PI_control_runP14PID_controllerff+0xf2>
    else if (u_a < -1) u_a = -1;
 8001364:	edd7 7a07 	vldr	s15, [r7, #28]
 8001368:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800136c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001374:	d501      	bpl.n	800137a <_Z14PI_control_runP14PID_controllerff+0xf2>
 8001376:	4b3f      	ldr	r3, [pc, #252]	; (8001474 <_Z14PI_control_runP14PID_controllerff+0x1ec>)
 8001378:	61fb      	str	r3, [r7, #28]

    if (u_a > 0) {
 800137a:	edd7 7a07 	vldr	s15, [r7, #28]
 800137e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001386:	dd17      	ble.n	80013b8 <_Z14PI_control_runP14PID_controllerff+0x130>
        pul = (int)(u_a * motor->arr);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	691b      	ldr	r3, [r3, #16]
 800138c:	ee07 3a90 	vmov	s15, r3
 8001390:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001394:	edd7 7a07 	vldr	s15, [r7, #28]
 8001398:	ee67 7a27 	vmul.f32	s15, s14, s15
 800139c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013a0:	ee17 3a90 	vmov	r3, s15
 80013a4:	61bb      	str	r3, [r7, #24]
        HAL_GPIO_WritePin(motor->gpioPort, motor->gpioPin, GPIO_PIN_SET);
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	6958      	ldr	r0, [r3, #20]
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	8b1b      	ldrh	r3, [r3, #24]
 80013ae:	2201      	movs	r2, #1
 80013b0:	4619      	mov	r1, r3
 80013b2:	f002 fd33 	bl	8003e1c <HAL_GPIO_WritePin>
 80013b6:	e022      	b.n	80013fe <_Z14PI_control_runP14PID_controllerff+0x176>
    } else if (u_a < 0) {
 80013b8:	edd7 7a07 	vldr	s15, [r7, #28]
 80013bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c4:	d519      	bpl.n	80013fa <_Z14PI_control_runP14PID_controllerff+0x172>
        pul = (int)(-u_a * motor->arr);
 80013c6:	edd7 7a07 	vldr	s15, [r7, #28]
 80013ca:	eeb1 7a67 	vneg.f32	s14, s15
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	691b      	ldr	r3, [r3, #16]
 80013d2:	ee07 3a90 	vmov	s15, r3
 80013d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013e2:	ee17 3a90 	vmov	r3, s15
 80013e6:	61bb      	str	r3, [r7, #24]
        HAL_GPIO_WritePin(motor->gpioPort, motor->gpioPin, GPIO_PIN_RESET);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	6958      	ldr	r0, [r3, #20]
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	8b1b      	ldrh	r3, [r3, #24]
 80013f0:	2200      	movs	r2, #0
 80013f2:	4619      	mov	r1, r3
 80013f4:	f002 fd12 	bl	8003e1c <HAL_GPIO_WritePin>
 80013f8:	e001      	b.n	80013fe <_Z14PI_control_runP14PID_controllerff+0x176>
    } else {
        pul = 0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	61bb      	str	r3, [r7, #24]
    }
    __HAL_TIM_SET_COMPARE(motor->htim, motor->TIM_CHANNEL, pul);
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	6a1b      	ldr	r3, [r3, #32]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d105      	bne.n	8001412 <_Z14PI_control_runP14PID_controllerff+0x18a>
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	69db      	ldr	r3, [r3, #28]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001410:	e02c      	b.n	800146c <_Z14PI_control_runP14PID_controllerff+0x1e4>
    __HAL_TIM_SET_COMPARE(motor->htim, motor->TIM_CHANNEL, pul);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	6a1b      	ldr	r3, [r3, #32]
 8001416:	2b04      	cmp	r3, #4
 8001418:	d105      	bne.n	8001426 <_Z14PI_control_runP14PID_controllerff+0x19e>
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	69db      	ldr	r3, [r3, #28]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001424:	e022      	b.n	800146c <_Z14PI_control_runP14PID_controllerff+0x1e4>
    __HAL_TIM_SET_COMPARE(motor->htim, motor->TIM_CHANNEL, pul);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	6a1b      	ldr	r3, [r3, #32]
 800142a:	2b08      	cmp	r3, #8
 800142c:	d105      	bne.n	800143a <_Z14PI_control_runP14PID_controllerff+0x1b2>
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	69db      	ldr	r3, [r3, #28]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001438:	e018      	b.n	800146c <_Z14PI_control_runP14PID_controllerff+0x1e4>
    __HAL_TIM_SET_COMPARE(motor->htim, motor->TIM_CHANNEL, pul);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	6a1b      	ldr	r3, [r3, #32]
 800143e:	2b0c      	cmp	r3, #12
 8001440:	d105      	bne.n	800144e <_Z14PI_control_runP14PID_controllerff+0x1c6>
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	69db      	ldr	r3, [r3, #28]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800144c:	e00e      	b.n	800146c <_Z14PI_control_runP14PID_controllerff+0x1e4>
    __HAL_TIM_SET_COMPARE(motor->htim, motor->TIM_CHANNEL, pul);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	6a1b      	ldr	r3, [r3, #32]
 8001452:	2b10      	cmp	r3, #16
 8001454:	d105      	bne.n	8001462 <_Z14PI_control_runP14PID_controllerff+0x1da>
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	69db      	ldr	r3, [r3, #28]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8001460:	e004      	b.n	800146c <_Z14PI_control_runP14PID_controllerff+0x1e4>
    __HAL_TIM_SET_COMPARE(motor->htim, motor->TIM_CHANNEL, pul);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	69db      	ldr	r3, [r3, #28]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800146c:	bf00      	nop
 800146e:	3720      	adds	r7, #32
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	bf800000 	.word	0xbf800000

08001478 <_Z8getSpeedP17TIM_HandleTypeDefPff>:

void getSpeed(TIM_HandleTypeDef *htim,float *speed,float reduction_ratio){
 8001478:	b480      	push	{r7}
 800147a:	b087      	sub	sp, #28
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	ed87 0a01 	vstr	s0, [r7, #4]
	int16_t enc ;
	enc = __HAL_TIM_GetCounter(htim);
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148c:	82fb      	strh	r3, [r7, #22]
	*speed = (float)enc /(4*resolution*reduction_ratio*span);
 800148e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001492:	ee07 3a90 	vmov	s15, r3
 8001496:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800149a:	edd7 7a01 	vldr	s15, [r7, #4]
 800149e:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80014d0 <_Z8getSpeedP17TIM_HandleTypeDefPff+0x58>
 80014a2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014a6:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <_Z8getSpeedP17TIM_HandleTypeDefPff+0x5c>)
 80014a8:	edd3 7a00 	vldr	s15, [r3]
 80014ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	edc3 7a00 	vstr	s15, [r3]
	__HAL_TIM_SetCounter(htim,0);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2200      	movs	r2, #0
 80014c0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80014c2:	bf00      	nop
 80014c4:	371c      	adds	r7, #28
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	45000000 	.word	0x45000000
 80014d4:	20000014 	.word	0x20000014

080014d8 <_Z11DCmotor_runv>:

void DCmotor_run(){
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
	getSpeed(&htim8,&speed[0],20.8);//encoder1
 80014dc:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 800155c <_Z11DCmotor_runv+0x84>
 80014e0:	491f      	ldr	r1, [pc, #124]	; (8001560 <_Z11DCmotor_runv+0x88>)
 80014e2:	4820      	ldr	r0, [pc, #128]	; (8001564 <_Z11DCmotor_runv+0x8c>)
 80014e4:	f7ff ffc8 	bl	8001478 <_Z8getSpeedP17TIM_HandleTypeDefPff>
	getSpeed(&htim2,&speed[1],20.8);//encoder2//left,- when+
 80014e8:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 800155c <_Z11DCmotor_runv+0x84>
 80014ec:	491e      	ldr	r1, [pc, #120]	; (8001568 <_Z11DCmotor_runv+0x90>)
 80014ee:	481f      	ldr	r0, [pc, #124]	; (800156c <_Z11DCmotor_runv+0x94>)
 80014f0:	f7ff ffc2 	bl	8001478 <_Z8getSpeedP17TIM_HandleTypeDefPff>
	getSpeed(&htim20,&speed[2],20.8);//encoder4//right,+ when +
 80014f4:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800155c <_Z11DCmotor_runv+0x84>
 80014f8:	491d      	ldr	r1, [pc, #116]	; (8001570 <_Z11DCmotor_runv+0x98>)
 80014fa:	481e      	ldr	r0, [pc, #120]	; (8001574 <_Z11DCmotor_runv+0x9c>)
 80014fc:	f7ff ffbc 	bl	8001478 <_Z8getSpeedP17TIM_HandleTypeDefPff>
	PI_control_run(&motors[0], Setpoint[0], speed[0]);
 8001500:	4b1d      	ldr	r3, [pc, #116]	; (8001578 <_Z11DCmotor_runv+0xa0>)
 8001502:	edd3 7a00 	vldr	s15, [r3]
 8001506:	4b16      	ldr	r3, [pc, #88]	; (8001560 <_Z11DCmotor_runv+0x88>)
 8001508:	ed93 7a00 	vldr	s14, [r3]
 800150c:	eef0 0a47 	vmov.f32	s1, s14
 8001510:	eeb0 0a67 	vmov.f32	s0, s15
 8001514:	4819      	ldr	r0, [pc, #100]	; (800157c <_Z11DCmotor_runv+0xa4>)
 8001516:	f7ff feb7 	bl	8001288 <_Z14PI_control_runP14PID_controllerff>
	PI_control_run(&motors[1], Setpoint[1], speed[1]);
 800151a:	4b17      	ldr	r3, [pc, #92]	; (8001578 <_Z11DCmotor_runv+0xa0>)
 800151c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001520:	4b0f      	ldr	r3, [pc, #60]	; (8001560 <_Z11DCmotor_runv+0x88>)
 8001522:	ed93 7a01 	vldr	s14, [r3, #4]
 8001526:	eef0 0a47 	vmov.f32	s1, s14
 800152a:	eeb0 0a67 	vmov.f32	s0, s15
 800152e:	4814      	ldr	r0, [pc, #80]	; (8001580 <_Z11DCmotor_runv+0xa8>)
 8001530:	f7ff feaa 	bl	8001288 <_Z14PI_control_runP14PID_controllerff>
	PI_control_run(&motors[2], Setpoint[2], speed[2]);
 8001534:	4b10      	ldr	r3, [pc, #64]	; (8001578 <_Z11DCmotor_runv+0xa0>)
 8001536:	edd3 7a02 	vldr	s15, [r3, #8]
 800153a:	4b09      	ldr	r3, [pc, #36]	; (8001560 <_Z11DCmotor_runv+0x88>)
 800153c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001540:	eef0 0a47 	vmov.f32	s1, s14
 8001544:	eeb0 0a67 	vmov.f32	s0, s15
 8001548:	480e      	ldr	r0, [pc, #56]	; (8001584 <_Z11DCmotor_runv+0xac>)
 800154a:	f7ff fe9d 	bl	8001288 <_Z14PI_control_runP14PID_controllerff>
	timer++;
 800154e:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <_Z11DCmotor_runv+0xb0>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	3301      	adds	r3, #1
 8001554:	4a0c      	ldr	r2, [pc, #48]	; (8001588 <_Z11DCmotor_runv+0xb0>)
 8001556:	6013      	str	r3, [r2, #0]
//        a = 3;
//	}
//	}
		//HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);
		//HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
	}
 8001558:	bf00      	nop
 800155a:	bd80      	pop	{r7, pc}
 800155c:	41a66666 	.word	0x41a66666
 8001560:	20000694 	.word	0x20000694
 8001564:	2000039c 	.word	0x2000039c
 8001568:	20000698 	.word	0x20000698
 800156c:	2000026c 	.word	0x2000026c
 8001570:	2000069c 	.word	0x2000069c
 8001574:	20000480 	.word	0x20000480
 8001578:	200006a4 	.word	0x200006a4
 800157c:	20000018 	.word	0x20000018
 8001580:	2000003c 	.word	0x2000003c
 8001584:	20000060 	.word	0x20000060
 8001588:	200006b4 	.word	0x200006b4

0800158c <_Z41__static_initialization_and_destruction_0ii>:
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2b01      	cmp	r3, #1
 800159a:	d12c      	bne.n	80015f6 <_Z41__static_initialization_and_destruction_0ii+0x6a>
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d127      	bne.n	80015f6 <_Z41__static_initialization_and_destruction_0ii+0x6a>
};
 80015a6:	4b17      	ldr	r3, [pc, #92]	; (8001604 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a17      	ldr	r2, [pc, #92]	; (8001608 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80015ac:	6013      	str	r3, [r2, #0]
 80015ae:	4b17      	ldr	r3, [pc, #92]	; (800160c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a15      	ldr	r2, [pc, #84]	; (8001608 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80015b4:	6053      	str	r3, [r2, #4]
 80015b6:	4b16      	ldr	r3, [pc, #88]	; (8001610 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a13      	ldr	r2, [pc, #76]	; (8001608 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80015bc:	60d3      	str	r3, [r2, #12]
 80015be:	4b15      	ldr	r3, [pc, #84]	; (8001614 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a11      	ldr	r2, [pc, #68]	; (8001608 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80015c4:	6113      	str	r3, [r2, #16]
 80015c6:	4b14      	ldr	r3, [pc, #80]	; (8001618 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a0f      	ldr	r2, [pc, #60]	; (8001608 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80015cc:	6253      	str	r3, [r2, #36]	; 0x24
 80015ce:	4b13      	ldr	r3, [pc, #76]	; (800161c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a0d      	ldr	r2, [pc, #52]	; (8001608 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80015d4:	6293      	str	r3, [r2, #40]	; 0x28
 80015d6:	4b0e      	ldr	r3, [pc, #56]	; (8001610 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a0b      	ldr	r2, [pc, #44]	; (8001608 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80015dc:	6313      	str	r3, [r2, #48]	; 0x30
 80015de:	4b0d      	ldr	r3, [pc, #52]	; (8001614 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a09      	ldr	r2, [pc, #36]	; (8001608 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80015e4:	6353      	str	r3, [r2, #52]	; 0x34
 80015e6:	4b0a      	ldr	r3, [pc, #40]	; (8001610 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a07      	ldr	r2, [pc, #28]	; (8001608 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80015ec:	6553      	str	r3, [r2, #84]	; 0x54
 80015ee:	4b09      	ldr	r3, [pc, #36]	; (8001614 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a05      	ldr	r2, [pc, #20]	; (8001608 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80015f4:	6593      	str	r3, [r2, #88]	; 0x58
	}
 80015f6:	bf00      	nop
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	2000000c 	.word	0x2000000c
 8001608:	20000018 	.word	0x20000018
 800160c:	20000004 	.word	0x20000004
 8001610:	20000014 	.word	0x20000014
 8001614:	20000010 	.word	0x20000010
 8001618:	20000008 	.word	0x20000008
 800161c:	20000000 	.word	0x20000000

08001620 <_GLOBAL__sub_I_enc_a>:
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
 8001624:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001628:	2001      	movs	r0, #1
 800162a:	f7ff ffaf 	bl	800158c <_Z41__static_initialization_and_destruction_0ii>
 800162e:	bd80      	pop	{r7, pc}

08001630 <_Z11servo_setupv>:
servo servo_c{0,0,0,2000,true, &htim3, TIM_CHANNEL_3 };//FL
servo servo_d{0,0,0,2000,true, &htim3, TIM_CHANNEL_4 };//BR
servo servo_e{0,0,0,2000,true, &htim15, TIM_CHANNEL_1 };//BM
servo servo_f{0,0,0,2000,true, &htim15, TIM_CHANNEL_2 };//BL
//servo servo_a{0,0,0,2000,true, &htim3, TIM_CHANNEL_1 };
void servo_setup(){
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001634:	2100      	movs	r1, #0
 8001636:	4808      	ldr	r0, [pc, #32]	; (8001658 <_Z11servo_setupv+0x28>)
 8001638:	f003 fd36 	bl	80050a8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800163c:	2104      	movs	r1, #4
 800163e:	4806      	ldr	r0, [pc, #24]	; (8001658 <_Z11servo_setupv+0x28>)
 8001640:	f003 fd32 	bl	80050a8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001644:	2108      	movs	r1, #8
 8001646:	4804      	ldr	r0, [pc, #16]	; (8001658 <_Z11servo_setupv+0x28>)
 8001648:	f003 fd2e 	bl	80050a8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800164c:	210c      	movs	r1, #12
 800164e:	4802      	ldr	r0, [pc, #8]	; (8001658 <_Z11servo_setupv+0x28>)
 8001650:	f003 fd2a 	bl	80050a8 <HAL_TIM_PWM_Start>
	//HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
	//HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
}
 8001654:	bf00      	nop
 8001656:	bd80      	pop	{r7, pc}
 8001658:	200002b8 	.word	0x200002b8

0800165c <_Z10servo_moveP5servofi>:
void servo_move(servo*servo,float goalAngle,int responseTime){
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	ed87 0a02 	vstr	s0, [r7, #8]
 8001668:	6079      	str	r1, [r7, #4]
	servo -> goalAngle = goalAngle;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	68ba      	ldr	r2, [r7, #8]
 800166e:	605a      	str	r2, [r3, #4]
	servo -> responseTime = responseTime;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	60da      	str	r2, [r3, #12]
	servo -> move = true;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	2201      	movs	r2, #1
 800167a:	741a      	strb	r2, [r3, #16]
}
 800167c:	bf00      	nop
 800167e:	3714      	adds	r7, #20
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <_Z10blockStatebbbbbb>:
         t++;
        }
	}
}

void blockState(bool state_a,bool state_b,bool state_c,bool state_d,bool state_e,bool state_f){
 8001688:	b590      	push	{r4, r7, lr}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	4604      	mov	r4, r0
 8001690:	4608      	mov	r0, r1
 8001692:	4611      	mov	r1, r2
 8001694:	461a      	mov	r2, r3
 8001696:	4623      	mov	r3, r4
 8001698:	71fb      	strb	r3, [r7, #7]
 800169a:	4603      	mov	r3, r0
 800169c:	71bb      	strb	r3, [r7, #6]
 800169e:	460b      	mov	r3, r1
 80016a0:	717b      	strb	r3, [r7, #5]
 80016a2:	4613      	mov	r3, r2
 80016a4:	713b      	strb	r3, [r7, #4]
	//true open ,false close
	if (state_a == true){
 80016a6:	79fb      	ldrb	r3, [r7, #7]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d107      	bne.n	80016bc <_Z10blockStatebbbbbb+0x34>
		servo_move(&servo_a, 180,1000);
 80016ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80016b0:	ed9f 0a35 	vldr	s0, [pc, #212]	; 8001788 <_Z10blockStatebbbbbb+0x100>
 80016b4:	4835      	ldr	r0, [pc, #212]	; (800178c <_Z10blockStatebbbbbb+0x104>)
 80016b6:	f7ff ffd1 	bl	800165c <_Z10servo_moveP5servofi>
 80016ba:	e006      	b.n	80016ca <_Z10blockStatebbbbbb+0x42>
	}else{
		servo_move(&servo_a, 1,1000);
 80016bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80016c0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80016c4:	4831      	ldr	r0, [pc, #196]	; (800178c <_Z10blockStatebbbbbb+0x104>)
 80016c6:	f7ff ffc9 	bl	800165c <_Z10servo_moveP5servofi>
	}
	if (state_b == true){
 80016ca:	79bb      	ldrb	r3, [r7, #6]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d107      	bne.n	80016e0 <_Z10blockStatebbbbbb+0x58>
		servo_move(&servo_b, 40,1000);
 80016d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80016d4:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8001790 <_Z10blockStatebbbbbb+0x108>
 80016d8:	482e      	ldr	r0, [pc, #184]	; (8001794 <_Z10blockStatebbbbbb+0x10c>)
 80016da:	f7ff ffbf 	bl	800165c <_Z10servo_moveP5servofi>
 80016de:	e006      	b.n	80016ee <_Z10blockStatebbbbbb+0x66>
	}else{
		servo_move(&servo_b, 180,1000);
 80016e0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80016e4:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8001788 <_Z10blockStatebbbbbb+0x100>
 80016e8:	482a      	ldr	r0, [pc, #168]	; (8001794 <_Z10blockStatebbbbbb+0x10c>)
 80016ea:	f7ff ffb7 	bl	800165c <_Z10servo_moveP5servofi>
		}
	if (state_c == true){
 80016ee:	797b      	ldrb	r3, [r7, #5]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d107      	bne.n	8001704 <_Z10blockStatebbbbbb+0x7c>
		servo_move(&servo_c, 40,1000);
 80016f4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80016f8:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8001790 <_Z10blockStatebbbbbb+0x108>
 80016fc:	4826      	ldr	r0, [pc, #152]	; (8001798 <_Z10blockStatebbbbbb+0x110>)
 80016fe:	f7ff ffad 	bl	800165c <_Z10servo_moveP5servofi>
 8001702:	e006      	b.n	8001712 <_Z10blockStatebbbbbb+0x8a>
	}else{
		servo_move(&servo_c, 180,1000);
 8001704:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001708:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8001788 <_Z10blockStatebbbbbb+0x100>
 800170c:	4822      	ldr	r0, [pc, #136]	; (8001798 <_Z10blockStatebbbbbb+0x110>)
 800170e:	f7ff ffa5 	bl	800165c <_Z10servo_moveP5servofi>
	}
	if (state_d == true){
 8001712:	793b      	ldrb	r3, [r7, #4]
 8001714:	2b01      	cmp	r3, #1
 8001716:	d107      	bne.n	8001728 <_Z10blockStatebbbbbb+0xa0>
		servo_move(&servo_d, 1,1000);
 8001718:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800171c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001720:	481e      	ldr	r0, [pc, #120]	; (800179c <_Z10blockStatebbbbbb+0x114>)
 8001722:	f7ff ff9b 	bl	800165c <_Z10servo_moveP5servofi>
 8001726:	e006      	b.n	8001736 <_Z10blockStatebbbbbb+0xae>
	}else{
		servo_move(&servo_d, 180,1000);
 8001728:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800172c:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8001788 <_Z10blockStatebbbbbb+0x100>
 8001730:	481a      	ldr	r0, [pc, #104]	; (800179c <_Z10blockStatebbbbbb+0x114>)
 8001732:	f7ff ff93 	bl	800165c <_Z10servo_moveP5servofi>
		}
	if (state_e == true){
 8001736:	7e3b      	ldrb	r3, [r7, #24]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d107      	bne.n	800174c <_Z10blockStatebbbbbb+0xc4>
		servo_move(&servo_e, 180,1000);
 800173c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001740:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8001788 <_Z10blockStatebbbbbb+0x100>
 8001744:	4816      	ldr	r0, [pc, #88]	; (80017a0 <_Z10blockStatebbbbbb+0x118>)
 8001746:	f7ff ff89 	bl	800165c <_Z10servo_moveP5servofi>
 800174a:	e006      	b.n	800175a <_Z10blockStatebbbbbb+0xd2>
	}else{
		servo_move(&servo_e, 40,1000);
 800174c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001750:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8001790 <_Z10blockStatebbbbbb+0x108>
 8001754:	4812      	ldr	r0, [pc, #72]	; (80017a0 <_Z10blockStatebbbbbb+0x118>)
 8001756:	f7ff ff81 	bl	800165c <_Z10servo_moveP5servofi>
		}
	if (state_f == true){
 800175a:	7f3b      	ldrb	r3, [r7, #28]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d107      	bne.n	8001770 <_Z10blockStatebbbbbb+0xe8>
		servo_move(&servo_f, 180,1000);
 8001760:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001764:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8001788 <_Z10blockStatebbbbbb+0x100>
 8001768:	480e      	ldr	r0, [pc, #56]	; (80017a4 <_Z10blockStatebbbbbb+0x11c>)
 800176a:	f7ff ff77 	bl	800165c <_Z10servo_moveP5servofi>
	}else{
		servo_move(&servo_f, 40,1000);
		}
}
 800176e:	e006      	b.n	800177e <_Z10blockStatebbbbbb+0xf6>
		servo_move(&servo_f, 40,1000);
 8001770:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001774:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8001790 <_Z10blockStatebbbbbb+0x108>
 8001778:	480a      	ldr	r0, [pc, #40]	; (80017a4 <_Z10blockStatebbbbbb+0x11c>)
 800177a:	f7ff ff6f 	bl	800165c <_Z10servo_moveP5servofi>
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	bd90      	pop	{r4, r7, pc}
 8001786:	bf00      	nop
 8001788:	43340000 	.word	0x43340000
 800178c:	20000084 	.word	0x20000084
 8001790:	42200000 	.word	0x42200000
 8001794:	200000a0 	.word	0x200000a0
 8001798:	200000bc 	.word	0x200000bc
 800179c:	200000d8 	.word	0x200000d8
 80017a0:	200000f4 	.word	0x200000f4
 80017a4:	20000110 	.word	0x20000110

080017a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ae:	4b0f      	ldr	r3, [pc, #60]	; (80017ec <HAL_MspInit+0x44>)
 80017b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017b2:	4a0e      	ldr	r2, [pc, #56]	; (80017ec <HAL_MspInit+0x44>)
 80017b4:	f043 0301 	orr.w	r3, r3, #1
 80017b8:	6613      	str	r3, [r2, #96]	; 0x60
 80017ba:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <HAL_MspInit+0x44>)
 80017bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	607b      	str	r3, [r7, #4]
 80017c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017c6:	4b09      	ldr	r3, [pc, #36]	; (80017ec <HAL_MspInit+0x44>)
 80017c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ca:	4a08      	ldr	r2, [pc, #32]	; (80017ec <HAL_MspInit+0x44>)
 80017cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017d0:	6593      	str	r3, [r2, #88]	; 0x58
 80017d2:	4b06      	ldr	r3, [pc, #24]	; (80017ec <HAL_MspInit+0x44>)
 80017d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017da:	603b      	str	r3, [r7, #0]
 80017dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017de:	bf00      	nop
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	40021000 	.word	0x40021000

080017f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b0a0      	sub	sp, #128	; 0x80
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	609a      	str	r2, [r3, #8]
 8001804:	60da      	str	r2, [r3, #12]
 8001806:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001808:	f107 031c 	add.w	r3, r7, #28
 800180c:	2250      	movs	r2, #80	; 0x50
 800180e:	2100      	movs	r1, #0
 8001810:	4618      	mov	r0, r3
 8001812:	f006 f8a3 	bl	800795c <memset>
  if(hadc->Instance==ADC1)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800181e:	f040 8091 	bne.w	8001944 <HAL_ADC_MspInit+0x154>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001822:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001826:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001828:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800182c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800182e:	f107 031c 	add.w	r3, r7, #28
 8001832:	4618      	mov	r0, r3
 8001834:	f003 f8dc 	bl	80049f0 <HAL_RCCEx_PeriphCLKConfig>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 800183e:	f7ff fc97 	bl	8001170 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001842:	4b42      	ldr	r3, [pc, #264]	; (800194c <HAL_ADC_MspInit+0x15c>)
 8001844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001846:	4a41      	ldr	r2, [pc, #260]	; (800194c <HAL_ADC_MspInit+0x15c>)
 8001848:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800184c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800184e:	4b3f      	ldr	r3, [pc, #252]	; (800194c <HAL_ADC_MspInit+0x15c>)
 8001850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001852:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001856:	61bb      	str	r3, [r7, #24]
 8001858:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800185a:	4b3c      	ldr	r3, [pc, #240]	; (800194c <HAL_ADC_MspInit+0x15c>)
 800185c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185e:	4a3b      	ldr	r2, [pc, #236]	; (800194c <HAL_ADC_MspInit+0x15c>)
 8001860:	f043 0304 	orr.w	r3, r3, #4
 8001864:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001866:	4b39      	ldr	r3, [pc, #228]	; (800194c <HAL_ADC_MspInit+0x15c>)
 8001868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186a:	f003 0304 	and.w	r3, r3, #4
 800186e:	617b      	str	r3, [r7, #20]
 8001870:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001872:	4b36      	ldr	r3, [pc, #216]	; (800194c <HAL_ADC_MspInit+0x15c>)
 8001874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001876:	4a35      	ldr	r2, [pc, #212]	; (800194c <HAL_ADC_MspInit+0x15c>)
 8001878:	f043 0301 	orr.w	r3, r3, #1
 800187c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800187e:	4b33      	ldr	r3, [pc, #204]	; (800194c <HAL_ADC_MspInit+0x15c>)
 8001880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	613b      	str	r3, [r7, #16]
 8001888:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800188a:	4b30      	ldr	r3, [pc, #192]	; (800194c <HAL_ADC_MspInit+0x15c>)
 800188c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800188e:	4a2f      	ldr	r2, [pc, #188]	; (800194c <HAL_ADC_MspInit+0x15c>)
 8001890:	f043 0302 	orr.w	r3, r3, #2
 8001894:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001896:	4b2d      	ldr	r3, [pc, #180]	; (800194c <HAL_ADC_MspInit+0x15c>)
 8001898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB11     ------> ADC1_IN14
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80018a2:	2303      	movs	r3, #3
 80018a4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018a6:	2303      	movs	r3, #3
 80018a8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ae:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80018b2:	4619      	mov	r1, r3
 80018b4:	4826      	ldr	r0, [pc, #152]	; (8001950 <HAL_ADC_MspInit+0x160>)
 80018b6:	f002 f92f 	bl	8003b18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80018ba:	2303      	movs	r3, #3
 80018bc:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018be:	2303      	movs	r3, #3
 80018c0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c2:	2300      	movs	r3, #0
 80018c4:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80018ca:	4619      	mov	r1, r3
 80018cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018d0:	f002 f922 	bl	8003b18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_11|GPIO_PIN_12;
 80018d4:	f641 0301 	movw	r3, #6145	; 0x1801
 80018d8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018da:	2303      	movs	r3, #3
 80018dc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80018e6:	4619      	mov	r1, r3
 80018e8:	481a      	ldr	r0, [pc, #104]	; (8001954 <HAL_ADC_MspInit+0x164>)
 80018ea:	f002 f915 	bl	8003b18 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 80018ee:	4b1a      	ldr	r3, [pc, #104]	; (8001958 <HAL_ADC_MspInit+0x168>)
 80018f0:	4a1a      	ldr	r2, [pc, #104]	; (800195c <HAL_ADC_MspInit+0x16c>)
 80018f2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80018f4:	4b18      	ldr	r3, [pc, #96]	; (8001958 <HAL_ADC_MspInit+0x168>)
 80018f6:	2205      	movs	r2, #5
 80018f8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018fa:	4b17      	ldr	r3, [pc, #92]	; (8001958 <HAL_ADC_MspInit+0x168>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001900:	4b15      	ldr	r3, [pc, #84]	; (8001958 <HAL_ADC_MspInit+0x168>)
 8001902:	2200      	movs	r2, #0
 8001904:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001906:	4b14      	ldr	r3, [pc, #80]	; (8001958 <HAL_ADC_MspInit+0x168>)
 8001908:	2280      	movs	r2, #128	; 0x80
 800190a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800190c:	4b12      	ldr	r3, [pc, #72]	; (8001958 <HAL_ADC_MspInit+0x168>)
 800190e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001912:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001914:	4b10      	ldr	r3, [pc, #64]	; (8001958 <HAL_ADC_MspInit+0x168>)
 8001916:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800191a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800191c:	4b0e      	ldr	r3, [pc, #56]	; (8001958 <HAL_ADC_MspInit+0x168>)
 800191e:	2220      	movs	r2, #32
 8001920:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001922:	4b0d      	ldr	r3, [pc, #52]	; (8001958 <HAL_ADC_MspInit+0x168>)
 8001924:	2200      	movs	r2, #0
 8001926:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001928:	480b      	ldr	r0, [pc, #44]	; (8001958 <HAL_ADC_MspInit+0x168>)
 800192a:	f001 fe7b 	bl	8003624 <HAL_DMA_Init>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <HAL_ADC_MspInit+0x148>
    {
      Error_Handler();
 8001934:	f7ff fc1c 	bl	8001170 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4a07      	ldr	r2, [pc, #28]	; (8001958 <HAL_ADC_MspInit+0x168>)
 800193c:	655a      	str	r2, [r3, #84]	; 0x54
 800193e:	4a06      	ldr	r2, [pc, #24]	; (8001958 <HAL_ADC_MspInit+0x168>)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001944:	bf00      	nop
 8001946:	3780      	adds	r7, #128	; 0x80
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40021000 	.word	0x40021000
 8001950:	48000800 	.word	0x48000800
 8001954:	48000400 	.word	0x48000400
 8001958:	200001c0 	.word	0x200001c0
 800195c:	40020030 	.word	0x40020030

08001960 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a27      	ldr	r2, [pc, #156]	; (8001a0c <HAL_TIM_PWM_MspInit+0xac>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d114      	bne.n	800199c <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001972:	4b27      	ldr	r3, [pc, #156]	; (8001a10 <HAL_TIM_PWM_MspInit+0xb0>)
 8001974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001976:	4a26      	ldr	r2, [pc, #152]	; (8001a10 <HAL_TIM_PWM_MspInit+0xb0>)
 8001978:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800197c:	6613      	str	r3, [r2, #96]	; 0x60
 800197e:	4b24      	ldr	r3, [pc, #144]	; (8001a10 <HAL_TIM_PWM_MspInit+0xb0>)
 8001980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001982:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001986:	617b      	str	r3, [r7, #20]
 8001988:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800198a:	2200      	movs	r2, #0
 800198c:	2100      	movs	r1, #0
 800198e:	2018      	movs	r0, #24
 8001990:	f001 fe13 	bl	80035ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001994:	2018      	movs	r0, #24
 8001996:	f001 fe2a 	bl	80035ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800199a:	e032      	b.n	8001a02 <HAL_TIM_PWM_MspInit+0xa2>
  else if(htim_pwm->Instance==TIM3)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a1c      	ldr	r2, [pc, #112]	; (8001a14 <HAL_TIM_PWM_MspInit+0xb4>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d114      	bne.n	80019d0 <HAL_TIM_PWM_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019a6:	4b1a      	ldr	r3, [pc, #104]	; (8001a10 <HAL_TIM_PWM_MspInit+0xb0>)
 80019a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019aa:	4a19      	ldr	r2, [pc, #100]	; (8001a10 <HAL_TIM_PWM_MspInit+0xb0>)
 80019ac:	f043 0302 	orr.w	r3, r3, #2
 80019b0:	6593      	str	r3, [r2, #88]	; 0x58
 80019b2:	4b17      	ldr	r3, [pc, #92]	; (8001a10 <HAL_TIM_PWM_MspInit+0xb0>)
 80019b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	613b      	str	r3, [r7, #16]
 80019bc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80019be:	2200      	movs	r2, #0
 80019c0:	2100      	movs	r1, #0
 80019c2:	201d      	movs	r0, #29
 80019c4:	f001 fdf9 	bl	80035ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80019c8:	201d      	movs	r0, #29
 80019ca:	f001 fe10 	bl	80035ee <HAL_NVIC_EnableIRQ>
}
 80019ce:	e018      	b.n	8001a02 <HAL_TIM_PWM_MspInit+0xa2>
  else if(htim_pwm->Instance==TIM15)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a10      	ldr	r2, [pc, #64]	; (8001a18 <HAL_TIM_PWM_MspInit+0xb8>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d113      	bne.n	8001a02 <HAL_TIM_PWM_MspInit+0xa2>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80019da:	4b0d      	ldr	r3, [pc, #52]	; (8001a10 <HAL_TIM_PWM_MspInit+0xb0>)
 80019dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019de:	4a0c      	ldr	r2, [pc, #48]	; (8001a10 <HAL_TIM_PWM_MspInit+0xb0>)
 80019e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e4:	6613      	str	r3, [r2, #96]	; 0x60
 80019e6:	4b0a      	ldr	r3, [pc, #40]	; (8001a10 <HAL_TIM_PWM_MspInit+0xb0>)
 80019e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80019f2:	2200      	movs	r2, #0
 80019f4:	2100      	movs	r1, #0
 80019f6:	2018      	movs	r0, #24
 80019f8:	f001 fddf 	bl	80035ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80019fc:	2018      	movs	r0, #24
 80019fe:	f001 fdf6 	bl	80035ee <HAL_NVIC_EnableIRQ>
}
 8001a02:	bf00      	nop
 8001a04:	3718      	adds	r7, #24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40012c00 	.word	0x40012c00
 8001a10:	40021000 	.word	0x40021000
 8001a14:	40000400 	.word	0x40000400
 8001a18:	40014000 	.word	0x40014000

08001a1c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b092      	sub	sp, #72	; 0x48
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a24:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
 8001a30:	60da      	str	r2, [r3, #12]
 8001a32:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a3c:	d145      	bne.n	8001aca <HAL_TIM_Encoder_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a3e:	4b78      	ldr	r3, [pc, #480]	; (8001c20 <HAL_TIM_Encoder_MspInit+0x204>)
 8001a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a42:	4a77      	ldr	r2, [pc, #476]	; (8001c20 <HAL_TIM_Encoder_MspInit+0x204>)
 8001a44:	f043 0301 	orr.w	r3, r3, #1
 8001a48:	6593      	str	r3, [r2, #88]	; 0x58
 8001a4a:	4b75      	ldr	r3, [pc, #468]	; (8001c20 <HAL_TIM_Encoder_MspInit+0x204>)
 8001a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	633b      	str	r3, [r7, #48]	; 0x30
 8001a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a56:	4b72      	ldr	r3, [pc, #456]	; (8001c20 <HAL_TIM_Encoder_MspInit+0x204>)
 8001a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a5a:	4a71      	ldr	r2, [pc, #452]	; (8001c20 <HAL_TIM_Encoder_MspInit+0x204>)
 8001a5c:	f043 0301 	orr.w	r3, r3, #1
 8001a60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a62:	4b6f      	ldr	r3, [pc, #444]	; (8001c20 <HAL_TIM_Encoder_MspInit+0x204>)
 8001a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a6e:	4b6c      	ldr	r3, [pc, #432]	; (8001c20 <HAL_TIM_Encoder_MspInit+0x204>)
 8001a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a72:	4a6b      	ldr	r2, [pc, #428]	; (8001c20 <HAL_TIM_Encoder_MspInit+0x204>)
 8001a74:	f043 0302 	orr.w	r3, r3, #2
 8001a78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a7a:	4b69      	ldr	r3, [pc, #420]	; (8001c20 <HAL_TIM_Encoder_MspInit+0x204>)
 8001a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001a86:	2320      	movs	r3, #32
 8001a88:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a92:	2300      	movs	r3, #0
 8001a94:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a96:	2301      	movs	r3, #1
 8001a98:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a9a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aa4:	f002 f838 	bl	8003b18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001aa8:	2308      	movs	r3, #8
 8001aaa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aac:	2302      	movs	r3, #2
 8001aae:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001abc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4858      	ldr	r0, [pc, #352]	; (8001c24 <HAL_TIM_Encoder_MspInit+0x208>)
 8001ac4:	f002 f828 	bl	8003b18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }

}
 8001ac8:	e0a6      	b.n	8001c18 <HAL_TIM_Encoder_MspInit+0x1fc>
  else if(htim_encoder->Instance==TIM4)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a56      	ldr	r2, [pc, #344]	; (8001c28 <HAL_TIM_Encoder_MspInit+0x20c>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d12a      	bne.n	8001b2a <HAL_TIM_Encoder_MspInit+0x10e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ad4:	4b52      	ldr	r3, [pc, #328]	; (8001c20 <HAL_TIM_Encoder_MspInit+0x204>)
 8001ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad8:	4a51      	ldr	r2, [pc, #324]	; (8001c20 <HAL_TIM_Encoder_MspInit+0x204>)
 8001ada:	f043 0304 	orr.w	r3, r3, #4
 8001ade:	6593      	str	r3, [r2, #88]	; 0x58
 8001ae0:	4b4f      	ldr	r3, [pc, #316]	; (8001c20 <HAL_TIM_Encoder_MspInit+0x204>)
 8001ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae4:	f003 0304 	and.w	r3, r3, #4
 8001ae8:	627b      	str	r3, [r7, #36]	; 0x24
 8001aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aec:	4b4c      	ldr	r3, [pc, #304]	; (8001c20 <HAL_TIM_Encoder_MspInit+0x204>)
 8001aee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af0:	4a4b      	ldr	r2, [pc, #300]	; (8001c20 <HAL_TIM_Encoder_MspInit+0x204>)
 8001af2:	f043 0301 	orr.w	r3, r3, #1
 8001af6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001af8:	4b49      	ldr	r3, [pc, #292]	; (8001c20 <HAL_TIM_Encoder_MspInit+0x204>)
 8001afa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001afc:	f003 0301 	and.w	r3, r3, #1
 8001b00:	623b      	str	r3, [r7, #32]
 8001b02:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001b04:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001b08:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b12:	2300      	movs	r3, #0
 8001b14:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001b16:	230a      	movs	r3, #10
 8001b18:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b1e:	4619      	mov	r1, r3
 8001b20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b24:	f001 fff8 	bl	8003b18 <HAL_GPIO_Init>
}
 8001b28:	e076      	b.n	8001c18 <HAL_TIM_Encoder_MspInit+0x1fc>
  else if(htim_encoder->Instance==TIM8)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a3f      	ldr	r2, [pc, #252]	; (8001c2c <HAL_TIM_Encoder_MspInit+0x210>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d128      	bne.n	8001b86 <HAL_TIM_Encoder_MspInit+0x16a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001b34:	4b3a      	ldr	r3, [pc, #232]	; (8001c20 <HAL_TIM_Encoder_MspInit+0x204>)
 8001b36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b38:	4a39      	ldr	r2, [pc, #228]	; (8001c20 <HAL_TIM_Encoder_MspInit+0x204>)
 8001b3a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b3e:	6613      	str	r3, [r2, #96]	; 0x60
 8001b40:	4b37      	ldr	r3, [pc, #220]	; (8001c20 <HAL_TIM_Encoder_MspInit+0x204>)
 8001b42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b48:	61fb      	str	r3, [r7, #28]
 8001b4a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b4c:	4b34      	ldr	r3, [pc, #208]	; (8001c20 <HAL_TIM_Encoder_MspInit+0x204>)
 8001b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b50:	4a33      	ldr	r2, [pc, #204]	; (8001c20 <HAL_TIM_Encoder_MspInit+0x204>)
 8001b52:	f043 0304 	orr.w	r3, r3, #4
 8001b56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b58:	4b31      	ldr	r3, [pc, #196]	; (8001c20 <HAL_TIM_Encoder_MspInit+0x204>)
 8001b5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b5c:	f003 0304 	and.w	r3, r3, #4
 8001b60:	61bb      	str	r3, [r7, #24]
 8001b62:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b64:	23c0      	movs	r3, #192	; 0xc0
 8001b66:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b68:	2302      	movs	r3, #2
 8001b6a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b70:	2300      	movs	r3, #0
 8001b72:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8001b74:	2304      	movs	r3, #4
 8001b76:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b78:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	482c      	ldr	r0, [pc, #176]	; (8001c30 <HAL_TIM_Encoder_MspInit+0x214>)
 8001b80:	f001 ffca 	bl	8003b18 <HAL_GPIO_Init>
}
 8001b84:	e048      	b.n	8001c18 <HAL_TIM_Encoder_MspInit+0x1fc>
  else if(htim_encoder->Instance==TIM20)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a2a      	ldr	r2, [pc, #168]	; (8001c34 <HAL_TIM_Encoder_MspInit+0x218>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d143      	bne.n	8001c18 <HAL_TIM_Encoder_MspInit+0x1fc>
    __HAL_RCC_TIM20_CLK_ENABLE();
 8001b90:	4b23      	ldr	r3, [pc, #140]	; (8001c20 <HAL_TIM_Encoder_MspInit+0x204>)
 8001b92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b94:	4a22      	ldr	r2, [pc, #136]	; (8001c20 <HAL_TIM_Encoder_MspInit+0x204>)
 8001b96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b9a:	6613      	str	r3, [r2, #96]	; 0x60
 8001b9c:	4b20      	ldr	r3, [pc, #128]	; (8001c20 <HAL_TIM_Encoder_MspInit+0x204>)
 8001b9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ba0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ba4:	617b      	str	r3, [r7, #20]
 8001ba6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ba8:	4b1d      	ldr	r3, [pc, #116]	; (8001c20 <HAL_TIM_Encoder_MspInit+0x204>)
 8001baa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bac:	4a1c      	ldr	r2, [pc, #112]	; (8001c20 <HAL_TIM_Encoder_MspInit+0x204>)
 8001bae:	f043 0304 	orr.w	r3, r3, #4
 8001bb2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bb4:	4b1a      	ldr	r3, [pc, #104]	; (8001c20 <HAL_TIM_Encoder_MspInit+0x204>)
 8001bb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bb8:	f003 0304 	and.w	r3, r3, #4
 8001bbc:	613b      	str	r3, [r7, #16]
 8001bbe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bc0:	4b17      	ldr	r3, [pc, #92]	; (8001c20 <HAL_TIM_Encoder_MspInit+0x204>)
 8001bc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc4:	4a16      	ldr	r2, [pc, #88]	; (8001c20 <HAL_TIM_Encoder_MspInit+0x204>)
 8001bc6:	f043 0302 	orr.w	r3, r3, #2
 8001bca:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bcc:	4b14      	ldr	r3, [pc, #80]	; (8001c20 <HAL_TIM_Encoder_MspInit+0x204>)
 8001bce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001bd8:	2304      	movs	r3, #4
 8001bda:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be4:	2300      	movs	r3, #0
 8001be6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM20;
 8001be8:	2306      	movs	r3, #6
 8001bea:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	480f      	ldr	r0, [pc, #60]	; (8001c30 <HAL_TIM_Encoder_MspInit+0x214>)
 8001bf4:	f001 ff90 	bl	8003b18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001bf8:	2304      	movs	r3, #4
 8001bfa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c00:	2300      	movs	r3, #0
 8001c02:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c04:	2300      	movs	r3, #0
 8001c06:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c0c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c10:	4619      	mov	r1, r3
 8001c12:	4804      	ldr	r0, [pc, #16]	; (8001c24 <HAL_TIM_Encoder_MspInit+0x208>)
 8001c14:	f001 ff80 	bl	8003b18 <HAL_GPIO_Init>
}
 8001c18:	bf00      	nop
 8001c1a:	3748      	adds	r7, #72	; 0x48
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40021000 	.word	0x40021000
 8001c24:	48000400 	.word	0x48000400
 8001c28:	40000800 	.word	0x40000800
 8001c2c:	40013400 	.word	0x40013400
 8001c30:	48000800 	.word	0x48000800
 8001c34:	40015000 	.word	0x40015000

08001c38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a16      	ldr	r2, [pc, #88]	; (8001ca0 <HAL_TIM_Base_MspInit+0x68>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d114      	bne.n	8001c74 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001c4a:	4b16      	ldr	r3, [pc, #88]	; (8001ca4 <HAL_TIM_Base_MspInit+0x6c>)
 8001c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4e:	4a15      	ldr	r2, [pc, #84]	; (8001ca4 <HAL_TIM_Base_MspInit+0x6c>)
 8001c50:	f043 0310 	orr.w	r3, r3, #16
 8001c54:	6593      	str	r3, [r2, #88]	; 0x58
 8001c56:	4b13      	ldr	r3, [pc, #76]	; (8001ca4 <HAL_TIM_Base_MspInit+0x6c>)
 8001c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c5a:	f003 0310 	and.w	r3, r3, #16
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001c62:	2200      	movs	r2, #0
 8001c64:	2100      	movs	r1, #0
 8001c66:	2036      	movs	r0, #54	; 0x36
 8001c68:	f001 fca7 	bl	80035ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001c6c:	2036      	movs	r0, #54	; 0x36
 8001c6e:	f001 fcbe 	bl	80035ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001c72:	e010      	b.n	8001c96 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM16)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a0b      	ldr	r2, [pc, #44]	; (8001ca8 <HAL_TIM_Base_MspInit+0x70>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d10b      	bne.n	8001c96 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001c7e:	4b09      	ldr	r3, [pc, #36]	; (8001ca4 <HAL_TIM_Base_MspInit+0x6c>)
 8001c80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c82:	4a08      	ldr	r2, [pc, #32]	; (8001ca4 <HAL_TIM_Base_MspInit+0x6c>)
 8001c84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c88:	6613      	str	r3, [r2, #96]	; 0x60
 8001c8a:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <HAL_TIM_Base_MspInit+0x6c>)
 8001c8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c92:	60bb      	str	r3, [r7, #8]
 8001c94:	68bb      	ldr	r3, [r7, #8]
}
 8001c96:	bf00      	nop
 8001c98:	3710      	adds	r7, #16
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	40001000 	.word	0x40001000
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	40014400 	.word	0x40014400

08001cac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b08e      	sub	sp, #56	; 0x38
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
 8001cc0:	60da      	str	r2, [r3, #12]
 8001cc2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a5f      	ldr	r2, [pc, #380]	; (8001e48 <HAL_TIM_MspPostInit+0x19c>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d13a      	bne.n	8001d44 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cce:	4b5f      	ldr	r3, [pc, #380]	; (8001e4c <HAL_TIM_MspPostInit+0x1a0>)
 8001cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd2:	4a5e      	ldr	r2, [pc, #376]	; (8001e4c <HAL_TIM_MspPostInit+0x1a0>)
 8001cd4:	f043 0304 	orr.w	r3, r3, #4
 8001cd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cda:	4b5c      	ldr	r3, [pc, #368]	; (8001e4c <HAL_TIM_MspPostInit+0x1a0>)
 8001cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cde:	f003 0304 	and.w	r3, r3, #4
 8001ce2:	623b      	str	r3, [r7, #32]
 8001ce4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce6:	4b59      	ldr	r3, [pc, #356]	; (8001e4c <HAL_TIM_MspPostInit+0x1a0>)
 8001ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cea:	4a58      	ldr	r2, [pc, #352]	; (8001e4c <HAL_TIM_MspPostInit+0x1a0>)
 8001cec:	f043 0301 	orr.w	r3, r3, #1
 8001cf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cf2:	4b56      	ldr	r3, [pc, #344]	; (8001e4c <HAL_TIM_MspPostInit+0x1a0>)
 8001cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	61fb      	str	r3, [r7, #28]
 8001cfc:	69fb      	ldr	r3, [r7, #28]
    PC3     ------> TIM1_CH4
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001cfe:	2308      	movs	r3, #8
 8001d00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d02:	2302      	movs	r3, #2
 8001d04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d06:	2300      	movs	r3, #0
 8001d08:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d16:	4619      	mov	r1, r3
 8001d18:	484d      	ldr	r0, [pc, #308]	; (8001e50 <HAL_TIM_MspPostInit+0x1a4>)
 8001d1a:	f001 fefd 	bl	8003b18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001d1e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001d22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d24:	2302      	movs	r3, #2
 8001d26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001d30:	2306      	movs	r3, #6
 8001d32:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d38:	4619      	mov	r1, r3
 8001d3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d3e:	f001 feeb 	bl	8003b18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8001d42:	e07d      	b.n	8001e40 <HAL_TIM_MspPostInit+0x194>
  else if(htim->Instance==TIM3)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a42      	ldr	r2, [pc, #264]	; (8001e54 <HAL_TIM_MspPostInit+0x1a8>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d156      	bne.n	8001dfc <HAL_TIM_MspPostInit+0x150>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d4e:	4b3f      	ldr	r3, [pc, #252]	; (8001e4c <HAL_TIM_MspPostInit+0x1a0>)
 8001d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d52:	4a3e      	ldr	r2, [pc, #248]	; (8001e4c <HAL_TIM_MspPostInit+0x1a0>)
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d5a:	4b3c      	ldr	r3, [pc, #240]	; (8001e4c <HAL_TIM_MspPostInit+0x1a0>)
 8001d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	61bb      	str	r3, [r7, #24]
 8001d64:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d66:	4b39      	ldr	r3, [pc, #228]	; (8001e4c <HAL_TIM_MspPostInit+0x1a0>)
 8001d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d6a:	4a38      	ldr	r2, [pc, #224]	; (8001e4c <HAL_TIM_MspPostInit+0x1a0>)
 8001d6c:	f043 0302 	orr.w	r3, r3, #2
 8001d70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d72:	4b36      	ldr	r3, [pc, #216]	; (8001e4c <HAL_TIM_MspPostInit+0x1a0>)
 8001d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	617b      	str	r3, [r7, #20]
 8001d7c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d7e:	4b33      	ldr	r3, [pc, #204]	; (8001e4c <HAL_TIM_MspPostInit+0x1a0>)
 8001d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d82:	4a32      	ldr	r2, [pc, #200]	; (8001e4c <HAL_TIM_MspPostInit+0x1a0>)
 8001d84:	f043 0304 	orr.w	r3, r3, #4
 8001d88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d8a:	4b30      	ldr	r3, [pc, #192]	; (8001e4c <HAL_TIM_MspPostInit+0x1a0>)
 8001d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d8e:	f003 0304 	and.w	r3, r3, #4
 8001d92:	613b      	str	r3, [r7, #16]
 8001d94:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001d96:	2350      	movs	r3, #80	; 0x50
 8001d98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da2:	2300      	movs	r3, #0
 8001da4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001da6:	2302      	movs	r3, #2
 8001da8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001daa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dae:	4619      	mov	r1, r3
 8001db0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001db4:	f001 feb0 	bl	8003b18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001db8:	2302      	movs	r3, #2
 8001dba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001dc8:	2302      	movs	r3, #2
 8001dca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4821      	ldr	r0, [pc, #132]	; (8001e58 <HAL_TIM_MspPostInit+0x1ac>)
 8001dd4:	f001 fea0 	bl	8003b18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001dd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ddc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dde:	2302      	movs	r3, #2
 8001de0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de2:	2300      	movs	r3, #0
 8001de4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de6:	2300      	movs	r3, #0
 8001de8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001dea:	2302      	movs	r3, #2
 8001dec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001df2:	4619      	mov	r1, r3
 8001df4:	4816      	ldr	r0, [pc, #88]	; (8001e50 <HAL_TIM_MspPostInit+0x1a4>)
 8001df6:	f001 fe8f 	bl	8003b18 <HAL_GPIO_Init>
}
 8001dfa:	e021      	b.n	8001e40 <HAL_TIM_MspPostInit+0x194>
  else if(htim->Instance==TIM15)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a16      	ldr	r2, [pc, #88]	; (8001e5c <HAL_TIM_MspPostInit+0x1b0>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d11c      	bne.n	8001e40 <HAL_TIM_MspPostInit+0x194>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e06:	4b11      	ldr	r3, [pc, #68]	; (8001e4c <HAL_TIM_MspPostInit+0x1a0>)
 8001e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e0a:	4a10      	ldr	r2, [pc, #64]	; (8001e4c <HAL_TIM_MspPostInit+0x1a0>)
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e12:	4b0e      	ldr	r3, [pc, #56]	; (8001e4c <HAL_TIM_MspPostInit+0x1a0>)
 8001e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e1e:	230c      	movs	r3, #12
 8001e20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e22:	2302      	movs	r3, #2
 8001e24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e26:	2300      	movs	r3, #0
 8001e28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 8001e2e:	2309      	movs	r3, #9
 8001e30:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e36:	4619      	mov	r1, r3
 8001e38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e3c:	f001 fe6c 	bl	8003b18 <HAL_GPIO_Init>
}
 8001e40:	bf00      	nop
 8001e42:	3738      	adds	r7, #56	; 0x38
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	40012c00 	.word	0x40012c00
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	48000800 	.word	0x48000800
 8001e54:	40000400 	.word	0x40000400
 8001e58:	48000400 	.word	0x48000400
 8001e5c:	40014000 	.word	0x40014000

08001e60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b0a2      	sub	sp, #136	; 0x88
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e68:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	605a      	str	r2, [r3, #4]
 8001e72:	609a      	str	r2, [r3, #8]
 8001e74:	60da      	str	r2, [r3, #12]
 8001e76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e7c:	2250      	movs	r2, #80	; 0x50
 8001e7e:	2100      	movs	r1, #0
 8001e80:	4618      	mov	r0, r3
 8001e82:	f005 fd6b 	bl	800795c <memset>
  if(huart->Instance==UART4)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a72      	ldr	r2, [pc, #456]	; (8002054 <HAL_UART_MspInit+0x1f4>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d139      	bne.n	8001f04 <HAL_UART_MspInit+0xa4>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001e90:	2308      	movs	r3, #8
 8001e92:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001e94:	2300      	movs	r3, #0
 8001e96:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f002 fda7 	bl	80049f0 <HAL_RCCEx_PeriphCLKConfig>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ea8:	f7ff f962 	bl	8001170 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001eac:	4b6a      	ldr	r3, [pc, #424]	; (8002058 <HAL_UART_MspInit+0x1f8>)
 8001eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb0:	4a69      	ldr	r2, [pc, #420]	; (8002058 <HAL_UART_MspInit+0x1f8>)
 8001eb2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001eb6:	6593      	str	r3, [r2, #88]	; 0x58
 8001eb8:	4b67      	ldr	r3, [pc, #412]	; (8002058 <HAL_UART_MspInit+0x1f8>)
 8001eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ebc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ec0:	623b      	str	r3, [r7, #32]
 8001ec2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ec4:	4b64      	ldr	r3, [pc, #400]	; (8002058 <HAL_UART_MspInit+0x1f8>)
 8001ec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ec8:	4a63      	ldr	r2, [pc, #396]	; (8002058 <HAL_UART_MspInit+0x1f8>)
 8001eca:	f043 0304 	orr.w	r3, r3, #4
 8001ece:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ed0:	4b61      	ldr	r3, [pc, #388]	; (8002058 <HAL_UART_MspInit+0x1f8>)
 8001ed2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ed4:	f003 0304 	and.w	r3, r3, #4
 8001ed8:	61fb      	str	r3, [r7, #28]
 8001eda:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001edc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001ee0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eea:	2300      	movs	r3, #0
 8001eec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8001ef0:	2305      	movs	r3, #5
 8001ef2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ef6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001efa:	4619      	mov	r1, r3
 8001efc:	4857      	ldr	r0, [pc, #348]	; (800205c <HAL_UART_MspInit+0x1fc>)
 8001efe:	f001 fe0b 	bl	8003b18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001f02:	e0a2      	b.n	800204a <HAL_UART_MspInit+0x1ea>
  else if(huart->Instance==UART5)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a55      	ldr	r2, [pc, #340]	; (8002060 <HAL_UART_MspInit+0x200>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d15f      	bne.n	8001fce <HAL_UART_MspInit+0x16e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001f0e:	2310      	movs	r3, #16
 8001f10:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001f12:	2300      	movs	r3, #0
 8001f14:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f002 fd68 	bl	80049f0 <HAL_RCCEx_PeriphCLKConfig>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <HAL_UART_MspInit+0xca>
      Error_Handler();
 8001f26:	f7ff f923 	bl	8001170 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001f2a:	4b4b      	ldr	r3, [pc, #300]	; (8002058 <HAL_UART_MspInit+0x1f8>)
 8001f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f2e:	4a4a      	ldr	r2, [pc, #296]	; (8002058 <HAL_UART_MspInit+0x1f8>)
 8001f30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f34:	6593      	str	r3, [r2, #88]	; 0x58
 8001f36:	4b48      	ldr	r3, [pc, #288]	; (8002058 <HAL_UART_MspInit+0x1f8>)
 8001f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f3e:	61bb      	str	r3, [r7, #24]
 8001f40:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f42:	4b45      	ldr	r3, [pc, #276]	; (8002058 <HAL_UART_MspInit+0x1f8>)
 8001f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f46:	4a44      	ldr	r2, [pc, #272]	; (8002058 <HAL_UART_MspInit+0x1f8>)
 8001f48:	f043 0304 	orr.w	r3, r3, #4
 8001f4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f4e:	4b42      	ldr	r3, [pc, #264]	; (8002058 <HAL_UART_MspInit+0x1f8>)
 8001f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f52:	f003 0304 	and.w	r3, r3, #4
 8001f56:	617b      	str	r3, [r7, #20]
 8001f58:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f5a:	4b3f      	ldr	r3, [pc, #252]	; (8002058 <HAL_UART_MspInit+0x1f8>)
 8001f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f5e:	4a3e      	ldr	r2, [pc, #248]	; (8002058 <HAL_UART_MspInit+0x1f8>)
 8001f60:	f043 0308 	orr.w	r3, r3, #8
 8001f64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f66:	4b3c      	ldr	r3, [pc, #240]	; (8002058 <HAL_UART_MspInit+0x1f8>)
 8001f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f6a:	f003 0308 	and.w	r3, r3, #8
 8001f6e:	613b      	str	r3, [r7, #16]
 8001f70:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001f72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f76:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f78:	2302      	movs	r3, #2
 8001f7a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f80:	2300      	movs	r3, #0
 8001f82:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8001f86:	2305      	movs	r3, #5
 8001f88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f8c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001f90:	4619      	mov	r1, r3
 8001f92:	4832      	ldr	r0, [pc, #200]	; (800205c <HAL_UART_MspInit+0x1fc>)
 8001f94:	f001 fdc0 	bl	8003b18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f98:	2304      	movs	r3, #4
 8001f9a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8001faa:	2305      	movs	r3, #5
 8001fac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fb0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	482b      	ldr	r0, [pc, #172]	; (8002064 <HAL_UART_MspInit+0x204>)
 8001fb8:	f001 fdae 	bl	8003b18 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	2035      	movs	r0, #53	; 0x35
 8001fc2:	f001 fafa 	bl	80035ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001fc6:	2035      	movs	r0, #53	; 0x35
 8001fc8:	f001 fb11 	bl	80035ee <HAL_NVIC_EnableIRQ>
}
 8001fcc:	e03d      	b.n	800204a <HAL_UART_MspInit+0x1ea>
  else if(huart->Instance==USART3)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a25      	ldr	r2, [pc, #148]	; (8002068 <HAL_UART_MspInit+0x208>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d138      	bne.n	800204a <HAL_UART_MspInit+0x1ea>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001fd8:	2304      	movs	r3, #4
 8001fda:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fe0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f002 fd03 	bl	80049f0 <HAL_RCCEx_PeriphCLKConfig>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <HAL_UART_MspInit+0x194>
      Error_Handler();
 8001ff0:	f7ff f8be 	bl	8001170 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ff4:	4b18      	ldr	r3, [pc, #96]	; (8002058 <HAL_UART_MspInit+0x1f8>)
 8001ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff8:	4a17      	ldr	r2, [pc, #92]	; (8002058 <HAL_UART_MspInit+0x1f8>)
 8001ffa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ffe:	6593      	str	r3, [r2, #88]	; 0x58
 8002000:	4b15      	ldr	r3, [pc, #84]	; (8002058 <HAL_UART_MspInit+0x1f8>)
 8002002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002004:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002008:	60fb      	str	r3, [r7, #12]
 800200a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800200c:	4b12      	ldr	r3, [pc, #72]	; (8002058 <HAL_UART_MspInit+0x1f8>)
 800200e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002010:	4a11      	ldr	r2, [pc, #68]	; (8002058 <HAL_UART_MspInit+0x1f8>)
 8002012:	f043 0302 	orr.w	r3, r3, #2
 8002016:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002018:	4b0f      	ldr	r3, [pc, #60]	; (8002058 <HAL_UART_MspInit+0x1f8>)
 800201a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	60bb      	str	r3, [r7, #8]
 8002022:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_8;
 8002024:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8002028:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800202a:	2302      	movs	r3, #2
 800202c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202e:	2300      	movs	r3, #0
 8002030:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002032:	2300      	movs	r3, #0
 8002034:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002038:	2307      	movs	r3, #7
 800203a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800203e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002042:	4619      	mov	r1, r3
 8002044:	4809      	ldr	r0, [pc, #36]	; (800206c <HAL_UART_MspInit+0x20c>)
 8002046:	f001 fd67 	bl	8003b18 <HAL_GPIO_Init>
}
 800204a:	bf00      	nop
 800204c:	3788      	adds	r7, #136	; 0x88
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	40004c00 	.word	0x40004c00
 8002058:	40021000 	.word	0x40021000
 800205c:	48000800 	.word	0x48000800
 8002060:	40005000 	.word	0x40005000
 8002064:	48000c00 	.word	0x48000c00
 8002068:	40004800 	.word	0x40004800
 800206c:	48000400 	.word	0x48000400

08002070 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002074:	e7fe      	b.n	8002074 <NMI_Handler+0x4>

08002076 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002076:	b480      	push	{r7}
 8002078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800207a:	e7fe      	b.n	800207a <HardFault_Handler+0x4>

0800207c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002080:	e7fe      	b.n	8002080 <MemManage_Handler+0x4>

08002082 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002082:	b480      	push	{r7}
 8002084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002086:	e7fe      	b.n	8002086 <BusFault_Handler+0x4>

08002088 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800208c:	e7fe      	b.n	800208c <UsageFault_Handler+0x4>

0800208e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800208e:	b480      	push	{r7}
 8002090:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002092:	bf00      	nop
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020a0:	bf00      	nop
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020aa:	b480      	push	{r7}
 80020ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020ae:	bf00      	nop
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020bc:	f000 f8c6 	bl	800224c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020c0:	bf00      	nop
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80020c8:	4802      	ldr	r0, [pc, #8]	; (80020d4 <DMA1_Channel3_IRQHandler+0x10>)
 80020ca:	f001 fc13 	bl	80038f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80020ce:	bf00      	nop
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	200001c0 	.word	0x200001c0

080020d8 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80020dc:	4803      	ldr	r0, [pc, #12]	; (80020ec <TIM1_BRK_TIM15_IRQHandler+0x14>)
 80020de:	f003 fa23 	bl	8005528 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 80020e2:	4803      	ldr	r0, [pc, #12]	; (80020f0 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 80020e4:	f003 fa20 	bl	8005528 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80020e8:	bf00      	nop
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	20000220 	.word	0x20000220
 80020f0:	200003e8 	.word	0x200003e8

080020f4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80020f8:	4802      	ldr	r0, [pc, #8]	; (8002104 <TIM3_IRQHandler+0x10>)
 80020fa:	f003 fa15 	bl	8005528 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80020fe:	bf00      	nop
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	200002b8 	.word	0x200002b8

08002108 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt / UART5 wake-up interrupt through EXTI line 35.
  */
void UART5_IRQHandler(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800210c:	4802      	ldr	r0, [pc, #8]	; (8002118 <UART5_IRQHandler+0x10>)
 800210e:	f004 fa49 	bl	80065a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8002112:	bf00      	nop
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	20000560 	.word	0x20000560

0800211c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002120:	4802      	ldr	r0, [pc, #8]	; (800212c <TIM6_DAC_IRQHandler+0x10>)
 8002122:	f003 fa01 	bl	8005528 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002126:	bf00      	nop
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	20000350 	.word	0x20000350

08002130 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002134:	4b06      	ldr	r3, [pc, #24]	; (8002150 <SystemInit+0x20>)
 8002136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800213a:	4a05      	ldr	r2, [pc, #20]	; (8002150 <SystemInit+0x20>)
 800213c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002140:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002144:	bf00      	nop
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	e000ed00 	.word	0xe000ed00

08002154 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002154:	480d      	ldr	r0, [pc, #52]	; (800218c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002156:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002158:	f7ff ffea 	bl	8002130 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800215c:	480c      	ldr	r0, [pc, #48]	; (8002190 <LoopForever+0x6>)
  ldr r1, =_edata
 800215e:	490d      	ldr	r1, [pc, #52]	; (8002194 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002160:	4a0d      	ldr	r2, [pc, #52]	; (8002198 <LoopForever+0xe>)
  movs r3, #0
 8002162:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002164:	e002      	b.n	800216c <LoopCopyDataInit>

08002166 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002166:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002168:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800216a:	3304      	adds	r3, #4

0800216c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800216c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800216e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002170:	d3f9      	bcc.n	8002166 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002172:	4a0a      	ldr	r2, [pc, #40]	; (800219c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002174:	4c0a      	ldr	r4, [pc, #40]	; (80021a0 <LoopForever+0x16>)
  movs r3, #0
 8002176:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002178:	e001      	b.n	800217e <LoopFillZerobss>

0800217a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800217a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800217c:	3204      	adds	r2, #4

0800217e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800217e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002180:	d3fb      	bcc.n	800217a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002182:	f005 fbc7 	bl	8007914 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002186:	f7fe f9c9 	bl	800051c <main>

0800218a <LoopForever>:

LoopForever:
    b LoopForever
 800218a:	e7fe      	b.n	800218a <LoopForever>
  ldr   r0, =_estack
 800218c:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8002190:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002194:	20000138 	.word	0x20000138
  ldr r2, =_sidata
 8002198:	080079d8 	.word	0x080079d8
  ldr r2, =_sbss
 800219c:	20000138 	.word	0x20000138
  ldr r4, =_ebss
 80021a0:	200006bc 	.word	0x200006bc

080021a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80021a4:	e7fe      	b.n	80021a4 <ADC1_2_IRQHandler>

080021a6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b082      	sub	sp, #8
 80021aa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80021ac:	2300      	movs	r3, #0
 80021ae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021b0:	2003      	movs	r0, #3
 80021b2:	f001 f9f7 	bl	80035a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021b6:	200f      	movs	r0, #15
 80021b8:	f000 f80e 	bl	80021d8 <HAL_InitTick>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d002      	beq.n	80021c8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	71fb      	strb	r3, [r7, #7]
 80021c6:	e001      	b.n	80021cc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80021c8:	f7ff faee 	bl	80017a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80021cc:	79fb      	ldrb	r3, [r7, #7]

}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
	...

080021d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80021e0:	2300      	movs	r3, #0
 80021e2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80021e4:	4b16      	ldr	r3, [pc, #88]	; (8002240 <HAL_InitTick+0x68>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d022      	beq.n	8002232 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80021ec:	4b15      	ldr	r3, [pc, #84]	; (8002244 <HAL_InitTick+0x6c>)
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	4b13      	ldr	r3, [pc, #76]	; (8002240 <HAL_InitTick+0x68>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80021f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80021fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002200:	4618      	mov	r0, r3
 8002202:	f001 fa02 	bl	800360a <HAL_SYSTICK_Config>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d10f      	bne.n	800222c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2b0f      	cmp	r3, #15
 8002210:	d809      	bhi.n	8002226 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002212:	2200      	movs	r2, #0
 8002214:	6879      	ldr	r1, [r7, #4]
 8002216:	f04f 30ff 	mov.w	r0, #4294967295
 800221a:	f001 f9ce 	bl	80035ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800221e:	4a0a      	ldr	r2, [pc, #40]	; (8002248 <HAL_InitTick+0x70>)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6013      	str	r3, [r2, #0]
 8002224:	e007      	b.n	8002236 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	73fb      	strb	r3, [r7, #15]
 800222a:	e004      	b.n	8002236 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	73fb      	strb	r3, [r7, #15]
 8002230:	e001      	b.n	8002236 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002236:	7bfb      	ldrb	r3, [r7, #15]
}
 8002238:	4618      	mov	r0, r3
 800223a:	3710      	adds	r7, #16
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	20000134 	.word	0x20000134
 8002244:	2000012c 	.word	0x2000012c
 8002248:	20000130 	.word	0x20000130

0800224c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002250:	4b05      	ldr	r3, [pc, #20]	; (8002268 <HAL_IncTick+0x1c>)
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	4b05      	ldr	r3, [pc, #20]	; (800226c <HAL_IncTick+0x20>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4413      	add	r3, r2
 800225a:	4a03      	ldr	r2, [pc, #12]	; (8002268 <HAL_IncTick+0x1c>)
 800225c:	6013      	str	r3, [r2, #0]
}
 800225e:	bf00      	nop
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr
 8002268:	200006b8 	.word	0x200006b8
 800226c:	20000134 	.word	0x20000134

08002270 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  return uwTick;
 8002274:	4b03      	ldr	r3, [pc, #12]	; (8002284 <HAL_GetTick+0x14>)
 8002276:	681b      	ldr	r3, [r3, #0]
}
 8002278:	4618      	mov	r0, r3
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	200006b8 	.word	0x200006b8

08002288 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	431a      	orrs	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	609a      	str	r2, [r3, #8]
}
 80022a2:	bf00      	nop
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr

080022ae <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80022ae:	b480      	push	{r7}
 80022b0:	b083      	sub	sp, #12
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
 80022b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	431a      	orrs	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	609a      	str	r2, [r3, #8]
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b087      	sub	sp, #28
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
 80022fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	3360      	adds	r3, #96	; 0x60
 8002302:	461a      	mov	r2, r3
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	4413      	add	r3, r2
 800230a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	4b08      	ldr	r3, [pc, #32]	; (8002334 <LL_ADC_SetOffset+0x44>)
 8002312:	4013      	ands	r3, r2
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800231a:	683a      	ldr	r2, [r7, #0]
 800231c:	430a      	orrs	r2, r1
 800231e:	4313      	orrs	r3, r2
 8002320:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002328:	bf00      	nop
 800232a:	371c      	adds	r7, #28
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr
 8002334:	03fff000 	.word	0x03fff000

08002338 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	3360      	adds	r3, #96	; 0x60
 8002346:	461a      	mov	r2, r3
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	4413      	add	r3, r2
 800234e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002358:	4618      	mov	r0, r3
 800235a:	3714      	adds	r7, #20
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002364:	b480      	push	{r7}
 8002366:	b087      	sub	sp, #28
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	3360      	adds	r3, #96	; 0x60
 8002374:	461a      	mov	r2, r3
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	4413      	add	r3, r2
 800237c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	431a      	orrs	r2, r3
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800238e:	bf00      	nop
 8002390:	371c      	adds	r7, #28
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr

0800239a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800239a:	b480      	push	{r7}
 800239c:	b087      	sub	sp, #28
 800239e:	af00      	add	r7, sp, #0
 80023a0:	60f8      	str	r0, [r7, #12]
 80023a2:	60b9      	str	r1, [r7, #8]
 80023a4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	3360      	adds	r3, #96	; 0x60
 80023aa:	461a      	mov	r2, r3
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	4413      	add	r3, r2
 80023b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	431a      	orrs	r2, r3
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80023c4:	bf00      	nop
 80023c6:	371c      	adds	r7, #28
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b087      	sub	sp, #28
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	3360      	adds	r3, #96	; 0x60
 80023e0:	461a      	mov	r2, r3
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	4413      	add	r3, r2
 80023e8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	431a      	orrs	r2, r3
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80023fa:	bf00      	nop
 80023fc:	371c      	adds	r7, #28
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr

08002406 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002406:	b480      	push	{r7}
 8002408:	b083      	sub	sp, #12
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
 800240e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	695b      	ldr	r3, [r3, #20]
 8002414:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	431a      	orrs	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	615a      	str	r2, [r3, #20]
}
 8002420:	bf00      	nop
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800242c:	b480      	push	{r7}
 800242e:	b087      	sub	sp, #28
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	3330      	adds	r3, #48	; 0x30
 800243c:	461a      	mov	r2, r3
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	0a1b      	lsrs	r3, r3, #8
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	f003 030c 	and.w	r3, r3, #12
 8002448:	4413      	add	r3, r2
 800244a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	f003 031f 	and.w	r3, r3, #31
 8002456:	211f      	movs	r1, #31
 8002458:	fa01 f303 	lsl.w	r3, r1, r3
 800245c:	43db      	mvns	r3, r3
 800245e:	401a      	ands	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	0e9b      	lsrs	r3, r3, #26
 8002464:	f003 011f 	and.w	r1, r3, #31
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	f003 031f 	and.w	r3, r3, #31
 800246e:	fa01 f303 	lsl.w	r3, r1, r3
 8002472:	431a      	orrs	r2, r3
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002478:	bf00      	nop
 800247a:	371c      	adds	r7, #28
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002484:	b480      	push	{r7}
 8002486:	b087      	sub	sp, #28
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	3314      	adds	r3, #20
 8002494:	461a      	mov	r2, r3
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	0e5b      	lsrs	r3, r3, #25
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	f003 0304 	and.w	r3, r3, #4
 80024a0:	4413      	add	r3, r2
 80024a2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	0d1b      	lsrs	r3, r3, #20
 80024ac:	f003 031f 	and.w	r3, r3, #31
 80024b0:	2107      	movs	r1, #7
 80024b2:	fa01 f303 	lsl.w	r3, r1, r3
 80024b6:	43db      	mvns	r3, r3
 80024b8:	401a      	ands	r2, r3
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	0d1b      	lsrs	r3, r3, #20
 80024be:	f003 031f 	and.w	r3, r3, #31
 80024c2:	6879      	ldr	r1, [r7, #4]
 80024c4:	fa01 f303 	lsl.w	r3, r1, r3
 80024c8:	431a      	orrs	r2, r3
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80024ce:	bf00      	nop
 80024d0:	371c      	adds	r7, #28
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
	...

080024dc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80024dc:	b480      	push	{r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024f4:	43db      	mvns	r3, r3
 80024f6:	401a      	ands	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f003 0318 	and.w	r3, r3, #24
 80024fe:	4908      	ldr	r1, [pc, #32]	; (8002520 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002500:	40d9      	lsrs	r1, r3
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	400b      	ands	r3, r1
 8002506:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800250a:	431a      	orrs	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002512:	bf00      	nop
 8002514:	3714      	adds	r7, #20
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	0007ffff 	.word	0x0007ffff

08002524 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002534:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	6093      	str	r3, [r2, #8]
}
 800253c:	bf00      	nop
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002558:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800255c:	d101      	bne.n	8002562 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800255e:	2301      	movs	r3, #1
 8002560:	e000      	b.n	8002564 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002562:	2300      	movs	r3, #0
}
 8002564:	4618      	mov	r0, r3
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002580:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002584:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80025ac:	d101      	bne.n	80025b2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80025ae:	2301      	movs	r3, #1
 80025b0:	e000      	b.n	80025b4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80025b2:	2300      	movs	r3, #0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f003 0301 	and.w	r3, r3, #1
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d101      	bne.n	80025d8 <LL_ADC_IsEnabled+0x18>
 80025d4:	2301      	movs	r3, #1
 80025d6:	e000      	b.n	80025da <LL_ADC_IsEnabled+0x1a>
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr

080025e6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80025e6:	b480      	push	{r7}
 80025e8:	b083      	sub	sp, #12
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f003 0304 	and.w	r3, r3, #4
 80025f6:	2b04      	cmp	r3, #4
 80025f8:	d101      	bne.n	80025fe <LL_ADC_REG_IsConversionOngoing+0x18>
 80025fa:	2301      	movs	r3, #1
 80025fc:	e000      	b.n	8002600 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f003 0308 	and.w	r3, r3, #8
 800261c:	2b08      	cmp	r3, #8
 800261e:	d101      	bne.n	8002624 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002620:	2301      	movs	r3, #1
 8002622:	e000      	b.n	8002626 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
	...

08002634 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002634:	b590      	push	{r4, r7, lr}
 8002636:	b089      	sub	sp, #36	; 0x24
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800263c:	2300      	movs	r3, #0
 800263e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002640:	2300      	movs	r3, #0
 8002642:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e19b      	b.n	8002986 <HAL_ADC_Init+0x352>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002658:	2b00      	cmp	r3, #0
 800265a:	d109      	bne.n	8002670 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f7ff f8c7 	bl	80017f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4618      	mov	r0, r3
 8002676:	f7ff ff67 	bl	8002548 <LL_ADC_IsDeepPowerDownEnabled>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d004      	beq.n	800268a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4618      	mov	r0, r3
 8002686:	f7ff ff4d 	bl	8002524 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4618      	mov	r0, r3
 8002690:	f7ff ff82 	bl	8002598 <LL_ADC_IsInternalRegulatorEnabled>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d115      	bne.n	80026c6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4618      	mov	r0, r3
 80026a0:	f7ff ff66 	bl	8002570 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80026a4:	4b97      	ldr	r3, [pc, #604]	; (8002904 <HAL_ADC_Init+0x2d0>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	099b      	lsrs	r3, r3, #6
 80026aa:	4a97      	ldr	r2, [pc, #604]	; (8002908 <HAL_ADC_Init+0x2d4>)
 80026ac:	fba2 2303 	umull	r2, r3, r2, r3
 80026b0:	099b      	lsrs	r3, r3, #6
 80026b2:	3301      	adds	r3, #1
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80026b8:	e002      	b.n	80026c0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	3b01      	subs	r3, #1
 80026be:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d1f9      	bne.n	80026ba <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7ff ff64 	bl	8002598 <LL_ADC_IsInternalRegulatorEnabled>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d10d      	bne.n	80026f2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026da:	f043 0210 	orr.w	r2, r3, #16
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026e6:	f043 0201 	orr.w	r2, r3, #1
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff ff75 	bl	80025e6 <LL_ADC_REG_IsConversionOngoing>
 80026fc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002702:	f003 0310 	and.w	r3, r3, #16
 8002706:	2b00      	cmp	r3, #0
 8002708:	f040 8134 	bne.w	8002974 <HAL_ADC_Init+0x340>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	2b00      	cmp	r3, #0
 8002710:	f040 8130 	bne.w	8002974 <HAL_ADC_Init+0x340>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002718:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800271c:	f043 0202 	orr.w	r2, r3, #2
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff ff49 	bl	80025c0 <LL_ADC_IsEnabled>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d137      	bne.n	80027a4 <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800273c:	d004      	beq.n	8002748 <HAL_ADC_Init+0x114>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a72      	ldr	r2, [pc, #456]	; (800290c <HAL_ADC_Init+0x2d8>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d10f      	bne.n	8002768 <HAL_ADC_Init+0x134>
 8002748:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800274c:	f7ff ff38 	bl	80025c0 <LL_ADC_IsEnabled>
 8002750:	4604      	mov	r4, r0
 8002752:	486e      	ldr	r0, [pc, #440]	; (800290c <HAL_ADC_Init+0x2d8>)
 8002754:	f7ff ff34 	bl	80025c0 <LL_ADC_IsEnabled>
 8002758:	4603      	mov	r3, r0
 800275a:	4323      	orrs	r3, r4
 800275c:	2b00      	cmp	r3, #0
 800275e:	bf0c      	ite	eq
 8002760:	2301      	moveq	r3, #1
 8002762:	2300      	movne	r3, #0
 8002764:	b2db      	uxtb	r3, r3
 8002766:	e008      	b.n	800277a <HAL_ADC_Init+0x146>
 8002768:	4869      	ldr	r0, [pc, #420]	; (8002910 <HAL_ADC_Init+0x2dc>)
 800276a:	f7ff ff29 	bl	80025c0 <LL_ADC_IsEnabled>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	bf0c      	ite	eq
 8002774:	2301      	moveq	r3, #1
 8002776:	2300      	movne	r3, #0
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d012      	beq.n	80027a4 <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002786:	d004      	beq.n	8002792 <HAL_ADC_Init+0x15e>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a5f      	ldr	r2, [pc, #380]	; (800290c <HAL_ADC_Init+0x2d8>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d101      	bne.n	8002796 <HAL_ADC_Init+0x162>
 8002792:	4a60      	ldr	r2, [pc, #384]	; (8002914 <HAL_ADC_Init+0x2e0>)
 8002794:	e000      	b.n	8002798 <HAL_ADC_Init+0x164>
 8002796:	4a60      	ldr	r2, [pc, #384]	; (8002918 <HAL_ADC_Init+0x2e4>)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	4619      	mov	r1, r3
 800279e:	4610      	mov	r0, r2
 80027a0:	f7ff fd72 	bl	8002288 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	7f5b      	ldrb	r3, [r3, #29]
 80027a8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80027ae:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80027b4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80027ba:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027c2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80027c4:	4313      	orrs	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d106      	bne.n	80027e0 <HAL_ADC_Init+0x1ac>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d6:	3b01      	subs	r3, #1
 80027d8:	045b      	lsls	r3, r3, #17
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	4313      	orrs	r3, r2
 80027de:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d009      	beq.n	80027fc <HAL_ADC_Init+0x1c8>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ec:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80027f6:	69ba      	ldr	r2, [r7, #24]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68da      	ldr	r2, [r3, #12]
 8002802:	4b46      	ldr	r3, [pc, #280]	; (800291c <HAL_ADC_Init+0x2e8>)
 8002804:	4013      	ands	r3, r2
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	6812      	ldr	r2, [r2, #0]
 800280a:	69b9      	ldr	r1, [r7, #24]
 800280c:	430b      	orrs	r3, r1
 800280e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	430a      	orrs	r2, r1
 8002824:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff feee 	bl	800260c <LL_ADC_INJ_IsConversionOngoing>
 8002830:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d17b      	bne.n	8002930 <HAL_ADC_Init+0x2fc>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d178      	bne.n	8002930 <HAL_ADC_Init+0x2fc>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002842:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800284a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800284c:	4313      	orrs	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800285a:	f023 0302 	bic.w	r3, r3, #2
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	6812      	ldr	r2, [r2, #0]
 8002862:	69b9      	ldr	r1, [r7, #24]
 8002864:	430b      	orrs	r3, r1
 8002866:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d017      	beq.n	80028a0 <HAL_ADC_Init+0x26c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	691a      	ldr	r2, [r3, #16]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800287e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002888:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800288c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	6911      	ldr	r1, [r2, #16]
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	6812      	ldr	r2, [r2, #0]
 8002898:	430b      	orrs	r3, r1
 800289a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800289e:	e013      	b.n	80028c8 <HAL_ADC_Init+0x294>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	691a      	ldr	r2, [r3, #16]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80028ae:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	6812      	ldr	r2, [r2, #0]
 80028bc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80028c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80028c4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d126      	bne.n	8002920 <HAL_ADC_Init+0x2ec>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80028dc:	f023 0304 	bic.w	r3, r3, #4
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80028e8:	4311      	orrs	r1, r2
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80028ee:	4311      	orrs	r1, r2
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80028f4:	430a      	orrs	r2, r1
 80028f6:	431a      	orrs	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f042 0201 	orr.w	r2, r2, #1
 8002900:	611a      	str	r2, [r3, #16]
 8002902:	e015      	b.n	8002930 <HAL_ADC_Init+0x2fc>
 8002904:	2000012c 	.word	0x2000012c
 8002908:	053e2d63 	.word	0x053e2d63
 800290c:	50000100 	.word	0x50000100
 8002910:	50000400 	.word	0x50000400
 8002914:	50000300 	.word	0x50000300
 8002918:	50000700 	.word	0x50000700
 800291c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	691a      	ldr	r2, [r3, #16]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f022 0201 	bic.w	r2, r2, #1
 800292e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	695b      	ldr	r3, [r3, #20]
 8002934:	2b01      	cmp	r3, #1
 8002936:	d10c      	bne.n	8002952 <HAL_ADC_Init+0x31e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293e:	f023 010f 	bic.w	r1, r3, #15
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a1b      	ldr	r3, [r3, #32]
 8002946:	1e5a      	subs	r2, r3, #1
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	430a      	orrs	r2, r1
 800294e:	631a      	str	r2, [r3, #48]	; 0x30
 8002950:	e007      	b.n	8002962 <HAL_ADC_Init+0x32e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f022 020f 	bic.w	r2, r2, #15
 8002960:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002966:	f023 0303 	bic.w	r3, r3, #3
 800296a:	f043 0201 	orr.w	r2, r3, #1
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	65da      	str	r2, [r3, #92]	; 0x5c
 8002972:	e007      	b.n	8002984 <HAL_ADC_Init+0x350>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002978:	f043 0210 	orr.w	r2, r3, #16
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002984:	7ffb      	ldrb	r3, [r7, #31]
}
 8002986:	4618      	mov	r0, r3
 8002988:	3724      	adds	r7, #36	; 0x24
 800298a:	46bd      	mov	sp, r7
 800298c:	bd90      	pop	{r4, r7, pc}
 800298e:	bf00      	nop

08002990 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b0b6      	sub	sp, #216	; 0xd8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800299a:	2300      	movs	r3, #0
 800299c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80029a0:	2300      	movs	r3, #0
 80029a2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d102      	bne.n	80029b4 <HAL_ADC_ConfigChannel+0x24>
 80029ae:	2302      	movs	r3, #2
 80029b0:	f000 bc04 	b.w	80031bc <HAL_ADC_ConfigChannel+0x82c>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff fe10 	bl	80025e6 <LL_ADC_REG_IsConversionOngoing>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	f040 83e8 	bne.w	800319e <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6818      	ldr	r0, [r3, #0]
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	6859      	ldr	r1, [r3, #4]
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	461a      	mov	r2, r3
 80029dc:	f7ff fd26 	bl	800242c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7ff fdfe 	bl	80025e6 <LL_ADC_REG_IsConversionOngoing>
 80029ea:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7ff fe0a 	bl	800260c <LL_ADC_INJ_IsConversionOngoing>
 80029f8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80029fc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	f040 81d9 	bne.w	8002db8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a06:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	f040 81d4 	bne.w	8002db8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a18:	d10f      	bne.n	8002a3a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6818      	ldr	r0, [r3, #0]
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2200      	movs	r2, #0
 8002a24:	4619      	mov	r1, r3
 8002a26:	f7ff fd2d 	bl	8002484 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7ff fce7 	bl	8002406 <LL_ADC_SetSamplingTimeCommonConfig>
 8002a38:	e00e      	b.n	8002a58 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6818      	ldr	r0, [r3, #0]
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	6819      	ldr	r1, [r3, #0]
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	461a      	mov	r2, r3
 8002a48:	f7ff fd1c 	bl	8002484 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2100      	movs	r1, #0
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7ff fcd7 	bl	8002406 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	695a      	ldr	r2, [r3, #20]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	08db      	lsrs	r3, r3, #3
 8002a64:	f003 0303 	and.w	r3, r3, #3
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	2b04      	cmp	r3, #4
 8002a78:	d022      	beq.n	8002ac0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6818      	ldr	r0, [r3, #0]
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	6919      	ldr	r1, [r3, #16]
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002a8a:	f7ff fc31 	bl	80022f0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6818      	ldr	r0, [r3, #0]
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	6919      	ldr	r1, [r3, #16]
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	699b      	ldr	r3, [r3, #24]
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	f7ff fc7d 	bl	800239a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6818      	ldr	r0, [r3, #0]
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d102      	bne.n	8002ab6 <HAL_ADC_ConfigChannel+0x126>
 8002ab0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ab4:	e000      	b.n	8002ab8 <HAL_ADC_ConfigChannel+0x128>
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	461a      	mov	r2, r3
 8002aba:	f7ff fc89 	bl	80023d0 <LL_ADC_SetOffsetSaturation>
 8002abe:	e17b      	b.n	8002db8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7ff fc36 	bl	8002338 <LL_ADC_GetOffsetChannel>
 8002acc:	4603      	mov	r3, r0
 8002ace:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d10a      	bne.n	8002aec <HAL_ADC_ConfigChannel+0x15c>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2100      	movs	r1, #0
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff fc2b 	bl	8002338 <LL_ADC_GetOffsetChannel>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	0e9b      	lsrs	r3, r3, #26
 8002ae6:	f003 021f 	and.w	r2, r3, #31
 8002aea:	e01e      	b.n	8002b2a <HAL_ADC_ConfigChannel+0x19a>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2100      	movs	r1, #0
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7ff fc20 	bl	8002338 <LL_ADC_GetOffsetChannel>
 8002af8:	4603      	mov	r3, r0
 8002afa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002b02:	fa93 f3a3 	rbit	r3, r3
 8002b06:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b0a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002b0e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002b12:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002b1a:	2320      	movs	r3, #32
 8002b1c:	e004      	b.n	8002b28 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002b1e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b22:	fab3 f383 	clz	r3, r3
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d105      	bne.n	8002b42 <HAL_ADC_ConfigChannel+0x1b2>
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	0e9b      	lsrs	r3, r3, #26
 8002b3c:	f003 031f 	and.w	r3, r3, #31
 8002b40:	e018      	b.n	8002b74 <HAL_ADC_ConfigChannel+0x1e4>
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002b4e:	fa93 f3a3 	rbit	r3, r3
 8002b52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002b56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b5a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002b5e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002b66:	2320      	movs	r3, #32
 8002b68:	e004      	b.n	8002b74 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002b6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002b6e:	fab3 f383 	clz	r3, r3
 8002b72:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d106      	bne.n	8002b86 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	2100      	movs	r1, #0
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7ff fbef 	bl	8002364 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2101      	movs	r1, #1
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7ff fbd3 	bl	8002338 <LL_ADC_GetOffsetChannel>
 8002b92:	4603      	mov	r3, r0
 8002b94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d10a      	bne.n	8002bb2 <HAL_ADC_ConfigChannel+0x222>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2101      	movs	r1, #1
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7ff fbc8 	bl	8002338 <LL_ADC_GetOffsetChannel>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	0e9b      	lsrs	r3, r3, #26
 8002bac:	f003 021f 	and.w	r2, r3, #31
 8002bb0:	e01e      	b.n	8002bf0 <HAL_ADC_ConfigChannel+0x260>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff fbbd 	bl	8002338 <LL_ADC_GetOffsetChannel>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002bc8:	fa93 f3a3 	rbit	r3, r3
 8002bcc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002bd0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002bd4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002bd8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d101      	bne.n	8002be4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002be0:	2320      	movs	r3, #32
 8002be2:	e004      	b.n	8002bee <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002be4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002be8:	fab3 f383 	clz	r3, r3
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d105      	bne.n	8002c08 <HAL_ADC_ConfigChannel+0x278>
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	0e9b      	lsrs	r3, r3, #26
 8002c02:	f003 031f 	and.w	r3, r3, #31
 8002c06:	e018      	b.n	8002c3a <HAL_ADC_ConfigChannel+0x2aa>
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c14:	fa93 f3a3 	rbit	r3, r3
 8002c18:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002c1c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002c20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002c24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d101      	bne.n	8002c30 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002c2c:	2320      	movs	r3, #32
 8002c2e:	e004      	b.n	8002c3a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002c30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c34:	fab3 f383 	clz	r3, r3
 8002c38:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d106      	bne.n	8002c4c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2200      	movs	r2, #0
 8002c44:	2101      	movs	r1, #1
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7ff fb8c 	bl	8002364 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2102      	movs	r1, #2
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff fb70 	bl	8002338 <LL_ADC_GetOffsetChannel>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d10a      	bne.n	8002c78 <HAL_ADC_ConfigChannel+0x2e8>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2102      	movs	r1, #2
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7ff fb65 	bl	8002338 <LL_ADC_GetOffsetChannel>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	0e9b      	lsrs	r3, r3, #26
 8002c72:	f003 021f 	and.w	r2, r3, #31
 8002c76:	e01e      	b.n	8002cb6 <HAL_ADC_ConfigChannel+0x326>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2102      	movs	r1, #2
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7ff fb5a 	bl	8002338 <LL_ADC_GetOffsetChannel>
 8002c84:	4603      	mov	r3, r0
 8002c86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c8e:	fa93 f3a3 	rbit	r3, r3
 8002c92:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002c96:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002c9e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002ca6:	2320      	movs	r3, #32
 8002ca8:	e004      	b.n	8002cb4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002caa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002cae:	fab3 f383 	clz	r3, r3
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d105      	bne.n	8002cce <HAL_ADC_ConfigChannel+0x33e>
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	0e9b      	lsrs	r3, r3, #26
 8002cc8:	f003 031f 	and.w	r3, r3, #31
 8002ccc:	e016      	b.n	8002cfc <HAL_ADC_ConfigChannel+0x36c>
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002cda:	fa93 f3a3 	rbit	r3, r3
 8002cde:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002ce0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ce2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002ce6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002cee:	2320      	movs	r3, #32
 8002cf0:	e004      	b.n	8002cfc <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002cf2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002cf6:	fab3 f383 	clz	r3, r3
 8002cfa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d106      	bne.n	8002d0e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2200      	movs	r2, #0
 8002d06:	2102      	movs	r1, #2
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7ff fb2b 	bl	8002364 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2103      	movs	r1, #3
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7ff fb0f 	bl	8002338 <LL_ADC_GetOffsetChannel>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d10a      	bne.n	8002d3a <HAL_ADC_ConfigChannel+0x3aa>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2103      	movs	r1, #3
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7ff fb04 	bl	8002338 <LL_ADC_GetOffsetChannel>
 8002d30:	4603      	mov	r3, r0
 8002d32:	0e9b      	lsrs	r3, r3, #26
 8002d34:	f003 021f 	and.w	r2, r3, #31
 8002d38:	e017      	b.n	8002d6a <HAL_ADC_ConfigChannel+0x3da>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2103      	movs	r1, #3
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7ff faf9 	bl	8002338 <LL_ADC_GetOffsetChannel>
 8002d46:	4603      	mov	r3, r0
 8002d48:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d4c:	fa93 f3a3 	rbit	r3, r3
 8002d50:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002d52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d54:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002d56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d101      	bne.n	8002d60 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002d5c:	2320      	movs	r3, #32
 8002d5e:	e003      	b.n	8002d68 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002d60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d62:	fab3 f383 	clz	r3, r3
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d105      	bne.n	8002d82 <HAL_ADC_ConfigChannel+0x3f2>
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	0e9b      	lsrs	r3, r3, #26
 8002d7c:	f003 031f 	and.w	r3, r3, #31
 8002d80:	e011      	b.n	8002da6 <HAL_ADC_ConfigChannel+0x416>
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d8a:	fa93 f3a3 	rbit	r3, r3
 8002d8e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002d90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d92:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002d94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d101      	bne.n	8002d9e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002d9a:	2320      	movs	r3, #32
 8002d9c:	e003      	b.n	8002da6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002d9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002da0:	fab3 f383 	clz	r3, r3
 8002da4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d106      	bne.n	8002db8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2200      	movs	r2, #0
 8002db0:	2103      	movs	r1, #3
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7ff fad6 	bl	8002364 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7ff fbff 	bl	80025c0 <LL_ADC_IsEnabled>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f040 813d 	bne.w	8003044 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6818      	ldr	r0, [r3, #0]
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	6819      	ldr	r1, [r3, #0]
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	f7ff fb80 	bl	80024dc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	4aa2      	ldr	r2, [pc, #648]	; (800306c <HAL_ADC_ConfigChannel+0x6dc>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	f040 812e 	bne.w	8003044 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d10b      	bne.n	8002e10 <HAL_ADC_ConfigChannel+0x480>
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	0e9b      	lsrs	r3, r3, #26
 8002dfe:	3301      	adds	r3, #1
 8002e00:	f003 031f 	and.w	r3, r3, #31
 8002e04:	2b09      	cmp	r3, #9
 8002e06:	bf94      	ite	ls
 8002e08:	2301      	movls	r3, #1
 8002e0a:	2300      	movhi	r3, #0
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	e019      	b.n	8002e44 <HAL_ADC_ConfigChannel+0x4b4>
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e18:	fa93 f3a3 	rbit	r3, r3
 8002e1c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002e1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e20:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002e22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d101      	bne.n	8002e2c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002e28:	2320      	movs	r3, #32
 8002e2a:	e003      	b.n	8002e34 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002e2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e2e:	fab3 f383 	clz	r3, r3
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	3301      	adds	r3, #1
 8002e36:	f003 031f 	and.w	r3, r3, #31
 8002e3a:	2b09      	cmp	r3, #9
 8002e3c:	bf94      	ite	ls
 8002e3e:	2301      	movls	r3, #1
 8002e40:	2300      	movhi	r3, #0
 8002e42:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d079      	beq.n	8002f3c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d107      	bne.n	8002e64 <HAL_ADC_ConfigChannel+0x4d4>
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	0e9b      	lsrs	r3, r3, #26
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	069b      	lsls	r3, r3, #26
 8002e5e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e62:	e015      	b.n	8002e90 <HAL_ADC_ConfigChannel+0x500>
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e6c:	fa93 f3a3 	rbit	r3, r3
 8002e70:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002e72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e74:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002e76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d101      	bne.n	8002e80 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002e7c:	2320      	movs	r3, #32
 8002e7e:	e003      	b.n	8002e88 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002e80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e82:	fab3 f383 	clz	r3, r3
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	3301      	adds	r3, #1
 8002e8a:	069b      	lsls	r3, r3, #26
 8002e8c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d109      	bne.n	8002eb0 <HAL_ADC_ConfigChannel+0x520>
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	0e9b      	lsrs	r3, r3, #26
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	f003 031f 	and.w	r3, r3, #31
 8002ea8:	2101      	movs	r1, #1
 8002eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8002eae:	e017      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0x550>
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002eb8:	fa93 f3a3 	rbit	r3, r3
 8002ebc:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002ebe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ec0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002ec2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d101      	bne.n	8002ecc <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002ec8:	2320      	movs	r3, #32
 8002eca:	e003      	b.n	8002ed4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002ecc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ece:	fab3 f383 	clz	r3, r3
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	f003 031f 	and.w	r3, r3, #31
 8002eda:	2101      	movs	r1, #1
 8002edc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee0:	ea42 0103 	orr.w	r1, r2, r3
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d10a      	bne.n	8002f06 <HAL_ADC_ConfigChannel+0x576>
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	0e9b      	lsrs	r3, r3, #26
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	f003 021f 	and.w	r2, r3, #31
 8002efc:	4613      	mov	r3, r2
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	4413      	add	r3, r2
 8002f02:	051b      	lsls	r3, r3, #20
 8002f04:	e018      	b.n	8002f38 <HAL_ADC_ConfigChannel+0x5a8>
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f0e:	fa93 f3a3 	rbit	r3, r3
 8002f12:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f16:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002f18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d101      	bne.n	8002f22 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002f1e:	2320      	movs	r3, #32
 8002f20:	e003      	b.n	8002f2a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002f22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f24:	fab3 f383 	clz	r3, r3
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	f003 021f 	and.w	r2, r3, #31
 8002f30:	4613      	mov	r3, r2
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	4413      	add	r3, r2
 8002f36:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f38:	430b      	orrs	r3, r1
 8002f3a:	e07e      	b.n	800303a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d107      	bne.n	8002f58 <HAL_ADC_ConfigChannel+0x5c8>
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	0e9b      	lsrs	r3, r3, #26
 8002f4e:	3301      	adds	r3, #1
 8002f50:	069b      	lsls	r3, r3, #26
 8002f52:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f56:	e015      	b.n	8002f84 <HAL_ADC_ConfigChannel+0x5f4>
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f60:	fa93 f3a3 	rbit	r3, r3
 8002f64:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f68:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d101      	bne.n	8002f74 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002f70:	2320      	movs	r3, #32
 8002f72:	e003      	b.n	8002f7c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f76:	fab3 f383 	clz	r3, r3
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	069b      	lsls	r3, r3, #26
 8002f80:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d109      	bne.n	8002fa4 <HAL_ADC_ConfigChannel+0x614>
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	0e9b      	lsrs	r3, r3, #26
 8002f96:	3301      	adds	r3, #1
 8002f98:	f003 031f 	and.w	r3, r3, #31
 8002f9c:	2101      	movs	r1, #1
 8002f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa2:	e017      	b.n	8002fd4 <HAL_ADC_ConfigChannel+0x644>
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002faa:	6a3b      	ldr	r3, [r7, #32]
 8002fac:	fa93 f3a3 	rbit	r3, r3
 8002fb0:	61fb      	str	r3, [r7, #28]
  return result;
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d101      	bne.n	8002fc0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002fbc:	2320      	movs	r3, #32
 8002fbe:	e003      	b.n	8002fc8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc2:	fab3 f383 	clz	r3, r3
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	3301      	adds	r3, #1
 8002fca:	f003 031f 	and.w	r3, r3, #31
 8002fce:	2101      	movs	r1, #1
 8002fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd4:	ea42 0103 	orr.w	r1, r2, r3
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d10d      	bne.n	8003000 <HAL_ADC_ConfigChannel+0x670>
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	0e9b      	lsrs	r3, r3, #26
 8002fea:	3301      	adds	r3, #1
 8002fec:	f003 021f 	and.w	r2, r3, #31
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	005b      	lsls	r3, r3, #1
 8002ff4:	4413      	add	r3, r2
 8002ff6:	3b1e      	subs	r3, #30
 8002ff8:	051b      	lsls	r3, r3, #20
 8002ffa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ffe:	e01b      	b.n	8003038 <HAL_ADC_ConfigChannel+0x6a8>
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	fa93 f3a3 	rbit	r3, r3
 800300c:	613b      	str	r3, [r7, #16]
  return result;
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d101      	bne.n	800301c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003018:	2320      	movs	r3, #32
 800301a:	e003      	b.n	8003024 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	fab3 f383 	clz	r3, r3
 8003022:	b2db      	uxtb	r3, r3
 8003024:	3301      	adds	r3, #1
 8003026:	f003 021f 	and.w	r2, r3, #31
 800302a:	4613      	mov	r3, r2
 800302c:	005b      	lsls	r3, r3, #1
 800302e:	4413      	add	r3, r2
 8003030:	3b1e      	subs	r3, #30
 8003032:	051b      	lsls	r3, r3, #20
 8003034:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003038:	430b      	orrs	r3, r1
 800303a:	683a      	ldr	r2, [r7, #0]
 800303c:	6892      	ldr	r2, [r2, #8]
 800303e:	4619      	mov	r1, r3
 8003040:	f7ff fa20 	bl	8002484 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	4b09      	ldr	r3, [pc, #36]	; (8003070 <HAL_ADC_ConfigChannel+0x6e0>)
 800304a:	4013      	ands	r3, r2
 800304c:	2b00      	cmp	r3, #0
 800304e:	f000 80af 	beq.w	80031b0 <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800305a:	d004      	beq.n	8003066 <HAL_ADC_ConfigChannel+0x6d6>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a04      	ldr	r2, [pc, #16]	; (8003074 <HAL_ADC_ConfigChannel+0x6e4>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d10a      	bne.n	800307c <HAL_ADC_ConfigChannel+0x6ec>
 8003066:	4b04      	ldr	r3, [pc, #16]	; (8003078 <HAL_ADC_ConfigChannel+0x6e8>)
 8003068:	e009      	b.n	800307e <HAL_ADC_ConfigChannel+0x6ee>
 800306a:	bf00      	nop
 800306c:	407f0000 	.word	0x407f0000
 8003070:	80080000 	.word	0x80080000
 8003074:	50000100 	.word	0x50000100
 8003078:	50000300 	.word	0x50000300
 800307c:	4b51      	ldr	r3, [pc, #324]	; (80031c4 <HAL_ADC_ConfigChannel+0x834>)
 800307e:	4618      	mov	r0, r3
 8003080:	f7ff f928 	bl	80022d4 <LL_ADC_GetCommonPathInternalCh>
 8003084:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a4e      	ldr	r2, [pc, #312]	; (80031c8 <HAL_ADC_ConfigChannel+0x838>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d004      	beq.n	800309c <HAL_ADC_ConfigChannel+0x70c>
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a4d      	ldr	r2, [pc, #308]	; (80031cc <HAL_ADC_ConfigChannel+0x83c>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d134      	bne.n	8003106 <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800309c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d12e      	bne.n	8003106 <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030b0:	d17e      	bne.n	80031b0 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030ba:	d004      	beq.n	80030c6 <HAL_ADC_ConfigChannel+0x736>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a43      	ldr	r2, [pc, #268]	; (80031d0 <HAL_ADC_ConfigChannel+0x840>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d101      	bne.n	80030ca <HAL_ADC_ConfigChannel+0x73a>
 80030c6:	4a43      	ldr	r2, [pc, #268]	; (80031d4 <HAL_ADC_ConfigChannel+0x844>)
 80030c8:	e000      	b.n	80030cc <HAL_ADC_ConfigChannel+0x73c>
 80030ca:	4a3e      	ldr	r2, [pc, #248]	; (80031c4 <HAL_ADC_ConfigChannel+0x834>)
 80030cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80030d4:	4619      	mov	r1, r3
 80030d6:	4610      	mov	r0, r2
 80030d8:	f7ff f8e9 	bl	80022ae <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030dc:	4b3e      	ldr	r3, [pc, #248]	; (80031d8 <HAL_ADC_ConfigChannel+0x848>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	099b      	lsrs	r3, r3, #6
 80030e2:	4a3e      	ldr	r2, [pc, #248]	; (80031dc <HAL_ADC_ConfigChannel+0x84c>)
 80030e4:	fba2 2303 	umull	r2, r3, r2, r3
 80030e8:	099b      	lsrs	r3, r3, #6
 80030ea:	1c5a      	adds	r2, r3, #1
 80030ec:	4613      	mov	r3, r2
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	4413      	add	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80030f6:	e002      	b.n	80030fe <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	3b01      	subs	r3, #1
 80030fc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1f9      	bne.n	80030f8 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003104:	e054      	b.n	80031b0 <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a35      	ldr	r2, [pc, #212]	; (80031e0 <HAL_ADC_ConfigChannel+0x850>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d120      	bne.n	8003152 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003110:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003114:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d11a      	bne.n	8003152 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003124:	d144      	bne.n	80031b0 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800312e:	d004      	beq.n	800313a <HAL_ADC_ConfigChannel+0x7aa>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a26      	ldr	r2, [pc, #152]	; (80031d0 <HAL_ADC_ConfigChannel+0x840>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d101      	bne.n	800313e <HAL_ADC_ConfigChannel+0x7ae>
 800313a:	4a26      	ldr	r2, [pc, #152]	; (80031d4 <HAL_ADC_ConfigChannel+0x844>)
 800313c:	e000      	b.n	8003140 <HAL_ADC_ConfigChannel+0x7b0>
 800313e:	4a21      	ldr	r2, [pc, #132]	; (80031c4 <HAL_ADC_ConfigChannel+0x834>)
 8003140:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003144:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003148:	4619      	mov	r1, r3
 800314a:	4610      	mov	r0, r2
 800314c:	f7ff f8af 	bl	80022ae <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003150:	e02e      	b.n	80031b0 <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a23      	ldr	r2, [pc, #140]	; (80031e4 <HAL_ADC_ConfigChannel+0x854>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d129      	bne.n	80031b0 <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800315c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003160:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d123      	bne.n	80031b0 <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a18      	ldr	r2, [pc, #96]	; (80031d0 <HAL_ADC_ConfigChannel+0x840>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d01e      	beq.n	80031b0 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800317a:	d004      	beq.n	8003186 <HAL_ADC_ConfigChannel+0x7f6>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a13      	ldr	r2, [pc, #76]	; (80031d0 <HAL_ADC_ConfigChannel+0x840>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d101      	bne.n	800318a <HAL_ADC_ConfigChannel+0x7fa>
 8003186:	4a13      	ldr	r2, [pc, #76]	; (80031d4 <HAL_ADC_ConfigChannel+0x844>)
 8003188:	e000      	b.n	800318c <HAL_ADC_ConfigChannel+0x7fc>
 800318a:	4a0e      	ldr	r2, [pc, #56]	; (80031c4 <HAL_ADC_ConfigChannel+0x834>)
 800318c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003190:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003194:	4619      	mov	r1, r3
 8003196:	4610      	mov	r0, r2
 8003198:	f7ff f889 	bl	80022ae <LL_ADC_SetCommonPathInternalCh>
 800319c:	e008      	b.n	80031b0 <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031a2:	f043 0220 	orr.w	r2, r3, #32
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80031b8:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80031bc:	4618      	mov	r0, r3
 80031be:	37d8      	adds	r7, #216	; 0xd8
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	50000700 	.word	0x50000700
 80031c8:	c3210000 	.word	0xc3210000
 80031cc:	90c00010 	.word	0x90c00010
 80031d0:	50000100 	.word	0x50000100
 80031d4:	50000300 	.word	0x50000300
 80031d8:	2000012c 	.word	0x2000012c
 80031dc:	053e2d63 	.word	0x053e2d63
 80031e0:	c7520000 	.word	0xc7520000
 80031e4:	cb840000 	.word	0xcb840000

080031e8 <LL_ADC_IsEnabled>:
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f003 0301 	and.w	r3, r3, #1
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d101      	bne.n	8003200 <LL_ADC_IsEnabled+0x18>
 80031fc:	2301      	movs	r3, #1
 80031fe:	e000      	b.n	8003202 <LL_ADC_IsEnabled+0x1a>
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr

0800320e <LL_ADC_REG_IsConversionOngoing>:
{
 800320e:	b480      	push	{r7}
 8003210:	b083      	sub	sp, #12
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f003 0304 	and.w	r3, r3, #4
 800321e:	2b04      	cmp	r3, #4
 8003220:	d101      	bne.n	8003226 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003222:	2301      	movs	r3, #1
 8003224:	e000      	b.n	8003228 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003226:	2300      	movs	r3, #0
}
 8003228:	4618      	mov	r0, r3
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003234:	b590      	push	{r4, r7, lr}
 8003236:	b0a1      	sub	sp, #132	; 0x84
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800323e:	2300      	movs	r3, #0
 8003240:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800324a:	2b01      	cmp	r3, #1
 800324c:	d101      	bne.n	8003252 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800324e:	2302      	movs	r3, #2
 8003250:	e0cb      	b.n	80033ea <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2201      	movs	r2, #1
 8003256:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800325a:	2300      	movs	r3, #0
 800325c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800325e:	2300      	movs	r3, #0
 8003260:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800326a:	d102      	bne.n	8003272 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800326c:	4b61      	ldr	r3, [pc, #388]	; (80033f4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800326e:	60bb      	str	r3, [r7, #8]
 8003270:	e001      	b.n	8003276 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003272:	2300      	movs	r3, #0
 8003274:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d10b      	bne.n	8003294 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003280:	f043 0220 	orr.w	r2, r3, #32
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e0aa      	b.n	80033ea <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	4618      	mov	r0, r3
 8003298:	f7ff ffb9 	bl	800320e <LL_ADC_REG_IsConversionOngoing>
 800329c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7ff ffb3 	bl	800320e <LL_ADC_REG_IsConversionOngoing>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	f040 808c 	bne.w	80033c8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80032b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	f040 8088 	bne.w	80033c8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032c0:	d004      	beq.n	80032cc <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a4b      	ldr	r2, [pc, #300]	; (80033f4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d101      	bne.n	80032d0 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 80032cc:	4b4a      	ldr	r3, [pc, #296]	; (80033f8 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 80032ce:	e000      	b.n	80032d2 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80032d0:	4b4a      	ldr	r3, [pc, #296]	; (80033fc <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 80032d2:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d041      	beq.n	8003360 <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80032dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	6859      	ldr	r1, [r3, #4]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80032ee:	035b      	lsls	r3, r3, #13
 80032f0:	430b      	orrs	r3, r1
 80032f2:	431a      	orrs	r2, r3
 80032f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032f6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003300:	d004      	beq.n	800330c <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a3b      	ldr	r2, [pc, #236]	; (80033f4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d10f      	bne.n	800332c <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 800330c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003310:	f7ff ff6a 	bl	80031e8 <LL_ADC_IsEnabled>
 8003314:	4604      	mov	r4, r0
 8003316:	4837      	ldr	r0, [pc, #220]	; (80033f4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003318:	f7ff ff66 	bl	80031e8 <LL_ADC_IsEnabled>
 800331c:	4603      	mov	r3, r0
 800331e:	4323      	orrs	r3, r4
 8003320:	2b00      	cmp	r3, #0
 8003322:	bf0c      	ite	eq
 8003324:	2301      	moveq	r3, #1
 8003326:	2300      	movne	r3, #0
 8003328:	b2db      	uxtb	r3, r3
 800332a:	e008      	b.n	800333e <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 800332c:	4834      	ldr	r0, [pc, #208]	; (8003400 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 800332e:	f7ff ff5b 	bl	80031e8 <LL_ADC_IsEnabled>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	bf0c      	ite	eq
 8003338:	2301      	moveq	r3, #1
 800333a:	2300      	movne	r3, #0
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b00      	cmp	r3, #0
 8003340:	d04c      	beq.n	80033dc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003342:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800334a:	f023 030f 	bic.w	r3, r3, #15
 800334e:	683a      	ldr	r2, [r7, #0]
 8003350:	6811      	ldr	r1, [r2, #0]
 8003352:	683a      	ldr	r2, [r7, #0]
 8003354:	6892      	ldr	r2, [r2, #8]
 8003356:	430a      	orrs	r2, r1
 8003358:	431a      	orrs	r2, r3
 800335a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800335c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800335e:	e03d      	b.n	80033dc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003360:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003368:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800336a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003374:	d004      	beq.n	8003380 <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a1e      	ldr	r2, [pc, #120]	; (80033f4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d10f      	bne.n	80033a0 <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 8003380:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003384:	f7ff ff30 	bl	80031e8 <LL_ADC_IsEnabled>
 8003388:	4604      	mov	r4, r0
 800338a:	481a      	ldr	r0, [pc, #104]	; (80033f4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800338c:	f7ff ff2c 	bl	80031e8 <LL_ADC_IsEnabled>
 8003390:	4603      	mov	r3, r0
 8003392:	4323      	orrs	r3, r4
 8003394:	2b00      	cmp	r3, #0
 8003396:	bf0c      	ite	eq
 8003398:	2301      	moveq	r3, #1
 800339a:	2300      	movne	r3, #0
 800339c:	b2db      	uxtb	r3, r3
 800339e:	e008      	b.n	80033b2 <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 80033a0:	4817      	ldr	r0, [pc, #92]	; (8003400 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 80033a2:	f7ff ff21 	bl	80031e8 <LL_ADC_IsEnabled>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	bf0c      	ite	eq
 80033ac:	2301      	moveq	r3, #1
 80033ae:	2300      	movne	r3, #0
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d012      	beq.n	80033dc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80033b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80033be:	f023 030f 	bic.w	r3, r3, #15
 80033c2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80033c4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80033c6:	e009      	b.n	80033dc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033cc:	f043 0220 	orr.w	r2, r3, #32
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80033da:	e000      	b.n	80033de <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80033dc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80033e6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3784      	adds	r7, #132	; 0x84
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd90      	pop	{r4, r7, pc}
 80033f2:	bf00      	nop
 80033f4:	50000100 	.word	0x50000100
 80033f8:	50000300 	.word	0x50000300
 80033fc:	50000700 	.word	0x50000700
 8003400:	50000400 	.word	0x50000400

08003404 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003404:	b480      	push	{r7}
 8003406:	b085      	sub	sp, #20
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f003 0307 	and.w	r3, r3, #7
 8003412:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003414:	4b0c      	ldr	r3, [pc, #48]	; (8003448 <__NVIC_SetPriorityGrouping+0x44>)
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800341a:	68ba      	ldr	r2, [r7, #8]
 800341c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003420:	4013      	ands	r3, r2
 8003422:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800342c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003430:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003434:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003436:	4a04      	ldr	r2, [pc, #16]	; (8003448 <__NVIC_SetPriorityGrouping+0x44>)
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	60d3      	str	r3, [r2, #12]
}
 800343c:	bf00      	nop
 800343e:	3714      	adds	r7, #20
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr
 8003448:	e000ed00 	.word	0xe000ed00

0800344c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800344c:	b480      	push	{r7}
 800344e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003450:	4b04      	ldr	r3, [pc, #16]	; (8003464 <__NVIC_GetPriorityGrouping+0x18>)
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	0a1b      	lsrs	r3, r3, #8
 8003456:	f003 0307 	and.w	r3, r3, #7
}
 800345a:	4618      	mov	r0, r3
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr
 8003464:	e000ed00 	.word	0xe000ed00

08003468 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	4603      	mov	r3, r0
 8003470:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003476:	2b00      	cmp	r3, #0
 8003478:	db0b      	blt.n	8003492 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800347a:	79fb      	ldrb	r3, [r7, #7]
 800347c:	f003 021f 	and.w	r2, r3, #31
 8003480:	4907      	ldr	r1, [pc, #28]	; (80034a0 <__NVIC_EnableIRQ+0x38>)
 8003482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003486:	095b      	lsrs	r3, r3, #5
 8003488:	2001      	movs	r0, #1
 800348a:	fa00 f202 	lsl.w	r2, r0, r2
 800348e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003492:	bf00      	nop
 8003494:	370c      	adds	r7, #12
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	e000e100 	.word	0xe000e100

080034a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	4603      	mov	r3, r0
 80034ac:	6039      	str	r1, [r7, #0]
 80034ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	db0a      	blt.n	80034ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	b2da      	uxtb	r2, r3
 80034bc:	490c      	ldr	r1, [pc, #48]	; (80034f0 <__NVIC_SetPriority+0x4c>)
 80034be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c2:	0112      	lsls	r2, r2, #4
 80034c4:	b2d2      	uxtb	r2, r2
 80034c6:	440b      	add	r3, r1
 80034c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034cc:	e00a      	b.n	80034e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	b2da      	uxtb	r2, r3
 80034d2:	4908      	ldr	r1, [pc, #32]	; (80034f4 <__NVIC_SetPriority+0x50>)
 80034d4:	79fb      	ldrb	r3, [r7, #7]
 80034d6:	f003 030f 	and.w	r3, r3, #15
 80034da:	3b04      	subs	r3, #4
 80034dc:	0112      	lsls	r2, r2, #4
 80034de:	b2d2      	uxtb	r2, r2
 80034e0:	440b      	add	r3, r1
 80034e2:	761a      	strb	r2, [r3, #24]
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr
 80034f0:	e000e100 	.word	0xe000e100
 80034f4:	e000ed00 	.word	0xe000ed00

080034f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b089      	sub	sp, #36	; 0x24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f003 0307 	and.w	r3, r3, #7
 800350a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	f1c3 0307 	rsb	r3, r3, #7
 8003512:	2b04      	cmp	r3, #4
 8003514:	bf28      	it	cs
 8003516:	2304      	movcs	r3, #4
 8003518:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	3304      	adds	r3, #4
 800351e:	2b06      	cmp	r3, #6
 8003520:	d902      	bls.n	8003528 <NVIC_EncodePriority+0x30>
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	3b03      	subs	r3, #3
 8003526:	e000      	b.n	800352a <NVIC_EncodePriority+0x32>
 8003528:	2300      	movs	r3, #0
 800352a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800352c:	f04f 32ff 	mov.w	r2, #4294967295
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	fa02 f303 	lsl.w	r3, r2, r3
 8003536:	43da      	mvns	r2, r3
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	401a      	ands	r2, r3
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003540:	f04f 31ff 	mov.w	r1, #4294967295
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	fa01 f303 	lsl.w	r3, r1, r3
 800354a:	43d9      	mvns	r1, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003550:	4313      	orrs	r3, r2
         );
}
 8003552:	4618      	mov	r0, r3
 8003554:	3724      	adds	r7, #36	; 0x24
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
	...

08003560 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	3b01      	subs	r3, #1
 800356c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003570:	d301      	bcc.n	8003576 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003572:	2301      	movs	r3, #1
 8003574:	e00f      	b.n	8003596 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003576:	4a0a      	ldr	r2, [pc, #40]	; (80035a0 <SysTick_Config+0x40>)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	3b01      	subs	r3, #1
 800357c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800357e:	210f      	movs	r1, #15
 8003580:	f04f 30ff 	mov.w	r0, #4294967295
 8003584:	f7ff ff8e 	bl	80034a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003588:	4b05      	ldr	r3, [pc, #20]	; (80035a0 <SysTick_Config+0x40>)
 800358a:	2200      	movs	r2, #0
 800358c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800358e:	4b04      	ldr	r3, [pc, #16]	; (80035a0 <SysTick_Config+0x40>)
 8003590:	2207      	movs	r2, #7
 8003592:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3708      	adds	r7, #8
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	e000e010 	.word	0xe000e010

080035a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f7ff ff29 	bl	8003404 <__NVIC_SetPriorityGrouping>
}
 80035b2:	bf00      	nop
 80035b4:	3708      	adds	r7, #8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b086      	sub	sp, #24
 80035be:	af00      	add	r7, sp, #0
 80035c0:	4603      	mov	r3, r0
 80035c2:	60b9      	str	r1, [r7, #8]
 80035c4:	607a      	str	r2, [r7, #4]
 80035c6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80035c8:	f7ff ff40 	bl	800344c <__NVIC_GetPriorityGrouping>
 80035cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	68b9      	ldr	r1, [r7, #8]
 80035d2:	6978      	ldr	r0, [r7, #20]
 80035d4:	f7ff ff90 	bl	80034f8 <NVIC_EncodePriority>
 80035d8:	4602      	mov	r2, r0
 80035da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035de:	4611      	mov	r1, r2
 80035e0:	4618      	mov	r0, r3
 80035e2:	f7ff ff5f 	bl	80034a4 <__NVIC_SetPriority>
}
 80035e6:	bf00      	nop
 80035e8:	3718      	adds	r7, #24
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b082      	sub	sp, #8
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	4603      	mov	r3, r0
 80035f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7ff ff33 	bl	8003468 <__NVIC_EnableIRQ>
}
 8003602:	bf00      	nop
 8003604:	3708      	adds	r7, #8
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800360a:	b580      	push	{r7, lr}
 800360c:	b082      	sub	sp, #8
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f7ff ffa4 	bl	8003560 <SysTick_Config>
 8003618:	4603      	mov	r3, r0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3708      	adds	r7, #8
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
	...

08003624 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d101      	bne.n	8003636 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e08d      	b.n	8003752 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	461a      	mov	r2, r3
 800363c:	4b47      	ldr	r3, [pc, #284]	; (800375c <HAL_DMA_Init+0x138>)
 800363e:	429a      	cmp	r2, r3
 8003640:	d80f      	bhi.n	8003662 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	461a      	mov	r2, r3
 8003648:	4b45      	ldr	r3, [pc, #276]	; (8003760 <HAL_DMA_Init+0x13c>)
 800364a:	4413      	add	r3, r2
 800364c:	4a45      	ldr	r2, [pc, #276]	; (8003764 <HAL_DMA_Init+0x140>)
 800364e:	fba2 2303 	umull	r2, r3, r2, r3
 8003652:	091b      	lsrs	r3, r3, #4
 8003654:	009a      	lsls	r2, r3, #2
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a42      	ldr	r2, [pc, #264]	; (8003768 <HAL_DMA_Init+0x144>)
 800365e:	641a      	str	r2, [r3, #64]	; 0x40
 8003660:	e00e      	b.n	8003680 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	461a      	mov	r2, r3
 8003668:	4b40      	ldr	r3, [pc, #256]	; (800376c <HAL_DMA_Init+0x148>)
 800366a:	4413      	add	r3, r2
 800366c:	4a3d      	ldr	r2, [pc, #244]	; (8003764 <HAL_DMA_Init+0x140>)
 800366e:	fba2 2303 	umull	r2, r3, r2, r3
 8003672:	091b      	lsrs	r3, r3, #4
 8003674:	009a      	lsls	r2, r3, #2
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a3c      	ldr	r2, [pc, #240]	; (8003770 <HAL_DMA_Init+0x14c>)
 800367e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2202      	movs	r2, #2
 8003684:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800369a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80036a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80036c4:	68fa      	ldr	r2, [r7, #12]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68fa      	ldr	r2, [r7, #12]
 80036d0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 f9be 	bl	8003a54 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036e0:	d102      	bne.n	80036e8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685a      	ldr	r2, [r3, #4]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036f0:	b2d2      	uxtb	r2, r2
 80036f2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80036fc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d010      	beq.n	8003728 <HAL_DMA_Init+0x104>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	2b04      	cmp	r3, #4
 800370c:	d80c      	bhi.n	8003728 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 f9de 	bl	8003ad0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003718:	2200      	movs	r2, #0
 800371a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003724:	605a      	str	r2, [r3, #4]
 8003726:	e008      	b.n	800373a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3710      	adds	r7, #16
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	40020407 	.word	0x40020407
 8003760:	bffdfff8 	.word	0xbffdfff8
 8003764:	cccccccd 	.word	0xcccccccd
 8003768:	40020000 	.word	0x40020000
 800376c:	bffdfbf8 	.word	0xbffdfbf8
 8003770:	40020400 	.word	0x40020400

08003774 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003774:	b480      	push	{r7}
 8003776:	b085      	sub	sp, #20
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800377c:	2300      	movs	r3, #0
 800377e:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003786:	b2db      	uxtb	r3, r3
 8003788:	2b02      	cmp	r3, #2
 800378a:	d005      	beq.n	8003798 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2204      	movs	r2, #4
 8003790:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	73fb      	strb	r3, [r7, #15]
 8003796:	e037      	b.n	8003808 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f022 020e 	bic.w	r2, r2, #14
 80037a6:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037b6:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f022 0201 	bic.w	r2, r2, #1
 80037c6:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037cc:	f003 021f 	and.w	r2, r3, #31
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d4:	2101      	movs	r1, #1
 80037d6:	fa01 f202 	lsl.w	r2, r1, r2
 80037da:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80037e4:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00c      	beq.n	8003808 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037fc:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003806:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8003818:	7bfb      	ldrb	r3, [r7, #15]
}
 800381a:	4618      	mov	r0, r3
 800381c:	3714      	adds	r7, #20
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr

08003826 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003826:	b580      	push	{r7, lr}
 8003828:	b084      	sub	sp, #16
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800382e:	2300      	movs	r3, #0
 8003830:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003838:	b2db      	uxtb	r3, r3
 800383a:	2b02      	cmp	r3, #2
 800383c:	d00d      	beq.n	800385a <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2204      	movs	r2, #4
 8003842:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	73fb      	strb	r3, [r7, #15]
 8003858:	e047      	b.n	80038ea <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f022 020e 	bic.w	r2, r2, #14
 8003868:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 0201 	bic.w	r2, r2, #1
 8003878:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003884:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003888:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800388e:	f003 021f 	and.w	r2, r3, #31
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003896:	2101      	movs	r1, #1
 8003898:	fa01 f202 	lsl.w	r2, r1, r2
 800389c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80038a6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d00c      	beq.n	80038ca <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038be:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80038c8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d003      	beq.n	80038ea <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	4798      	blx	r3
    }
  }
  return status;
 80038ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3710      	adds	r7, #16
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003910:	f003 031f 	and.w	r3, r3, #31
 8003914:	2204      	movs	r2, #4
 8003916:	409a      	lsls	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	4013      	ands	r3, r2
 800391c:	2b00      	cmp	r3, #0
 800391e:	d026      	beq.n	800396e <HAL_DMA_IRQHandler+0x7a>
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	f003 0304 	and.w	r3, r3, #4
 8003926:	2b00      	cmp	r3, #0
 8003928:	d021      	beq.n	800396e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0320 	and.w	r3, r3, #32
 8003934:	2b00      	cmp	r3, #0
 8003936:	d107      	bne.n	8003948 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f022 0204 	bic.w	r2, r2, #4
 8003946:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800394c:	f003 021f 	and.w	r2, r3, #31
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003954:	2104      	movs	r1, #4
 8003956:	fa01 f202 	lsl.w	r2, r1, r2
 800395a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003960:	2b00      	cmp	r3, #0
 8003962:	d071      	beq.n	8003a48 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800396c:	e06c      	b.n	8003a48 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003972:	f003 031f 	and.w	r3, r3, #31
 8003976:	2202      	movs	r2, #2
 8003978:	409a      	lsls	r2, r3
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	4013      	ands	r3, r2
 800397e:	2b00      	cmp	r3, #0
 8003980:	d02e      	beq.n	80039e0 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	f003 0302 	and.w	r3, r3, #2
 8003988:	2b00      	cmp	r3, #0
 800398a:	d029      	beq.n	80039e0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0320 	and.w	r3, r3, #32
 8003996:	2b00      	cmp	r3, #0
 8003998:	d10b      	bne.n	80039b2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f022 020a 	bic.w	r2, r2, #10
 80039a8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2201      	movs	r2, #1
 80039ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b6:	f003 021f 	and.w	r2, r3, #31
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039be:	2102      	movs	r1, #2
 80039c0:	fa01 f202 	lsl.w	r2, r1, r2
 80039c4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d038      	beq.n	8003a48 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80039de:	e033      	b.n	8003a48 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e4:	f003 031f 	and.w	r3, r3, #31
 80039e8:	2208      	movs	r2, #8
 80039ea:	409a      	lsls	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	4013      	ands	r3, r2
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d02a      	beq.n	8003a4a <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	f003 0308 	and.w	r3, r3, #8
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d025      	beq.n	8003a4a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f022 020e 	bic.w	r2, r2, #14
 8003a0c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a12:	f003 021f 	and.w	r2, r3, #31
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1a:	2101      	movs	r1, #1
 8003a1c:	fa01 f202 	lsl.w	r2, r1, r2
 8003a20:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2201      	movs	r2, #1
 8003a26:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d004      	beq.n	8003a4a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003a48:	bf00      	nop
 8003a4a:	bf00      	nop
}
 8003a4c:	3710      	adds	r7, #16
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
	...

08003a54 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b087      	sub	sp, #28
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	461a      	mov	r2, r3
 8003a62:	4b16      	ldr	r3, [pc, #88]	; (8003abc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d802      	bhi.n	8003a6e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003a68:	4b15      	ldr	r3, [pc, #84]	; (8003ac0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003a6a:	617b      	str	r3, [r7, #20]
 8003a6c:	e001      	b.n	8003a72 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003a6e:	4b15      	ldr	r3, [pc, #84]	; (8003ac4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003a70:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	3b08      	subs	r3, #8
 8003a7e:	4a12      	ldr	r2, [pc, #72]	; (8003ac8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003a80:	fba2 2303 	umull	r2, r3, r2, r3
 8003a84:	091b      	lsrs	r3, r3, #4
 8003a86:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a8c:	089b      	lsrs	r3, r3, #2
 8003a8e:	009a      	lsls	r2, r3, #2
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	4413      	add	r3, r2
 8003a94:	461a      	mov	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a0b      	ldr	r2, [pc, #44]	; (8003acc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003a9e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f003 031f 	and.w	r3, r3, #31
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	409a      	lsls	r2, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003aae:	bf00      	nop
 8003ab0:	371c      	adds	r7, #28
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	40020407 	.word	0x40020407
 8003ac0:	40020800 	.word	0x40020800
 8003ac4:	40020820 	.word	0x40020820
 8003ac8:	cccccccd 	.word	0xcccccccd
 8003acc:	40020880 	.word	0x40020880

08003ad0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b085      	sub	sp, #20
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	4b0b      	ldr	r3, [pc, #44]	; (8003b10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003ae4:	4413      	add	r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	461a      	mov	r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a08      	ldr	r2, [pc, #32]	; (8003b14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003af2:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	3b01      	subs	r3, #1
 8003af8:	f003 031f 	and.w	r3, r3, #31
 8003afc:	2201      	movs	r2, #1
 8003afe:	409a      	lsls	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003b04:	bf00      	nop
 8003b06:	3714      	adds	r7, #20
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr
 8003b10:	1000823f 	.word	0x1000823f
 8003b14:	40020940 	.word	0x40020940

08003b18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b087      	sub	sp, #28
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003b22:	2300      	movs	r3, #0
 8003b24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003b26:	e15a      	b.n	8003dde <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	2101      	movs	r1, #1
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	fa01 f303 	lsl.w	r3, r1, r3
 8003b34:	4013      	ands	r3, r2
 8003b36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	f000 814c 	beq.w	8003dd8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f003 0303 	and.w	r3, r3, #3
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d005      	beq.n	8003b58 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d130      	bne.n	8003bba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	005b      	lsls	r3, r3, #1
 8003b62:	2203      	movs	r2, #3
 8003b64:	fa02 f303 	lsl.w	r3, r2, r3
 8003b68:	43db      	mvns	r3, r3
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	68da      	ldr	r2, [r3, #12]
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	005b      	lsls	r3, r3, #1
 8003b78:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7c:	693a      	ldr	r2, [r7, #16]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	693a      	ldr	r2, [r7, #16]
 8003b86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b8e:	2201      	movs	r2, #1
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	fa02 f303 	lsl.w	r3, r2, r3
 8003b96:	43db      	mvns	r3, r3
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	091b      	lsrs	r3, r3, #4
 8003ba4:	f003 0201 	and.w	r2, r3, #1
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bae:	693a      	ldr	r2, [r7, #16]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f003 0303 	and.w	r3, r3, #3
 8003bc2:	2b03      	cmp	r3, #3
 8003bc4:	d017      	beq.n	8003bf6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	005b      	lsls	r3, r3, #1
 8003bd0:	2203      	movs	r2, #3
 8003bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd6:	43db      	mvns	r3, r3
 8003bd8:	693a      	ldr	r2, [r7, #16]
 8003bda:	4013      	ands	r3, r2
 8003bdc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	689a      	ldr	r2, [r3, #8]
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	005b      	lsls	r3, r3, #1
 8003be6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bea:	693a      	ldr	r2, [r7, #16]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	693a      	ldr	r2, [r7, #16]
 8003bf4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f003 0303 	and.w	r3, r3, #3
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d123      	bne.n	8003c4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	08da      	lsrs	r2, r3, #3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	3208      	adds	r2, #8
 8003c0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	f003 0307 	and.w	r3, r3, #7
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	220f      	movs	r2, #15
 8003c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1e:	43db      	mvns	r3, r3
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	4013      	ands	r3, r2
 8003c24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	691a      	ldr	r2, [r3, #16]
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	f003 0307 	and.w	r3, r3, #7
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	fa02 f303 	lsl.w	r3, r2, r3
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	08da      	lsrs	r2, r3, #3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	3208      	adds	r2, #8
 8003c44:	6939      	ldr	r1, [r7, #16]
 8003c46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	005b      	lsls	r3, r3, #1
 8003c54:	2203      	movs	r2, #3
 8003c56:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5a:	43db      	mvns	r3, r3
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	4013      	ands	r3, r2
 8003c60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f003 0203 	and.w	r2, r3, #3
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	005b      	lsls	r3, r3, #1
 8003c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c72:	693a      	ldr	r2, [r7, #16]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	693a      	ldr	r2, [r7, #16]
 8003c7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	f000 80a6 	beq.w	8003dd8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c8c:	4b5b      	ldr	r3, [pc, #364]	; (8003dfc <HAL_GPIO_Init+0x2e4>)
 8003c8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c90:	4a5a      	ldr	r2, [pc, #360]	; (8003dfc <HAL_GPIO_Init+0x2e4>)
 8003c92:	f043 0301 	orr.w	r3, r3, #1
 8003c96:	6613      	str	r3, [r2, #96]	; 0x60
 8003c98:	4b58      	ldr	r3, [pc, #352]	; (8003dfc <HAL_GPIO_Init+0x2e4>)
 8003c9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c9c:	f003 0301 	and.w	r3, r3, #1
 8003ca0:	60bb      	str	r3, [r7, #8]
 8003ca2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ca4:	4a56      	ldr	r2, [pc, #344]	; (8003e00 <HAL_GPIO_Init+0x2e8>)
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	089b      	lsrs	r3, r3, #2
 8003caa:	3302      	adds	r3, #2
 8003cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	f003 0303 	and.w	r3, r3, #3
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	220f      	movs	r2, #15
 8003cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc0:	43db      	mvns	r3, r3
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003cce:	d01f      	beq.n	8003d10 <HAL_GPIO_Init+0x1f8>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a4c      	ldr	r2, [pc, #304]	; (8003e04 <HAL_GPIO_Init+0x2ec>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d019      	beq.n	8003d0c <HAL_GPIO_Init+0x1f4>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a4b      	ldr	r2, [pc, #300]	; (8003e08 <HAL_GPIO_Init+0x2f0>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d013      	beq.n	8003d08 <HAL_GPIO_Init+0x1f0>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a4a      	ldr	r2, [pc, #296]	; (8003e0c <HAL_GPIO_Init+0x2f4>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d00d      	beq.n	8003d04 <HAL_GPIO_Init+0x1ec>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a49      	ldr	r2, [pc, #292]	; (8003e10 <HAL_GPIO_Init+0x2f8>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d007      	beq.n	8003d00 <HAL_GPIO_Init+0x1e8>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a48      	ldr	r2, [pc, #288]	; (8003e14 <HAL_GPIO_Init+0x2fc>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d101      	bne.n	8003cfc <HAL_GPIO_Init+0x1e4>
 8003cf8:	2305      	movs	r3, #5
 8003cfa:	e00a      	b.n	8003d12 <HAL_GPIO_Init+0x1fa>
 8003cfc:	2306      	movs	r3, #6
 8003cfe:	e008      	b.n	8003d12 <HAL_GPIO_Init+0x1fa>
 8003d00:	2304      	movs	r3, #4
 8003d02:	e006      	b.n	8003d12 <HAL_GPIO_Init+0x1fa>
 8003d04:	2303      	movs	r3, #3
 8003d06:	e004      	b.n	8003d12 <HAL_GPIO_Init+0x1fa>
 8003d08:	2302      	movs	r3, #2
 8003d0a:	e002      	b.n	8003d12 <HAL_GPIO_Init+0x1fa>
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e000      	b.n	8003d12 <HAL_GPIO_Init+0x1fa>
 8003d10:	2300      	movs	r3, #0
 8003d12:	697a      	ldr	r2, [r7, #20]
 8003d14:	f002 0203 	and.w	r2, r2, #3
 8003d18:	0092      	lsls	r2, r2, #2
 8003d1a:	4093      	lsls	r3, r2
 8003d1c:	693a      	ldr	r2, [r7, #16]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d22:	4937      	ldr	r1, [pc, #220]	; (8003e00 <HAL_GPIO_Init+0x2e8>)
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	089b      	lsrs	r3, r3, #2
 8003d28:	3302      	adds	r3, #2
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d30:	4b39      	ldr	r3, [pc, #228]	; (8003e18 <HAL_GPIO_Init+0x300>)
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	43db      	mvns	r3, r3
 8003d3a:	693a      	ldr	r2, [r7, #16]
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d003      	beq.n	8003d54 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003d4c:	693a      	ldr	r2, [r7, #16]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003d54:	4a30      	ldr	r2, [pc, #192]	; (8003e18 <HAL_GPIO_Init+0x300>)
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003d5a:	4b2f      	ldr	r3, [pc, #188]	; (8003e18 <HAL_GPIO_Init+0x300>)
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	43db      	mvns	r3, r3
 8003d64:	693a      	ldr	r2, [r7, #16]
 8003d66:	4013      	ands	r3, r2
 8003d68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d003      	beq.n	8003d7e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003d76:	693a      	ldr	r2, [r7, #16]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003d7e:	4a26      	ldr	r2, [pc, #152]	; (8003e18 <HAL_GPIO_Init+0x300>)
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003d84:	4b24      	ldr	r3, [pc, #144]	; (8003e18 <HAL_GPIO_Init+0x300>)
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	43db      	mvns	r3, r3
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	4013      	ands	r3, r2
 8003d92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d003      	beq.n	8003da8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003da0:	693a      	ldr	r2, [r7, #16]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003da8:	4a1b      	ldr	r2, [pc, #108]	; (8003e18 <HAL_GPIO_Init+0x300>)
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003dae:	4b1a      	ldr	r3, [pc, #104]	; (8003e18 <HAL_GPIO_Init+0x300>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	43db      	mvns	r3, r3
 8003db8:	693a      	ldr	r2, [r7, #16]
 8003dba:	4013      	ands	r3, r2
 8003dbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d003      	beq.n	8003dd2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003dca:	693a      	ldr	r2, [r7, #16]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003dd2:	4a11      	ldr	r2, [pc, #68]	; (8003e18 <HAL_GPIO_Init+0x300>)
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	3301      	adds	r3, #1
 8003ddc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	fa22 f303 	lsr.w	r3, r2, r3
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f47f ae9d 	bne.w	8003b28 <HAL_GPIO_Init+0x10>
  }
}
 8003dee:	bf00      	nop
 8003df0:	bf00      	nop
 8003df2:	371c      	adds	r7, #28
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr
 8003dfc:	40021000 	.word	0x40021000
 8003e00:	40010000 	.word	0x40010000
 8003e04:	48000400 	.word	0x48000400
 8003e08:	48000800 	.word	0x48000800
 8003e0c:	48000c00 	.word	0x48000c00
 8003e10:	48001000 	.word	0x48001000
 8003e14:	48001400 	.word	0x48001400
 8003e18:	40010400 	.word	0x40010400

08003e1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	460b      	mov	r3, r1
 8003e26:	807b      	strh	r3, [r7, #2]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e2c:	787b      	ldrb	r3, [r7, #1]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d003      	beq.n	8003e3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e32:	887a      	ldrh	r2, [r7, #2]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003e38:	e002      	b.n	8003e40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003e3a:	887a      	ldrh	r2, [r7, #2]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003e40:	bf00      	nop
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b085      	sub	sp, #20
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d141      	bne.n	8003ede <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e5a:	4b4b      	ldr	r3, [pc, #300]	; (8003f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e66:	d131      	bne.n	8003ecc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e68:	4b47      	ldr	r3, [pc, #284]	; (8003f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e6e:	4a46      	ldr	r2, [pc, #280]	; (8003f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e74:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e78:	4b43      	ldr	r3, [pc, #268]	; (8003f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e80:	4a41      	ldr	r2, [pc, #260]	; (8003f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e86:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003e88:	4b40      	ldr	r3, [pc, #256]	; (8003f8c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2232      	movs	r2, #50	; 0x32
 8003e8e:	fb02 f303 	mul.w	r3, r2, r3
 8003e92:	4a3f      	ldr	r2, [pc, #252]	; (8003f90 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003e94:	fba2 2303 	umull	r2, r3, r2, r3
 8003e98:	0c9b      	lsrs	r3, r3, #18
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e9e:	e002      	b.n	8003ea6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	3b01      	subs	r3, #1
 8003ea4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ea6:	4b38      	ldr	r3, [pc, #224]	; (8003f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eb2:	d102      	bne.n	8003eba <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1f2      	bne.n	8003ea0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003eba:	4b33      	ldr	r3, [pc, #204]	; (8003f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ebc:	695b      	ldr	r3, [r3, #20]
 8003ebe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ec2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ec6:	d158      	bne.n	8003f7a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	e057      	b.n	8003f7c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ecc:	4b2e      	ldr	r3, [pc, #184]	; (8003f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ece:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ed2:	4a2d      	ldr	r2, [pc, #180]	; (8003f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ed4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ed8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003edc:	e04d      	b.n	8003f7a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ee4:	d141      	bne.n	8003f6a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ee6:	4b28      	ldr	r3, [pc, #160]	; (8003f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003eee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ef2:	d131      	bne.n	8003f58 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ef4:	4b24      	ldr	r3, [pc, #144]	; (8003f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ef6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003efa:	4a23      	ldr	r2, [pc, #140]	; (8003f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003efc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f00:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f04:	4b20      	ldr	r3, [pc, #128]	; (8003f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f0c:	4a1e      	ldr	r2, [pc, #120]	; (8003f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f12:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003f14:	4b1d      	ldr	r3, [pc, #116]	; (8003f8c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2232      	movs	r2, #50	; 0x32
 8003f1a:	fb02 f303 	mul.w	r3, r2, r3
 8003f1e:	4a1c      	ldr	r2, [pc, #112]	; (8003f90 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003f20:	fba2 2303 	umull	r2, r3, r2, r3
 8003f24:	0c9b      	lsrs	r3, r3, #18
 8003f26:	3301      	adds	r3, #1
 8003f28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f2a:	e002      	b.n	8003f32 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f32:	4b15      	ldr	r3, [pc, #84]	; (8003f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f3e:	d102      	bne.n	8003f46 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d1f2      	bne.n	8003f2c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f46:	4b10      	ldr	r3, [pc, #64]	; (8003f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f52:	d112      	bne.n	8003f7a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e011      	b.n	8003f7c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f58:	4b0b      	ldr	r3, [pc, #44]	; (8003f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f5e:	4a0a      	ldr	r2, [pc, #40]	; (8003f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f64:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003f68:	e007      	b.n	8003f7a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003f6a:	4b07      	ldr	r3, [pc, #28]	; (8003f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f72:	4a05      	ldr	r2, [pc, #20]	; (8003f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f74:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f78:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3714      	adds	r7, #20
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr
 8003f88:	40007000 	.word	0x40007000
 8003f8c:	2000012c 	.word	0x2000012c
 8003f90:	431bde83 	.word	0x431bde83

08003f94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b088      	sub	sp, #32
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d101      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e2fe      	b.n	80045a4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0301 	and.w	r3, r3, #1
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d075      	beq.n	800409e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fb2:	4b97      	ldr	r3, [pc, #604]	; (8004210 <HAL_RCC_OscConfig+0x27c>)
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f003 030c 	and.w	r3, r3, #12
 8003fba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003fbc:	4b94      	ldr	r3, [pc, #592]	; (8004210 <HAL_RCC_OscConfig+0x27c>)
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	f003 0303 	and.w	r3, r3, #3
 8003fc4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	2b0c      	cmp	r3, #12
 8003fca:	d102      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x3e>
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	2b03      	cmp	r3, #3
 8003fd0:	d002      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x44>
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	2b08      	cmp	r3, #8
 8003fd6:	d10b      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fd8:	4b8d      	ldr	r3, [pc, #564]	; (8004210 <HAL_RCC_OscConfig+0x27c>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d05b      	beq.n	800409c <HAL_RCC_OscConfig+0x108>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d157      	bne.n	800409c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e2d9      	b.n	80045a4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ff8:	d106      	bne.n	8004008 <HAL_RCC_OscConfig+0x74>
 8003ffa:	4b85      	ldr	r3, [pc, #532]	; (8004210 <HAL_RCC_OscConfig+0x27c>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a84      	ldr	r2, [pc, #528]	; (8004210 <HAL_RCC_OscConfig+0x27c>)
 8004000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004004:	6013      	str	r3, [r2, #0]
 8004006:	e01d      	b.n	8004044 <HAL_RCC_OscConfig+0xb0>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004010:	d10c      	bne.n	800402c <HAL_RCC_OscConfig+0x98>
 8004012:	4b7f      	ldr	r3, [pc, #508]	; (8004210 <HAL_RCC_OscConfig+0x27c>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a7e      	ldr	r2, [pc, #504]	; (8004210 <HAL_RCC_OscConfig+0x27c>)
 8004018:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800401c:	6013      	str	r3, [r2, #0]
 800401e:	4b7c      	ldr	r3, [pc, #496]	; (8004210 <HAL_RCC_OscConfig+0x27c>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a7b      	ldr	r2, [pc, #492]	; (8004210 <HAL_RCC_OscConfig+0x27c>)
 8004024:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004028:	6013      	str	r3, [r2, #0]
 800402a:	e00b      	b.n	8004044 <HAL_RCC_OscConfig+0xb0>
 800402c:	4b78      	ldr	r3, [pc, #480]	; (8004210 <HAL_RCC_OscConfig+0x27c>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a77      	ldr	r2, [pc, #476]	; (8004210 <HAL_RCC_OscConfig+0x27c>)
 8004032:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004036:	6013      	str	r3, [r2, #0]
 8004038:	4b75      	ldr	r3, [pc, #468]	; (8004210 <HAL_RCC_OscConfig+0x27c>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a74      	ldr	r2, [pc, #464]	; (8004210 <HAL_RCC_OscConfig+0x27c>)
 800403e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004042:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d013      	beq.n	8004074 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800404c:	f7fe f910 	bl	8002270 <HAL_GetTick>
 8004050:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004052:	e008      	b.n	8004066 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004054:	f7fe f90c 	bl	8002270 <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	2b64      	cmp	r3, #100	; 0x64
 8004060:	d901      	bls.n	8004066 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e29e      	b.n	80045a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004066:	4b6a      	ldr	r3, [pc, #424]	; (8004210 <HAL_RCC_OscConfig+0x27c>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d0f0      	beq.n	8004054 <HAL_RCC_OscConfig+0xc0>
 8004072:	e014      	b.n	800409e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004074:	f7fe f8fc 	bl	8002270 <HAL_GetTick>
 8004078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800407a:	e008      	b.n	800408e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800407c:	f7fe f8f8 	bl	8002270 <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	2b64      	cmp	r3, #100	; 0x64
 8004088:	d901      	bls.n	800408e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e28a      	b.n	80045a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800408e:	4b60      	ldr	r3, [pc, #384]	; (8004210 <HAL_RCC_OscConfig+0x27c>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d1f0      	bne.n	800407c <HAL_RCC_OscConfig+0xe8>
 800409a:	e000      	b.n	800409e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800409c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0302 	and.w	r3, r3, #2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d075      	beq.n	8004196 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040aa:	4b59      	ldr	r3, [pc, #356]	; (8004210 <HAL_RCC_OscConfig+0x27c>)
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f003 030c 	and.w	r3, r3, #12
 80040b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040b4:	4b56      	ldr	r3, [pc, #344]	; (8004210 <HAL_RCC_OscConfig+0x27c>)
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	f003 0303 	and.w	r3, r3, #3
 80040bc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	2b0c      	cmp	r3, #12
 80040c2:	d102      	bne.n	80040ca <HAL_RCC_OscConfig+0x136>
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d002      	beq.n	80040d0 <HAL_RCC_OscConfig+0x13c>
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	2b04      	cmp	r3, #4
 80040ce:	d11f      	bne.n	8004110 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040d0:	4b4f      	ldr	r3, [pc, #316]	; (8004210 <HAL_RCC_OscConfig+0x27c>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d005      	beq.n	80040e8 <HAL_RCC_OscConfig+0x154>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d101      	bne.n	80040e8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e25d      	b.n	80045a4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040e8:	4b49      	ldr	r3, [pc, #292]	; (8004210 <HAL_RCC_OscConfig+0x27c>)
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	061b      	lsls	r3, r3, #24
 80040f6:	4946      	ldr	r1, [pc, #280]	; (8004210 <HAL_RCC_OscConfig+0x27c>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80040fc:	4b45      	ldr	r3, [pc, #276]	; (8004214 <HAL_RCC_OscConfig+0x280>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4618      	mov	r0, r3
 8004102:	f7fe f869 	bl	80021d8 <HAL_InitTick>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d043      	beq.n	8004194 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e249      	b.n	80045a4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d023      	beq.n	8004160 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004118:	4b3d      	ldr	r3, [pc, #244]	; (8004210 <HAL_RCC_OscConfig+0x27c>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a3c      	ldr	r2, [pc, #240]	; (8004210 <HAL_RCC_OscConfig+0x27c>)
 800411e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004122:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004124:	f7fe f8a4 	bl	8002270 <HAL_GetTick>
 8004128:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800412a:	e008      	b.n	800413e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800412c:	f7fe f8a0 	bl	8002270 <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	2b02      	cmp	r3, #2
 8004138:	d901      	bls.n	800413e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e232      	b.n	80045a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800413e:	4b34      	ldr	r3, [pc, #208]	; (8004210 <HAL_RCC_OscConfig+0x27c>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004146:	2b00      	cmp	r3, #0
 8004148:	d0f0      	beq.n	800412c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800414a:	4b31      	ldr	r3, [pc, #196]	; (8004210 <HAL_RCC_OscConfig+0x27c>)
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	061b      	lsls	r3, r3, #24
 8004158:	492d      	ldr	r1, [pc, #180]	; (8004210 <HAL_RCC_OscConfig+0x27c>)
 800415a:	4313      	orrs	r3, r2
 800415c:	604b      	str	r3, [r1, #4]
 800415e:	e01a      	b.n	8004196 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004160:	4b2b      	ldr	r3, [pc, #172]	; (8004210 <HAL_RCC_OscConfig+0x27c>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a2a      	ldr	r2, [pc, #168]	; (8004210 <HAL_RCC_OscConfig+0x27c>)
 8004166:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800416a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800416c:	f7fe f880 	bl	8002270 <HAL_GetTick>
 8004170:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004172:	e008      	b.n	8004186 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004174:	f7fe f87c 	bl	8002270 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	2b02      	cmp	r3, #2
 8004180:	d901      	bls.n	8004186 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e20e      	b.n	80045a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004186:	4b22      	ldr	r3, [pc, #136]	; (8004210 <HAL_RCC_OscConfig+0x27c>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1f0      	bne.n	8004174 <HAL_RCC_OscConfig+0x1e0>
 8004192:	e000      	b.n	8004196 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004194:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0308 	and.w	r3, r3, #8
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d041      	beq.n	8004226 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d01c      	beq.n	80041e4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041aa:	4b19      	ldr	r3, [pc, #100]	; (8004210 <HAL_RCC_OscConfig+0x27c>)
 80041ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041b0:	4a17      	ldr	r2, [pc, #92]	; (8004210 <HAL_RCC_OscConfig+0x27c>)
 80041b2:	f043 0301 	orr.w	r3, r3, #1
 80041b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ba:	f7fe f859 	bl	8002270 <HAL_GetTick>
 80041be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041c0:	e008      	b.n	80041d4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041c2:	f7fe f855 	bl	8002270 <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d901      	bls.n	80041d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80041d0:	2303      	movs	r3, #3
 80041d2:	e1e7      	b.n	80045a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041d4:	4b0e      	ldr	r3, [pc, #56]	; (8004210 <HAL_RCC_OscConfig+0x27c>)
 80041d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041da:	f003 0302 	and.w	r3, r3, #2
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d0ef      	beq.n	80041c2 <HAL_RCC_OscConfig+0x22e>
 80041e2:	e020      	b.n	8004226 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041e4:	4b0a      	ldr	r3, [pc, #40]	; (8004210 <HAL_RCC_OscConfig+0x27c>)
 80041e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041ea:	4a09      	ldr	r2, [pc, #36]	; (8004210 <HAL_RCC_OscConfig+0x27c>)
 80041ec:	f023 0301 	bic.w	r3, r3, #1
 80041f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041f4:	f7fe f83c 	bl	8002270 <HAL_GetTick>
 80041f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041fa:	e00d      	b.n	8004218 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041fc:	f7fe f838 	bl	8002270 <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	2b02      	cmp	r3, #2
 8004208:	d906      	bls.n	8004218 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e1ca      	b.n	80045a4 <HAL_RCC_OscConfig+0x610>
 800420e:	bf00      	nop
 8004210:	40021000 	.word	0x40021000
 8004214:	20000130 	.word	0x20000130
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004218:	4b8c      	ldr	r3, [pc, #560]	; (800444c <HAL_RCC_OscConfig+0x4b8>)
 800421a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800421e:	f003 0302 	and.w	r3, r3, #2
 8004222:	2b00      	cmp	r3, #0
 8004224:	d1ea      	bne.n	80041fc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0304 	and.w	r3, r3, #4
 800422e:	2b00      	cmp	r3, #0
 8004230:	f000 80a6 	beq.w	8004380 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004234:	2300      	movs	r3, #0
 8004236:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004238:	4b84      	ldr	r3, [pc, #528]	; (800444c <HAL_RCC_OscConfig+0x4b8>)
 800423a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800423c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d101      	bne.n	8004248 <HAL_RCC_OscConfig+0x2b4>
 8004244:	2301      	movs	r3, #1
 8004246:	e000      	b.n	800424a <HAL_RCC_OscConfig+0x2b6>
 8004248:	2300      	movs	r3, #0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00d      	beq.n	800426a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800424e:	4b7f      	ldr	r3, [pc, #508]	; (800444c <HAL_RCC_OscConfig+0x4b8>)
 8004250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004252:	4a7e      	ldr	r2, [pc, #504]	; (800444c <HAL_RCC_OscConfig+0x4b8>)
 8004254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004258:	6593      	str	r3, [r2, #88]	; 0x58
 800425a:	4b7c      	ldr	r3, [pc, #496]	; (800444c <HAL_RCC_OscConfig+0x4b8>)
 800425c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800425e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004262:	60fb      	str	r3, [r7, #12]
 8004264:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004266:	2301      	movs	r3, #1
 8004268:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800426a:	4b79      	ldr	r3, [pc, #484]	; (8004450 <HAL_RCC_OscConfig+0x4bc>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004272:	2b00      	cmp	r3, #0
 8004274:	d118      	bne.n	80042a8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004276:	4b76      	ldr	r3, [pc, #472]	; (8004450 <HAL_RCC_OscConfig+0x4bc>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a75      	ldr	r2, [pc, #468]	; (8004450 <HAL_RCC_OscConfig+0x4bc>)
 800427c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004280:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004282:	f7fd fff5 	bl	8002270 <HAL_GetTick>
 8004286:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004288:	e008      	b.n	800429c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800428a:	f7fd fff1 	bl	8002270 <HAL_GetTick>
 800428e:	4602      	mov	r2, r0
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	2b02      	cmp	r3, #2
 8004296:	d901      	bls.n	800429c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e183      	b.n	80045a4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800429c:	4b6c      	ldr	r3, [pc, #432]	; (8004450 <HAL_RCC_OscConfig+0x4bc>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d0f0      	beq.n	800428a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d108      	bne.n	80042c2 <HAL_RCC_OscConfig+0x32e>
 80042b0:	4b66      	ldr	r3, [pc, #408]	; (800444c <HAL_RCC_OscConfig+0x4b8>)
 80042b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b6:	4a65      	ldr	r2, [pc, #404]	; (800444c <HAL_RCC_OscConfig+0x4b8>)
 80042b8:	f043 0301 	orr.w	r3, r3, #1
 80042bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042c0:	e024      	b.n	800430c <HAL_RCC_OscConfig+0x378>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	2b05      	cmp	r3, #5
 80042c8:	d110      	bne.n	80042ec <HAL_RCC_OscConfig+0x358>
 80042ca:	4b60      	ldr	r3, [pc, #384]	; (800444c <HAL_RCC_OscConfig+0x4b8>)
 80042cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042d0:	4a5e      	ldr	r2, [pc, #376]	; (800444c <HAL_RCC_OscConfig+0x4b8>)
 80042d2:	f043 0304 	orr.w	r3, r3, #4
 80042d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042da:	4b5c      	ldr	r3, [pc, #368]	; (800444c <HAL_RCC_OscConfig+0x4b8>)
 80042dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042e0:	4a5a      	ldr	r2, [pc, #360]	; (800444c <HAL_RCC_OscConfig+0x4b8>)
 80042e2:	f043 0301 	orr.w	r3, r3, #1
 80042e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042ea:	e00f      	b.n	800430c <HAL_RCC_OscConfig+0x378>
 80042ec:	4b57      	ldr	r3, [pc, #348]	; (800444c <HAL_RCC_OscConfig+0x4b8>)
 80042ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042f2:	4a56      	ldr	r2, [pc, #344]	; (800444c <HAL_RCC_OscConfig+0x4b8>)
 80042f4:	f023 0301 	bic.w	r3, r3, #1
 80042f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042fc:	4b53      	ldr	r3, [pc, #332]	; (800444c <HAL_RCC_OscConfig+0x4b8>)
 80042fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004302:	4a52      	ldr	r2, [pc, #328]	; (800444c <HAL_RCC_OscConfig+0x4b8>)
 8004304:	f023 0304 	bic.w	r3, r3, #4
 8004308:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d016      	beq.n	8004342 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004314:	f7fd ffac 	bl	8002270 <HAL_GetTick>
 8004318:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800431a:	e00a      	b.n	8004332 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800431c:	f7fd ffa8 	bl	8002270 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	f241 3288 	movw	r2, #5000	; 0x1388
 800432a:	4293      	cmp	r3, r2
 800432c:	d901      	bls.n	8004332 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e138      	b.n	80045a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004332:	4b46      	ldr	r3, [pc, #280]	; (800444c <HAL_RCC_OscConfig+0x4b8>)
 8004334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004338:	f003 0302 	and.w	r3, r3, #2
 800433c:	2b00      	cmp	r3, #0
 800433e:	d0ed      	beq.n	800431c <HAL_RCC_OscConfig+0x388>
 8004340:	e015      	b.n	800436e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004342:	f7fd ff95 	bl	8002270 <HAL_GetTick>
 8004346:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004348:	e00a      	b.n	8004360 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800434a:	f7fd ff91 	bl	8002270 <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	f241 3288 	movw	r2, #5000	; 0x1388
 8004358:	4293      	cmp	r3, r2
 800435a:	d901      	bls.n	8004360 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e121      	b.n	80045a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004360:	4b3a      	ldr	r3, [pc, #232]	; (800444c <HAL_RCC_OscConfig+0x4b8>)
 8004362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004366:	f003 0302 	and.w	r3, r3, #2
 800436a:	2b00      	cmp	r3, #0
 800436c:	d1ed      	bne.n	800434a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800436e:	7ffb      	ldrb	r3, [r7, #31]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d105      	bne.n	8004380 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004374:	4b35      	ldr	r3, [pc, #212]	; (800444c <HAL_RCC_OscConfig+0x4b8>)
 8004376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004378:	4a34      	ldr	r2, [pc, #208]	; (800444c <HAL_RCC_OscConfig+0x4b8>)
 800437a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800437e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0320 	and.w	r3, r3, #32
 8004388:	2b00      	cmp	r3, #0
 800438a:	d03c      	beq.n	8004406 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d01c      	beq.n	80043ce <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004394:	4b2d      	ldr	r3, [pc, #180]	; (800444c <HAL_RCC_OscConfig+0x4b8>)
 8004396:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800439a:	4a2c      	ldr	r2, [pc, #176]	; (800444c <HAL_RCC_OscConfig+0x4b8>)
 800439c:	f043 0301 	orr.w	r3, r3, #1
 80043a0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043a4:	f7fd ff64 	bl	8002270 <HAL_GetTick>
 80043a8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80043aa:	e008      	b.n	80043be <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043ac:	f7fd ff60 	bl	8002270 <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d901      	bls.n	80043be <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e0f2      	b.n	80045a4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80043be:	4b23      	ldr	r3, [pc, #140]	; (800444c <HAL_RCC_OscConfig+0x4b8>)
 80043c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043c4:	f003 0302 	and.w	r3, r3, #2
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d0ef      	beq.n	80043ac <HAL_RCC_OscConfig+0x418>
 80043cc:	e01b      	b.n	8004406 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80043ce:	4b1f      	ldr	r3, [pc, #124]	; (800444c <HAL_RCC_OscConfig+0x4b8>)
 80043d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043d4:	4a1d      	ldr	r2, [pc, #116]	; (800444c <HAL_RCC_OscConfig+0x4b8>)
 80043d6:	f023 0301 	bic.w	r3, r3, #1
 80043da:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043de:	f7fd ff47 	bl	8002270 <HAL_GetTick>
 80043e2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80043e4:	e008      	b.n	80043f8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043e6:	f7fd ff43 	bl	8002270 <HAL_GetTick>
 80043ea:	4602      	mov	r2, r0
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d901      	bls.n	80043f8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e0d5      	b.n	80045a4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80043f8:	4b14      	ldr	r3, [pc, #80]	; (800444c <HAL_RCC_OscConfig+0x4b8>)
 80043fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043fe:	f003 0302 	and.w	r3, r3, #2
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1ef      	bne.n	80043e6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	69db      	ldr	r3, [r3, #28]
 800440a:	2b00      	cmp	r3, #0
 800440c:	f000 80c9 	beq.w	80045a2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004410:	4b0e      	ldr	r3, [pc, #56]	; (800444c <HAL_RCC_OscConfig+0x4b8>)
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	f003 030c 	and.w	r3, r3, #12
 8004418:	2b0c      	cmp	r3, #12
 800441a:	f000 8083 	beq.w	8004524 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	69db      	ldr	r3, [r3, #28]
 8004422:	2b02      	cmp	r3, #2
 8004424:	d15e      	bne.n	80044e4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004426:	4b09      	ldr	r3, [pc, #36]	; (800444c <HAL_RCC_OscConfig+0x4b8>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a08      	ldr	r2, [pc, #32]	; (800444c <HAL_RCC_OscConfig+0x4b8>)
 800442c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004430:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004432:	f7fd ff1d 	bl	8002270 <HAL_GetTick>
 8004436:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004438:	e00c      	b.n	8004454 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800443a:	f7fd ff19 	bl	8002270 <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	2b02      	cmp	r3, #2
 8004446:	d905      	bls.n	8004454 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e0ab      	b.n	80045a4 <HAL_RCC_OscConfig+0x610>
 800444c:	40021000 	.word	0x40021000
 8004450:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004454:	4b55      	ldr	r3, [pc, #340]	; (80045ac <HAL_RCC_OscConfig+0x618>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1ec      	bne.n	800443a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004460:	4b52      	ldr	r3, [pc, #328]	; (80045ac <HAL_RCC_OscConfig+0x618>)
 8004462:	68da      	ldr	r2, [r3, #12]
 8004464:	4b52      	ldr	r3, [pc, #328]	; (80045b0 <HAL_RCC_OscConfig+0x61c>)
 8004466:	4013      	ands	r3, r2
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	6a11      	ldr	r1, [r2, #32]
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004470:	3a01      	subs	r2, #1
 8004472:	0112      	lsls	r2, r2, #4
 8004474:	4311      	orrs	r1, r2
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800447a:	0212      	lsls	r2, r2, #8
 800447c:	4311      	orrs	r1, r2
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004482:	0852      	lsrs	r2, r2, #1
 8004484:	3a01      	subs	r2, #1
 8004486:	0552      	lsls	r2, r2, #21
 8004488:	4311      	orrs	r1, r2
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800448e:	0852      	lsrs	r2, r2, #1
 8004490:	3a01      	subs	r2, #1
 8004492:	0652      	lsls	r2, r2, #25
 8004494:	4311      	orrs	r1, r2
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800449a:	06d2      	lsls	r2, r2, #27
 800449c:	430a      	orrs	r2, r1
 800449e:	4943      	ldr	r1, [pc, #268]	; (80045ac <HAL_RCC_OscConfig+0x618>)
 80044a0:	4313      	orrs	r3, r2
 80044a2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044a4:	4b41      	ldr	r3, [pc, #260]	; (80045ac <HAL_RCC_OscConfig+0x618>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a40      	ldr	r2, [pc, #256]	; (80045ac <HAL_RCC_OscConfig+0x618>)
 80044aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044ae:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80044b0:	4b3e      	ldr	r3, [pc, #248]	; (80045ac <HAL_RCC_OscConfig+0x618>)
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	4a3d      	ldr	r2, [pc, #244]	; (80045ac <HAL_RCC_OscConfig+0x618>)
 80044b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044ba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044bc:	f7fd fed8 	bl	8002270 <HAL_GetTick>
 80044c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044c2:	e008      	b.n	80044d6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044c4:	f7fd fed4 	bl	8002270 <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d901      	bls.n	80044d6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e066      	b.n	80045a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044d6:	4b35      	ldr	r3, [pc, #212]	; (80045ac <HAL_RCC_OscConfig+0x618>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d0f0      	beq.n	80044c4 <HAL_RCC_OscConfig+0x530>
 80044e2:	e05e      	b.n	80045a2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044e4:	4b31      	ldr	r3, [pc, #196]	; (80045ac <HAL_RCC_OscConfig+0x618>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a30      	ldr	r2, [pc, #192]	; (80045ac <HAL_RCC_OscConfig+0x618>)
 80044ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f0:	f7fd febe 	bl	8002270 <HAL_GetTick>
 80044f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044f6:	e008      	b.n	800450a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044f8:	f7fd feba 	bl	8002270 <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	2b02      	cmp	r3, #2
 8004504:	d901      	bls.n	800450a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e04c      	b.n	80045a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800450a:	4b28      	ldr	r3, [pc, #160]	; (80045ac <HAL_RCC_OscConfig+0x618>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d1f0      	bne.n	80044f8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004516:	4b25      	ldr	r3, [pc, #148]	; (80045ac <HAL_RCC_OscConfig+0x618>)
 8004518:	68da      	ldr	r2, [r3, #12]
 800451a:	4924      	ldr	r1, [pc, #144]	; (80045ac <HAL_RCC_OscConfig+0x618>)
 800451c:	4b25      	ldr	r3, [pc, #148]	; (80045b4 <HAL_RCC_OscConfig+0x620>)
 800451e:	4013      	ands	r3, r2
 8004520:	60cb      	str	r3, [r1, #12]
 8004522:	e03e      	b.n	80045a2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	69db      	ldr	r3, [r3, #28]
 8004528:	2b01      	cmp	r3, #1
 800452a:	d101      	bne.n	8004530 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e039      	b.n	80045a4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004530:	4b1e      	ldr	r3, [pc, #120]	; (80045ac <HAL_RCC_OscConfig+0x618>)
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	f003 0203 	and.w	r2, r3, #3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6a1b      	ldr	r3, [r3, #32]
 8004540:	429a      	cmp	r2, r3
 8004542:	d12c      	bne.n	800459e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454e:	3b01      	subs	r3, #1
 8004550:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004552:	429a      	cmp	r2, r3
 8004554:	d123      	bne.n	800459e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004560:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004562:	429a      	cmp	r2, r3
 8004564:	d11b      	bne.n	800459e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004570:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004572:	429a      	cmp	r2, r3
 8004574:	d113      	bne.n	800459e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004580:	085b      	lsrs	r3, r3, #1
 8004582:	3b01      	subs	r3, #1
 8004584:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004586:	429a      	cmp	r2, r3
 8004588:	d109      	bne.n	800459e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004594:	085b      	lsrs	r3, r3, #1
 8004596:	3b01      	subs	r3, #1
 8004598:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800459a:	429a      	cmp	r2, r3
 800459c:	d001      	beq.n	80045a2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e000      	b.n	80045a4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80045a2:	2300      	movs	r3, #0
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3720      	adds	r7, #32
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	40021000 	.word	0x40021000
 80045b0:	019f800c 	.word	0x019f800c
 80045b4:	feeefffc 	.word	0xfeeefffc

080045b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b086      	sub	sp, #24
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80045c2:	2300      	movs	r3, #0
 80045c4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d101      	bne.n	80045d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e11e      	b.n	800480e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045d0:	4b91      	ldr	r3, [pc, #580]	; (8004818 <HAL_RCC_ClockConfig+0x260>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 030f 	and.w	r3, r3, #15
 80045d8:	683a      	ldr	r2, [r7, #0]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d910      	bls.n	8004600 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045de:	4b8e      	ldr	r3, [pc, #568]	; (8004818 <HAL_RCC_ClockConfig+0x260>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f023 020f 	bic.w	r2, r3, #15
 80045e6:	498c      	ldr	r1, [pc, #560]	; (8004818 <HAL_RCC_ClockConfig+0x260>)
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ee:	4b8a      	ldr	r3, [pc, #552]	; (8004818 <HAL_RCC_ClockConfig+0x260>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 030f 	and.w	r3, r3, #15
 80045f6:	683a      	ldr	r2, [r7, #0]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d001      	beq.n	8004600 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e106      	b.n	800480e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0301 	and.w	r3, r3, #1
 8004608:	2b00      	cmp	r3, #0
 800460a:	d073      	beq.n	80046f4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	2b03      	cmp	r3, #3
 8004612:	d129      	bne.n	8004668 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004614:	4b81      	ldr	r3, [pc, #516]	; (800481c <HAL_RCC_ClockConfig+0x264>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d101      	bne.n	8004624 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e0f4      	b.n	800480e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004624:	f000 f99e 	bl	8004964 <RCC_GetSysClockFreqFromPLLSource>
 8004628:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	4a7c      	ldr	r2, [pc, #496]	; (8004820 <HAL_RCC_ClockConfig+0x268>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d93f      	bls.n	80046b2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004632:	4b7a      	ldr	r3, [pc, #488]	; (800481c <HAL_RCC_ClockConfig+0x264>)
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d009      	beq.n	8004652 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004646:	2b00      	cmp	r3, #0
 8004648:	d033      	beq.n	80046b2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800464e:	2b00      	cmp	r3, #0
 8004650:	d12f      	bne.n	80046b2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004652:	4b72      	ldr	r3, [pc, #456]	; (800481c <HAL_RCC_ClockConfig+0x264>)
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800465a:	4a70      	ldr	r2, [pc, #448]	; (800481c <HAL_RCC_ClockConfig+0x264>)
 800465c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004660:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004662:	2380      	movs	r3, #128	; 0x80
 8004664:	617b      	str	r3, [r7, #20]
 8004666:	e024      	b.n	80046b2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	2b02      	cmp	r3, #2
 800466e:	d107      	bne.n	8004680 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004670:	4b6a      	ldr	r3, [pc, #424]	; (800481c <HAL_RCC_ClockConfig+0x264>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d109      	bne.n	8004690 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e0c6      	b.n	800480e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004680:	4b66      	ldr	r3, [pc, #408]	; (800481c <HAL_RCC_ClockConfig+0x264>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004688:	2b00      	cmp	r3, #0
 800468a:	d101      	bne.n	8004690 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e0be      	b.n	800480e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004690:	f000 f8ce 	bl	8004830 <HAL_RCC_GetSysClockFreq>
 8004694:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	4a61      	ldr	r2, [pc, #388]	; (8004820 <HAL_RCC_ClockConfig+0x268>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d909      	bls.n	80046b2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800469e:	4b5f      	ldr	r3, [pc, #380]	; (800481c <HAL_RCC_ClockConfig+0x264>)
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046a6:	4a5d      	ldr	r2, [pc, #372]	; (800481c <HAL_RCC_ClockConfig+0x264>)
 80046a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046ac:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80046ae:	2380      	movs	r3, #128	; 0x80
 80046b0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80046b2:	4b5a      	ldr	r3, [pc, #360]	; (800481c <HAL_RCC_ClockConfig+0x264>)
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f023 0203 	bic.w	r2, r3, #3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	4957      	ldr	r1, [pc, #348]	; (800481c <HAL_RCC_ClockConfig+0x264>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046c4:	f7fd fdd4 	bl	8002270 <HAL_GetTick>
 80046c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ca:	e00a      	b.n	80046e2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046cc:	f7fd fdd0 	bl	8002270 <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80046da:	4293      	cmp	r3, r2
 80046dc:	d901      	bls.n	80046e2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e095      	b.n	800480e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046e2:	4b4e      	ldr	r3, [pc, #312]	; (800481c <HAL_RCC_ClockConfig+0x264>)
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f003 020c 	and.w	r2, r3, #12
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d1eb      	bne.n	80046cc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0302 	and.w	r3, r3, #2
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d023      	beq.n	8004748 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0304 	and.w	r3, r3, #4
 8004708:	2b00      	cmp	r3, #0
 800470a:	d005      	beq.n	8004718 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800470c:	4b43      	ldr	r3, [pc, #268]	; (800481c <HAL_RCC_ClockConfig+0x264>)
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	4a42      	ldr	r2, [pc, #264]	; (800481c <HAL_RCC_ClockConfig+0x264>)
 8004712:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004716:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0308 	and.w	r3, r3, #8
 8004720:	2b00      	cmp	r3, #0
 8004722:	d007      	beq.n	8004734 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004724:	4b3d      	ldr	r3, [pc, #244]	; (800481c <HAL_RCC_ClockConfig+0x264>)
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800472c:	4a3b      	ldr	r2, [pc, #236]	; (800481c <HAL_RCC_ClockConfig+0x264>)
 800472e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004732:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004734:	4b39      	ldr	r3, [pc, #228]	; (800481c <HAL_RCC_ClockConfig+0x264>)
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	4936      	ldr	r1, [pc, #216]	; (800481c <HAL_RCC_ClockConfig+0x264>)
 8004742:	4313      	orrs	r3, r2
 8004744:	608b      	str	r3, [r1, #8]
 8004746:	e008      	b.n	800475a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	2b80      	cmp	r3, #128	; 0x80
 800474c:	d105      	bne.n	800475a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800474e:	4b33      	ldr	r3, [pc, #204]	; (800481c <HAL_RCC_ClockConfig+0x264>)
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	4a32      	ldr	r2, [pc, #200]	; (800481c <HAL_RCC_ClockConfig+0x264>)
 8004754:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004758:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800475a:	4b2f      	ldr	r3, [pc, #188]	; (8004818 <HAL_RCC_ClockConfig+0x260>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 030f 	and.w	r3, r3, #15
 8004762:	683a      	ldr	r2, [r7, #0]
 8004764:	429a      	cmp	r2, r3
 8004766:	d21d      	bcs.n	80047a4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004768:	4b2b      	ldr	r3, [pc, #172]	; (8004818 <HAL_RCC_ClockConfig+0x260>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f023 020f 	bic.w	r2, r3, #15
 8004770:	4929      	ldr	r1, [pc, #164]	; (8004818 <HAL_RCC_ClockConfig+0x260>)
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	4313      	orrs	r3, r2
 8004776:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004778:	f7fd fd7a 	bl	8002270 <HAL_GetTick>
 800477c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800477e:	e00a      	b.n	8004796 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004780:	f7fd fd76 	bl	8002270 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	f241 3288 	movw	r2, #5000	; 0x1388
 800478e:	4293      	cmp	r3, r2
 8004790:	d901      	bls.n	8004796 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e03b      	b.n	800480e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004796:	4b20      	ldr	r3, [pc, #128]	; (8004818 <HAL_RCC_ClockConfig+0x260>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 030f 	and.w	r3, r3, #15
 800479e:	683a      	ldr	r2, [r7, #0]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d1ed      	bne.n	8004780 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0304 	and.w	r3, r3, #4
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d008      	beq.n	80047c2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047b0:	4b1a      	ldr	r3, [pc, #104]	; (800481c <HAL_RCC_ClockConfig+0x264>)
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	4917      	ldr	r1, [pc, #92]	; (800481c <HAL_RCC_ClockConfig+0x264>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0308 	and.w	r3, r3, #8
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d009      	beq.n	80047e2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047ce:	4b13      	ldr	r3, [pc, #76]	; (800481c <HAL_RCC_ClockConfig+0x264>)
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	00db      	lsls	r3, r3, #3
 80047dc:	490f      	ldr	r1, [pc, #60]	; (800481c <HAL_RCC_ClockConfig+0x264>)
 80047de:	4313      	orrs	r3, r2
 80047e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80047e2:	f000 f825 	bl	8004830 <HAL_RCC_GetSysClockFreq>
 80047e6:	4602      	mov	r2, r0
 80047e8:	4b0c      	ldr	r3, [pc, #48]	; (800481c <HAL_RCC_ClockConfig+0x264>)
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	091b      	lsrs	r3, r3, #4
 80047ee:	f003 030f 	and.w	r3, r3, #15
 80047f2:	490c      	ldr	r1, [pc, #48]	; (8004824 <HAL_RCC_ClockConfig+0x26c>)
 80047f4:	5ccb      	ldrb	r3, [r1, r3]
 80047f6:	f003 031f 	and.w	r3, r3, #31
 80047fa:	fa22 f303 	lsr.w	r3, r2, r3
 80047fe:	4a0a      	ldr	r2, [pc, #40]	; (8004828 <HAL_RCC_ClockConfig+0x270>)
 8004800:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004802:	4b0a      	ldr	r3, [pc, #40]	; (800482c <HAL_RCC_ClockConfig+0x274>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4618      	mov	r0, r3
 8004808:	f7fd fce6 	bl	80021d8 <HAL_InitTick>
 800480c:	4603      	mov	r3, r0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3718      	adds	r7, #24
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	40022000 	.word	0x40022000
 800481c:	40021000 	.word	0x40021000
 8004820:	04c4b400 	.word	0x04c4b400
 8004824:	08007984 	.word	0x08007984
 8004828:	2000012c 	.word	0x2000012c
 800482c:	20000130 	.word	0x20000130

08004830 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004830:	b480      	push	{r7}
 8004832:	b087      	sub	sp, #28
 8004834:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004836:	4b2c      	ldr	r3, [pc, #176]	; (80048e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f003 030c 	and.w	r3, r3, #12
 800483e:	2b04      	cmp	r3, #4
 8004840:	d102      	bne.n	8004848 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004842:	4b2a      	ldr	r3, [pc, #168]	; (80048ec <HAL_RCC_GetSysClockFreq+0xbc>)
 8004844:	613b      	str	r3, [r7, #16]
 8004846:	e047      	b.n	80048d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004848:	4b27      	ldr	r3, [pc, #156]	; (80048e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	f003 030c 	and.w	r3, r3, #12
 8004850:	2b08      	cmp	r3, #8
 8004852:	d102      	bne.n	800485a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004854:	4b26      	ldr	r3, [pc, #152]	; (80048f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004856:	613b      	str	r3, [r7, #16]
 8004858:	e03e      	b.n	80048d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800485a:	4b23      	ldr	r3, [pc, #140]	; (80048e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f003 030c 	and.w	r3, r3, #12
 8004862:	2b0c      	cmp	r3, #12
 8004864:	d136      	bne.n	80048d4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004866:	4b20      	ldr	r3, [pc, #128]	; (80048e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	f003 0303 	and.w	r3, r3, #3
 800486e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004870:	4b1d      	ldr	r3, [pc, #116]	; (80048e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	091b      	lsrs	r3, r3, #4
 8004876:	f003 030f 	and.w	r3, r3, #15
 800487a:	3301      	adds	r3, #1
 800487c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2b03      	cmp	r3, #3
 8004882:	d10c      	bne.n	800489e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004884:	4a1a      	ldr	r2, [pc, #104]	; (80048f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	fbb2 f3f3 	udiv	r3, r2, r3
 800488c:	4a16      	ldr	r2, [pc, #88]	; (80048e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800488e:	68d2      	ldr	r2, [r2, #12]
 8004890:	0a12      	lsrs	r2, r2, #8
 8004892:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004896:	fb02 f303 	mul.w	r3, r2, r3
 800489a:	617b      	str	r3, [r7, #20]
      break;
 800489c:	e00c      	b.n	80048b8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800489e:	4a13      	ldr	r2, [pc, #76]	; (80048ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048a6:	4a10      	ldr	r2, [pc, #64]	; (80048e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048a8:	68d2      	ldr	r2, [r2, #12]
 80048aa:	0a12      	lsrs	r2, r2, #8
 80048ac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80048b0:	fb02 f303 	mul.w	r3, r2, r3
 80048b4:	617b      	str	r3, [r7, #20]
      break;
 80048b6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80048b8:	4b0b      	ldr	r3, [pc, #44]	; (80048e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	0e5b      	lsrs	r3, r3, #25
 80048be:	f003 0303 	and.w	r3, r3, #3
 80048c2:	3301      	adds	r3, #1
 80048c4:	005b      	lsls	r3, r3, #1
 80048c6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80048c8:	697a      	ldr	r2, [r7, #20]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d0:	613b      	str	r3, [r7, #16]
 80048d2:	e001      	b.n	80048d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80048d4:	2300      	movs	r3, #0
 80048d6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80048d8:	693b      	ldr	r3, [r7, #16]
}
 80048da:	4618      	mov	r0, r3
 80048dc:	371c      	adds	r7, #28
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	40021000 	.word	0x40021000
 80048ec:	00f42400 	.word	0x00f42400
 80048f0:	007a1200 	.word	0x007a1200

080048f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048f4:	b480      	push	{r7}
 80048f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048f8:	4b03      	ldr	r3, [pc, #12]	; (8004908 <HAL_RCC_GetHCLKFreq+0x14>)
 80048fa:	681b      	ldr	r3, [r3, #0]
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	2000012c 	.word	0x2000012c

0800490c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004910:	f7ff fff0 	bl	80048f4 <HAL_RCC_GetHCLKFreq>
 8004914:	4602      	mov	r2, r0
 8004916:	4b06      	ldr	r3, [pc, #24]	; (8004930 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	0a1b      	lsrs	r3, r3, #8
 800491c:	f003 0307 	and.w	r3, r3, #7
 8004920:	4904      	ldr	r1, [pc, #16]	; (8004934 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004922:	5ccb      	ldrb	r3, [r1, r3]
 8004924:	f003 031f 	and.w	r3, r3, #31
 8004928:	fa22 f303 	lsr.w	r3, r2, r3
}
 800492c:	4618      	mov	r0, r3
 800492e:	bd80      	pop	{r7, pc}
 8004930:	40021000 	.word	0x40021000
 8004934:	08007994 	.word	0x08007994

08004938 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800493c:	f7ff ffda 	bl	80048f4 <HAL_RCC_GetHCLKFreq>
 8004940:	4602      	mov	r2, r0
 8004942:	4b06      	ldr	r3, [pc, #24]	; (800495c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	0adb      	lsrs	r3, r3, #11
 8004948:	f003 0307 	and.w	r3, r3, #7
 800494c:	4904      	ldr	r1, [pc, #16]	; (8004960 <HAL_RCC_GetPCLK2Freq+0x28>)
 800494e:	5ccb      	ldrb	r3, [r1, r3]
 8004950:	f003 031f 	and.w	r3, r3, #31
 8004954:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004958:	4618      	mov	r0, r3
 800495a:	bd80      	pop	{r7, pc}
 800495c:	40021000 	.word	0x40021000
 8004960:	08007994 	.word	0x08007994

08004964 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004964:	b480      	push	{r7}
 8004966:	b087      	sub	sp, #28
 8004968:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800496a:	4b1e      	ldr	r3, [pc, #120]	; (80049e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	f003 0303 	and.w	r3, r3, #3
 8004972:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004974:	4b1b      	ldr	r3, [pc, #108]	; (80049e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	091b      	lsrs	r3, r3, #4
 800497a:	f003 030f 	and.w	r3, r3, #15
 800497e:	3301      	adds	r3, #1
 8004980:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	2b03      	cmp	r3, #3
 8004986:	d10c      	bne.n	80049a2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004988:	4a17      	ldr	r2, [pc, #92]	; (80049e8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004990:	4a14      	ldr	r2, [pc, #80]	; (80049e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004992:	68d2      	ldr	r2, [r2, #12]
 8004994:	0a12      	lsrs	r2, r2, #8
 8004996:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800499a:	fb02 f303 	mul.w	r3, r2, r3
 800499e:	617b      	str	r3, [r7, #20]
    break;
 80049a0:	e00c      	b.n	80049bc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80049a2:	4a12      	ldr	r2, [pc, #72]	; (80049ec <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80049aa:	4a0e      	ldr	r2, [pc, #56]	; (80049e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80049ac:	68d2      	ldr	r2, [r2, #12]
 80049ae:	0a12      	lsrs	r2, r2, #8
 80049b0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80049b4:	fb02 f303 	mul.w	r3, r2, r3
 80049b8:	617b      	str	r3, [r7, #20]
    break;
 80049ba:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80049bc:	4b09      	ldr	r3, [pc, #36]	; (80049e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	0e5b      	lsrs	r3, r3, #25
 80049c2:	f003 0303 	and.w	r3, r3, #3
 80049c6:	3301      	adds	r3, #1
 80049c8:	005b      	lsls	r3, r3, #1
 80049ca:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80049cc:	697a      	ldr	r2, [r7, #20]
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049d4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80049d6:	687b      	ldr	r3, [r7, #4]
}
 80049d8:	4618      	mov	r0, r3
 80049da:	371c      	adds	r7, #28
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr
 80049e4:	40021000 	.word	0x40021000
 80049e8:	007a1200 	.word	0x007a1200
 80049ec:	00f42400 	.word	0x00f42400

080049f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b086      	sub	sp, #24
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80049f8:	2300      	movs	r3, #0
 80049fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80049fc:	2300      	movs	r3, #0
 80049fe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	f000 8098 	beq.w	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a12:	4b43      	ldr	r3, [pc, #268]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d10d      	bne.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a1e:	4b40      	ldr	r3, [pc, #256]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a22:	4a3f      	ldr	r2, [pc, #252]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a28:	6593      	str	r3, [r2, #88]	; 0x58
 8004a2a:	4b3d      	ldr	r3, [pc, #244]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a32:	60bb      	str	r3, [r7, #8]
 8004a34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a36:	2301      	movs	r3, #1
 8004a38:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a3a:	4b3a      	ldr	r3, [pc, #232]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a39      	ldr	r2, [pc, #228]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004a40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a44:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a46:	f7fd fc13 	bl	8002270 <HAL_GetTick>
 8004a4a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a4c:	e009      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a4e:	f7fd fc0f 	bl	8002270 <HAL_GetTick>
 8004a52:	4602      	mov	r2, r0
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	d902      	bls.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	74fb      	strb	r3, [r7, #19]
        break;
 8004a60:	e005      	b.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a62:	4b30      	ldr	r3, [pc, #192]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d0ef      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004a6e:	7cfb      	ldrb	r3, [r7, #19]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d159      	bne.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004a74:	4b2a      	ldr	r3, [pc, #168]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a7e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d01e      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a8a:	697a      	ldr	r2, [r7, #20]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d019      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004a90:	4b23      	ldr	r3, [pc, #140]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a9a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a9c:	4b20      	ldr	r3, [pc, #128]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aa2:	4a1f      	ldr	r2, [pc, #124]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004aa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004aa8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004aac:	4b1c      	ldr	r3, [pc, #112]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ab2:	4a1b      	ldr	r2, [pc, #108]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ab4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ab8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004abc:	4a18      	ldr	r2, [pc, #96]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	f003 0301 	and.w	r3, r3, #1
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d016      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ace:	f7fd fbcf 	bl	8002270 <HAL_GetTick>
 8004ad2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ad4:	e00b      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ad6:	f7fd fbcb 	bl	8002270 <HAL_GetTick>
 8004ada:	4602      	mov	r2, r0
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d902      	bls.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	74fb      	strb	r3, [r7, #19]
            break;
 8004aec:	e006      	b.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004aee:	4b0c      	ldr	r3, [pc, #48]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004af4:	f003 0302 	and.w	r3, r3, #2
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d0ec      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004afc:	7cfb      	ldrb	r3, [r7, #19]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d10b      	bne.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b02:	4b07      	ldr	r3, [pc, #28]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b10:	4903      	ldr	r1, [pc, #12]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004b18:	e008      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004b1a:	7cfb      	ldrb	r3, [r7, #19]
 8004b1c:	74bb      	strb	r3, [r7, #18]
 8004b1e:	e005      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004b20:	40021000 	.word	0x40021000
 8004b24:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b28:	7cfb      	ldrb	r3, [r7, #19]
 8004b2a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b2c:	7c7b      	ldrb	r3, [r7, #17]
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d105      	bne.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b32:	4ba7      	ldr	r3, [pc, #668]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b36:	4aa6      	ldr	r2, [pc, #664]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b3c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0301 	and.w	r3, r3, #1
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00a      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b4a:	4ba1      	ldr	r3, [pc, #644]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b50:	f023 0203 	bic.w	r2, r3, #3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	499d      	ldr	r1, [pc, #628]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0302 	and.w	r3, r3, #2
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d00a      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b6c:	4b98      	ldr	r3, [pc, #608]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b72:	f023 020c 	bic.w	r2, r3, #12
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	4995      	ldr	r1, [pc, #596]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0304 	and.w	r3, r3, #4
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00a      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b8e:	4b90      	ldr	r3, [pc, #576]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b94:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	498c      	ldr	r1, [pc, #560]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0308 	and.w	r3, r3, #8
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d00a      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004bb0:	4b87      	ldr	r3, [pc, #540]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bb6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	4984      	ldr	r1, [pc, #528]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0310 	and.w	r3, r3, #16
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d00a      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004bd2:	4b7f      	ldr	r3, [pc, #508]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bd8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	695b      	ldr	r3, [r3, #20]
 8004be0:	497b      	ldr	r1, [pc, #492]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0320 	and.w	r3, r3, #32
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d00a      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004bf4:	4b76      	ldr	r3, [pc, #472]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bfa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	699b      	ldr	r3, [r3, #24]
 8004c02:	4973      	ldr	r1, [pc, #460]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c04:	4313      	orrs	r3, r2
 8004c06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d00a      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c16:	4b6e      	ldr	r3, [pc, #440]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c1c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	69db      	ldr	r3, [r3, #28]
 8004c24:	496a      	ldr	r1, [pc, #424]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d00a      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c38:	4b65      	ldr	r3, [pc, #404]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c3e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a1b      	ldr	r3, [r3, #32]
 8004c46:	4962      	ldr	r1, [pc, #392]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d00a      	beq.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c5a:	4b5d      	ldr	r3, [pc, #372]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c68:	4959      	ldr	r1, [pc, #356]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d00a      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c7c:	4b54      	ldr	r3, [pc, #336]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c82:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c8a:	4951      	ldr	r1, [pc, #324]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d015      	beq.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c9e:	4b4c      	ldr	r3, [pc, #304]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cac:	4948      	ldr	r1, [pc, #288]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cbc:	d105      	bne.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cbe:	4b44      	ldr	r3, [pc, #272]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	4a43      	ldr	r2, [pc, #268]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cc8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d015      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004cd6:	4b3e      	ldr	r3, [pc, #248]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cdc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce4:	493a      	ldr	r1, [pc, #232]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cf4:	d105      	bne.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cf6:	4b36      	ldr	r3, [pc, #216]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	4a35      	ldr	r2, [pc, #212]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cfc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d00:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d015      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004d0e:	4b30      	ldr	r3, [pc, #192]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d14:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d1c:	492c      	ldr	r1, [pc, #176]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d2c:	d105      	bne.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d2e:	4b28      	ldr	r3, [pc, #160]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	4a27      	ldr	r2, [pc, #156]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d38:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d015      	beq.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d46:	4b22      	ldr	r3, [pc, #136]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d4c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d54:	491e      	ldr	r1, [pc, #120]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d56:	4313      	orrs	r3, r2
 8004d58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d64:	d105      	bne.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d66:	4b1a      	ldr	r3, [pc, #104]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	4a19      	ldr	r2, [pc, #100]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d70:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d015      	beq.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d7e:	4b14      	ldr	r3, [pc, #80]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d84:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d8c:	4910      	ldr	r1, [pc, #64]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d9c:	d105      	bne.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d9e:	4b0c      	ldr	r3, [pc, #48]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	4a0b      	ldr	r2, [pc, #44]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004da4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004da8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d018      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004db6:	4b06      	ldr	r3, [pc, #24]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dbc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc4:	4902      	ldr	r1, [pc, #8]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	e001      	b.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004dd0:	40021000 	.word	0x40021000
 8004dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004dda:	d105      	bne.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004ddc:	4b21      	ldr	r3, [pc, #132]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	4a20      	ldr	r2, [pc, #128]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004de2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004de6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d015      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004df4:	4b1b      	ldr	r3, [pc, #108]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dfa:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e02:	4918      	ldr	r1, [pc, #96]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004e04:	4313      	orrs	r3, r2
 8004e06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e12:	d105      	bne.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004e14:	4b13      	ldr	r3, [pc, #76]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	4a12      	ldr	r2, [pc, #72]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004e1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e1e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d015      	beq.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004e2c:	4b0d      	ldr	r3, [pc, #52]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004e2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e32:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e3a:	490a      	ldr	r1, [pc, #40]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e46:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e4a:	d105      	bne.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e4c:	4b05      	ldr	r3, [pc, #20]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	4a04      	ldr	r2, [pc, #16]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004e52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e56:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004e58:	7cbb      	ldrb	r3, [r7, #18]
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3718      	adds	r7, #24
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop
 8004e64:	40021000 	.word	0x40021000

08004e68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b082      	sub	sp, #8
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d101      	bne.n	8004e7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e049      	b.n	8004f0e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d106      	bne.n	8004e94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f7fc fed2 	bl	8001c38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2202      	movs	r2, #2
 8004e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	3304      	adds	r3, #4
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	4610      	mov	r0, r2
 8004ea8:	f000 fdca 	bl	8005a40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2201      	movs	r2, #1
 8004f00:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3708      	adds	r7, #8
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
	...

08004f18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b085      	sub	sp, #20
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d001      	beq.n	8004f30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e04f      	b.n	8004fd0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2202      	movs	r2, #2
 8004f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	68da      	ldr	r2, [r3, #12]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f042 0201 	orr.w	r2, r2, #1
 8004f46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a23      	ldr	r2, [pc, #140]	; (8004fdc <HAL_TIM_Base_Start_IT+0xc4>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d01d      	beq.n	8004f8e <HAL_TIM_Base_Start_IT+0x76>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f5a:	d018      	beq.n	8004f8e <HAL_TIM_Base_Start_IT+0x76>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a1f      	ldr	r2, [pc, #124]	; (8004fe0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d013      	beq.n	8004f8e <HAL_TIM_Base_Start_IT+0x76>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a1e      	ldr	r2, [pc, #120]	; (8004fe4 <HAL_TIM_Base_Start_IT+0xcc>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d00e      	beq.n	8004f8e <HAL_TIM_Base_Start_IT+0x76>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a1c      	ldr	r2, [pc, #112]	; (8004fe8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d009      	beq.n	8004f8e <HAL_TIM_Base_Start_IT+0x76>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a1b      	ldr	r2, [pc, #108]	; (8004fec <HAL_TIM_Base_Start_IT+0xd4>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d004      	beq.n	8004f8e <HAL_TIM_Base_Start_IT+0x76>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a19      	ldr	r2, [pc, #100]	; (8004ff0 <HAL_TIM_Base_Start_IT+0xd8>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d115      	bne.n	8004fba <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	689a      	ldr	r2, [r3, #8]
 8004f94:	4b17      	ldr	r3, [pc, #92]	; (8004ff4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004f96:	4013      	ands	r3, r2
 8004f98:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2b06      	cmp	r3, #6
 8004f9e:	d015      	beq.n	8004fcc <HAL_TIM_Base_Start_IT+0xb4>
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fa6:	d011      	beq.n	8004fcc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f042 0201 	orr.w	r2, r2, #1
 8004fb6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fb8:	e008      	b.n	8004fcc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f042 0201 	orr.w	r2, r2, #1
 8004fc8:	601a      	str	r2, [r3, #0]
 8004fca:	e000      	b.n	8004fce <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fcc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004fce:	2300      	movs	r3, #0
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3714      	adds	r7, #20
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr
 8004fdc:	40012c00 	.word	0x40012c00
 8004fe0:	40000400 	.word	0x40000400
 8004fe4:	40000800 	.word	0x40000800
 8004fe8:	40013400 	.word	0x40013400
 8004fec:	40014000 	.word	0x40014000
 8004ff0:	40015000 	.word	0x40015000
 8004ff4:	00010007 	.word	0x00010007

08004ff8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b082      	sub	sp, #8
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d101      	bne.n	800500a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e049      	b.n	800509e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005010:	b2db      	uxtb	r3, r3
 8005012:	2b00      	cmp	r3, #0
 8005014:	d106      	bne.n	8005024 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f7fc fc9e 	bl	8001960 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2202      	movs	r2, #2
 8005028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	3304      	adds	r3, #4
 8005034:	4619      	mov	r1, r3
 8005036:	4610      	mov	r0, r2
 8005038:	f000 fd02 	bl	8005a40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3708      	adds	r7, #8
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
	...

080050a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d109      	bne.n	80050cc <HAL_TIM_PWM_Start+0x24>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	bf14      	ite	ne
 80050c4:	2301      	movne	r3, #1
 80050c6:	2300      	moveq	r3, #0
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	e03c      	b.n	8005146 <HAL_TIM_PWM_Start+0x9e>
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	2b04      	cmp	r3, #4
 80050d0:	d109      	bne.n	80050e6 <HAL_TIM_PWM_Start+0x3e>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	2b01      	cmp	r3, #1
 80050dc:	bf14      	ite	ne
 80050de:	2301      	movne	r3, #1
 80050e0:	2300      	moveq	r3, #0
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	e02f      	b.n	8005146 <HAL_TIM_PWM_Start+0x9e>
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	2b08      	cmp	r3, #8
 80050ea:	d109      	bne.n	8005100 <HAL_TIM_PWM_Start+0x58>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	bf14      	ite	ne
 80050f8:	2301      	movne	r3, #1
 80050fa:	2300      	moveq	r3, #0
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	e022      	b.n	8005146 <HAL_TIM_PWM_Start+0x9e>
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	2b0c      	cmp	r3, #12
 8005104:	d109      	bne.n	800511a <HAL_TIM_PWM_Start+0x72>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800510c:	b2db      	uxtb	r3, r3
 800510e:	2b01      	cmp	r3, #1
 8005110:	bf14      	ite	ne
 8005112:	2301      	movne	r3, #1
 8005114:	2300      	moveq	r3, #0
 8005116:	b2db      	uxtb	r3, r3
 8005118:	e015      	b.n	8005146 <HAL_TIM_PWM_Start+0x9e>
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	2b10      	cmp	r3, #16
 800511e:	d109      	bne.n	8005134 <HAL_TIM_PWM_Start+0x8c>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005126:	b2db      	uxtb	r3, r3
 8005128:	2b01      	cmp	r3, #1
 800512a:	bf14      	ite	ne
 800512c:	2301      	movne	r3, #1
 800512e:	2300      	moveq	r3, #0
 8005130:	b2db      	uxtb	r3, r3
 8005132:	e008      	b.n	8005146 <HAL_TIM_PWM_Start+0x9e>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800513a:	b2db      	uxtb	r3, r3
 800513c:	2b01      	cmp	r3, #1
 800513e:	bf14      	ite	ne
 8005140:	2301      	movne	r3, #1
 8005142:	2300      	moveq	r3, #0
 8005144:	b2db      	uxtb	r3, r3
 8005146:	2b00      	cmp	r3, #0
 8005148:	d001      	beq.n	800514e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e0a1      	b.n	8005292 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d104      	bne.n	800515e <HAL_TIM_PWM_Start+0xb6>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2202      	movs	r2, #2
 8005158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800515c:	e023      	b.n	80051a6 <HAL_TIM_PWM_Start+0xfe>
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	2b04      	cmp	r3, #4
 8005162:	d104      	bne.n	800516e <HAL_TIM_PWM_Start+0xc6>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2202      	movs	r2, #2
 8005168:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800516c:	e01b      	b.n	80051a6 <HAL_TIM_PWM_Start+0xfe>
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	2b08      	cmp	r3, #8
 8005172:	d104      	bne.n	800517e <HAL_TIM_PWM_Start+0xd6>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2202      	movs	r2, #2
 8005178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800517c:	e013      	b.n	80051a6 <HAL_TIM_PWM_Start+0xfe>
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	2b0c      	cmp	r3, #12
 8005182:	d104      	bne.n	800518e <HAL_TIM_PWM_Start+0xe6>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2202      	movs	r2, #2
 8005188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800518c:	e00b      	b.n	80051a6 <HAL_TIM_PWM_Start+0xfe>
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	2b10      	cmp	r3, #16
 8005192:	d104      	bne.n	800519e <HAL_TIM_PWM_Start+0xf6>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2202      	movs	r2, #2
 8005198:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800519c:	e003      	b.n	80051a6 <HAL_TIM_PWM_Start+0xfe>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2202      	movs	r2, #2
 80051a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	2201      	movs	r2, #1
 80051ac:	6839      	ldr	r1, [r7, #0]
 80051ae:	4618      	mov	r0, r3
 80051b0:	f001 f81a 	bl	80061e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a38      	ldr	r2, [pc, #224]	; (800529c <HAL_TIM_PWM_Start+0x1f4>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d018      	beq.n	80051f0 <HAL_TIM_PWM_Start+0x148>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a37      	ldr	r2, [pc, #220]	; (80052a0 <HAL_TIM_PWM_Start+0x1f8>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d013      	beq.n	80051f0 <HAL_TIM_PWM_Start+0x148>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a35      	ldr	r2, [pc, #212]	; (80052a4 <HAL_TIM_PWM_Start+0x1fc>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d00e      	beq.n	80051f0 <HAL_TIM_PWM_Start+0x148>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a34      	ldr	r2, [pc, #208]	; (80052a8 <HAL_TIM_PWM_Start+0x200>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d009      	beq.n	80051f0 <HAL_TIM_PWM_Start+0x148>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a32      	ldr	r2, [pc, #200]	; (80052ac <HAL_TIM_PWM_Start+0x204>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d004      	beq.n	80051f0 <HAL_TIM_PWM_Start+0x148>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a31      	ldr	r2, [pc, #196]	; (80052b0 <HAL_TIM_PWM_Start+0x208>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d101      	bne.n	80051f4 <HAL_TIM_PWM_Start+0x14c>
 80051f0:	2301      	movs	r3, #1
 80051f2:	e000      	b.n	80051f6 <HAL_TIM_PWM_Start+0x14e>
 80051f4:	2300      	movs	r3, #0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d007      	beq.n	800520a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005208:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a23      	ldr	r2, [pc, #140]	; (800529c <HAL_TIM_PWM_Start+0x1f4>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d01d      	beq.n	8005250 <HAL_TIM_PWM_Start+0x1a8>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800521c:	d018      	beq.n	8005250 <HAL_TIM_PWM_Start+0x1a8>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a24      	ldr	r2, [pc, #144]	; (80052b4 <HAL_TIM_PWM_Start+0x20c>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d013      	beq.n	8005250 <HAL_TIM_PWM_Start+0x1a8>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a22      	ldr	r2, [pc, #136]	; (80052b8 <HAL_TIM_PWM_Start+0x210>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d00e      	beq.n	8005250 <HAL_TIM_PWM_Start+0x1a8>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a1a      	ldr	r2, [pc, #104]	; (80052a0 <HAL_TIM_PWM_Start+0x1f8>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d009      	beq.n	8005250 <HAL_TIM_PWM_Start+0x1a8>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a18      	ldr	r2, [pc, #96]	; (80052a4 <HAL_TIM_PWM_Start+0x1fc>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d004      	beq.n	8005250 <HAL_TIM_PWM_Start+0x1a8>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a19      	ldr	r2, [pc, #100]	; (80052b0 <HAL_TIM_PWM_Start+0x208>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d115      	bne.n	800527c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	689a      	ldr	r2, [r3, #8]
 8005256:	4b19      	ldr	r3, [pc, #100]	; (80052bc <HAL_TIM_PWM_Start+0x214>)
 8005258:	4013      	ands	r3, r2
 800525a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2b06      	cmp	r3, #6
 8005260:	d015      	beq.n	800528e <HAL_TIM_PWM_Start+0x1e6>
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005268:	d011      	beq.n	800528e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f042 0201 	orr.w	r2, r2, #1
 8005278:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800527a:	e008      	b.n	800528e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f042 0201 	orr.w	r2, r2, #1
 800528a:	601a      	str	r2, [r3, #0]
 800528c:	e000      	b.n	8005290 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800528e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005290:	2300      	movs	r3, #0
}
 8005292:	4618      	mov	r0, r3
 8005294:	3710      	adds	r7, #16
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	40012c00 	.word	0x40012c00
 80052a0:	40013400 	.word	0x40013400
 80052a4:	40014000 	.word	0x40014000
 80052a8:	40014400 	.word	0x40014400
 80052ac:	40014800 	.word	0x40014800
 80052b0:	40015000 	.word	0x40015000
 80052b4:	40000400 	.word	0x40000400
 80052b8:	40000800 	.word	0x40000800
 80052bc:	00010007 	.word	0x00010007

080052c0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b086      	sub	sp, #24
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d101      	bne.n	80052d4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	e097      	b.n	8005404 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d106      	bne.n	80052ee <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f7fc fb97 	bl	8001a1c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2202      	movs	r2, #2
 80052f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	6812      	ldr	r2, [r2, #0]
 8005300:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8005304:	f023 0307 	bic.w	r3, r3, #7
 8005308:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	3304      	adds	r3, #4
 8005312:	4619      	mov	r1, r3
 8005314:	4610      	mov	r0, r2
 8005316:	f000 fb93 	bl	8005a40 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	699b      	ldr	r3, [r3, #24]
 8005328:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	6a1b      	ldr	r3, [r3, #32]
 8005330:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	697a      	ldr	r2, [r7, #20]
 8005338:	4313      	orrs	r3, r2
 800533a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005342:	f023 0303 	bic.w	r3, r3, #3
 8005346:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	689a      	ldr	r2, [r3, #8]
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	699b      	ldr	r3, [r3, #24]
 8005350:	021b      	lsls	r3, r3, #8
 8005352:	4313      	orrs	r3, r2
 8005354:	693a      	ldr	r2, [r7, #16]
 8005356:	4313      	orrs	r3, r2
 8005358:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005360:	f023 030c 	bic.w	r3, r3, #12
 8005364:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800536c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005370:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	68da      	ldr	r2, [r3, #12]
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	69db      	ldr	r3, [r3, #28]
 800537a:	021b      	lsls	r3, r3, #8
 800537c:	4313      	orrs	r3, r2
 800537e:	693a      	ldr	r2, [r7, #16]
 8005380:	4313      	orrs	r3, r2
 8005382:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	691b      	ldr	r3, [r3, #16]
 8005388:	011a      	lsls	r2, r3, #4
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	6a1b      	ldr	r3, [r3, #32]
 800538e:	031b      	lsls	r3, r3, #12
 8005390:	4313      	orrs	r3, r2
 8005392:	693a      	ldr	r2, [r7, #16]
 8005394:	4313      	orrs	r3, r2
 8005396:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800539e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80053a6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	685a      	ldr	r2, [r3, #4]
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	695b      	ldr	r3, [r3, #20]
 80053b0:	011b      	lsls	r3, r3, #4
 80053b2:	4313      	orrs	r3, r2
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	697a      	ldr	r2, [r7, #20]
 80053c0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	693a      	ldr	r2, [r7, #16]
 80053c8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68fa      	ldr	r2, [r7, #12]
 80053d0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2201      	movs	r2, #1
 80053d6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2201      	movs	r2, #1
 80053de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2201      	movs	r2, #1
 80053e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2201      	movs	r2, #1
 80053ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2201      	movs	r2, #1
 80053f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2201      	movs	r2, #1
 80053fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005402:	2300      	movs	r3, #0
}
 8005404:	4618      	mov	r0, r3
 8005406:	3718      	adds	r7, #24
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800541c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005424:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800542c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005434:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d110      	bne.n	800545e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800543c:	7bfb      	ldrb	r3, [r7, #15]
 800543e:	2b01      	cmp	r3, #1
 8005440:	d102      	bne.n	8005448 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005442:	7b7b      	ldrb	r3, [r7, #13]
 8005444:	2b01      	cmp	r3, #1
 8005446:	d001      	beq.n	800544c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e069      	b.n	8005520 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2202      	movs	r2, #2
 8005450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2202      	movs	r2, #2
 8005458:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800545c:	e031      	b.n	80054c2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	2b04      	cmp	r3, #4
 8005462:	d110      	bne.n	8005486 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005464:	7bbb      	ldrb	r3, [r7, #14]
 8005466:	2b01      	cmp	r3, #1
 8005468:	d102      	bne.n	8005470 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800546a:	7b3b      	ldrb	r3, [r7, #12]
 800546c:	2b01      	cmp	r3, #1
 800546e:	d001      	beq.n	8005474 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	e055      	b.n	8005520 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2202      	movs	r2, #2
 8005478:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2202      	movs	r2, #2
 8005480:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005484:	e01d      	b.n	80054c2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005486:	7bfb      	ldrb	r3, [r7, #15]
 8005488:	2b01      	cmp	r3, #1
 800548a:	d108      	bne.n	800549e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800548c:	7bbb      	ldrb	r3, [r7, #14]
 800548e:	2b01      	cmp	r3, #1
 8005490:	d105      	bne.n	800549e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005492:	7b7b      	ldrb	r3, [r7, #13]
 8005494:	2b01      	cmp	r3, #1
 8005496:	d102      	bne.n	800549e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005498:	7b3b      	ldrb	r3, [r7, #12]
 800549a:	2b01      	cmp	r3, #1
 800549c:	d001      	beq.n	80054a2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e03e      	b.n	8005520 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2202      	movs	r2, #2
 80054a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2202      	movs	r2, #2
 80054ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2202      	movs	r2, #2
 80054b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2202      	movs	r2, #2
 80054be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d003      	beq.n	80054d0 <HAL_TIM_Encoder_Start+0xc4>
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	2b04      	cmp	r3, #4
 80054cc:	d008      	beq.n	80054e0 <HAL_TIM_Encoder_Start+0xd4>
 80054ce:	e00f      	b.n	80054f0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2201      	movs	r2, #1
 80054d6:	2100      	movs	r1, #0
 80054d8:	4618      	mov	r0, r3
 80054da:	f000 fe85 	bl	80061e8 <TIM_CCxChannelCmd>
      break;
 80054de:	e016      	b.n	800550e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2201      	movs	r2, #1
 80054e6:	2104      	movs	r1, #4
 80054e8:	4618      	mov	r0, r3
 80054ea:	f000 fe7d 	bl	80061e8 <TIM_CCxChannelCmd>
      break;
 80054ee:	e00e      	b.n	800550e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2201      	movs	r2, #1
 80054f6:	2100      	movs	r1, #0
 80054f8:	4618      	mov	r0, r3
 80054fa:	f000 fe75 	bl	80061e8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2201      	movs	r2, #1
 8005504:	2104      	movs	r1, #4
 8005506:	4618      	mov	r0, r3
 8005508:	f000 fe6e 	bl	80061e8 <TIM_CCxChannelCmd>
      break;
 800550c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f042 0201 	orr.w	r2, r2, #1
 800551c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800551e:	2300      	movs	r3, #0
}
 8005520:	4618      	mov	r0, r3
 8005522:	3710      	adds	r7, #16
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	f003 0302 	and.w	r3, r3, #2
 8005546:	2b00      	cmp	r3, #0
 8005548:	d020      	beq.n	800558c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f003 0302 	and.w	r3, r3, #2
 8005550:	2b00      	cmp	r3, #0
 8005552:	d01b      	beq.n	800558c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f06f 0202 	mvn.w	r2, #2
 800555c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2201      	movs	r2, #1
 8005562:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	699b      	ldr	r3, [r3, #24]
 800556a:	f003 0303 	and.w	r3, r3, #3
 800556e:	2b00      	cmp	r3, #0
 8005570:	d003      	beq.n	800557a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 fa46 	bl	8005a04 <HAL_TIM_IC_CaptureCallback>
 8005578:	e005      	b.n	8005586 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 fa38 	bl	80059f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f000 fa49 	bl	8005a18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	f003 0304 	and.w	r3, r3, #4
 8005592:	2b00      	cmp	r3, #0
 8005594:	d020      	beq.n	80055d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f003 0304 	and.w	r3, r3, #4
 800559c:	2b00      	cmp	r3, #0
 800559e:	d01b      	beq.n	80055d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f06f 0204 	mvn.w	r2, #4
 80055a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2202      	movs	r2, #2
 80055ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	699b      	ldr	r3, [r3, #24]
 80055b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d003      	beq.n	80055c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 fa20 	bl	8005a04 <HAL_TIM_IC_CaptureCallback>
 80055c4:	e005      	b.n	80055d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f000 fa12 	bl	80059f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f000 fa23 	bl	8005a18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	f003 0308 	and.w	r3, r3, #8
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d020      	beq.n	8005624 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f003 0308 	and.w	r3, r3, #8
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d01b      	beq.n	8005624 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f06f 0208 	mvn.w	r2, #8
 80055f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2204      	movs	r2, #4
 80055fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	69db      	ldr	r3, [r3, #28]
 8005602:	f003 0303 	and.w	r3, r3, #3
 8005606:	2b00      	cmp	r3, #0
 8005608:	d003      	beq.n	8005612 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 f9fa 	bl	8005a04 <HAL_TIM_IC_CaptureCallback>
 8005610:	e005      	b.n	800561e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 f9ec 	bl	80059f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 f9fd 	bl	8005a18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	f003 0310 	and.w	r3, r3, #16
 800562a:	2b00      	cmp	r3, #0
 800562c:	d020      	beq.n	8005670 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f003 0310 	and.w	r3, r3, #16
 8005634:	2b00      	cmp	r3, #0
 8005636:	d01b      	beq.n	8005670 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f06f 0210 	mvn.w	r2, #16
 8005640:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2208      	movs	r2, #8
 8005646:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	69db      	ldr	r3, [r3, #28]
 800564e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005652:	2b00      	cmp	r3, #0
 8005654:	d003      	beq.n	800565e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 f9d4 	bl	8005a04 <HAL_TIM_IC_CaptureCallback>
 800565c:	e005      	b.n	800566a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 f9c6 	bl	80059f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f000 f9d7 	bl	8005a18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	f003 0301 	and.w	r3, r3, #1
 8005676:	2b00      	cmp	r3, #0
 8005678:	d00c      	beq.n	8005694 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f003 0301 	and.w	r3, r3, #1
 8005680:	2b00      	cmp	r3, #0
 8005682:	d007      	beq.n	8005694 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f06f 0201 	mvn.w	r2, #1
 800568c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f7fb fda0 	bl	80011d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800569a:	2b00      	cmp	r3, #0
 800569c:	d104      	bne.n	80056a8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d00c      	beq.n	80056c2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d007      	beq.n	80056c2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80056ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f000 fee5 	bl	800648c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d00c      	beq.n	80056e6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d007      	beq.n	80056e6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80056de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f000 fedd 	bl	80064a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d00c      	beq.n	800570a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d007      	beq.n	800570a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005702:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f000 f991 	bl	8005a2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	f003 0320 	and.w	r3, r3, #32
 8005710:	2b00      	cmp	r3, #0
 8005712:	d00c      	beq.n	800572e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f003 0320 	and.w	r3, r3, #32
 800571a:	2b00      	cmp	r3, #0
 800571c:	d007      	beq.n	800572e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f06f 0220 	mvn.w	r2, #32
 8005726:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f000 fea5 	bl	8006478 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005734:	2b00      	cmp	r3, #0
 8005736:	d00c      	beq.n	8005752 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800573e:	2b00      	cmp	r3, #0
 8005740:	d007      	beq.n	8005752 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800574a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 feb1 	bl	80064b4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005758:	2b00      	cmp	r3, #0
 800575a:	d00c      	beq.n	8005776 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005762:	2b00      	cmp	r3, #0
 8005764:	d007      	beq.n	8005776 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800576e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f000 fea9 	bl	80064c8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800577c:	2b00      	cmp	r3, #0
 800577e:	d00c      	beq.n	800579a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005786:	2b00      	cmp	r3, #0
 8005788:	d007      	beq.n	800579a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8005792:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f000 fea1 	bl	80064dc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d00c      	beq.n	80057be <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d007      	beq.n	80057be <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80057b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f000 fe99 	bl	80064f0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057be:	bf00      	nop
 80057c0:	3710      	adds	r7, #16
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
	...

080057c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b086      	sub	sp, #24
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057d4:	2300      	movs	r3, #0
 80057d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d101      	bne.n	80057e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80057e2:	2302      	movs	r3, #2
 80057e4:	e0ff      	b.n	80059e6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2201      	movs	r2, #1
 80057ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2b14      	cmp	r3, #20
 80057f2:	f200 80f0 	bhi.w	80059d6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80057f6:	a201      	add	r2, pc, #4	; (adr r2, 80057fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80057f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057fc:	08005851 	.word	0x08005851
 8005800:	080059d7 	.word	0x080059d7
 8005804:	080059d7 	.word	0x080059d7
 8005808:	080059d7 	.word	0x080059d7
 800580c:	08005891 	.word	0x08005891
 8005810:	080059d7 	.word	0x080059d7
 8005814:	080059d7 	.word	0x080059d7
 8005818:	080059d7 	.word	0x080059d7
 800581c:	080058d3 	.word	0x080058d3
 8005820:	080059d7 	.word	0x080059d7
 8005824:	080059d7 	.word	0x080059d7
 8005828:	080059d7 	.word	0x080059d7
 800582c:	08005913 	.word	0x08005913
 8005830:	080059d7 	.word	0x080059d7
 8005834:	080059d7 	.word	0x080059d7
 8005838:	080059d7 	.word	0x080059d7
 800583c:	08005955 	.word	0x08005955
 8005840:	080059d7 	.word	0x080059d7
 8005844:	080059d7 	.word	0x080059d7
 8005848:	080059d7 	.word	0x080059d7
 800584c:	08005995 	.word	0x08005995
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	68b9      	ldr	r1, [r7, #8]
 8005856:	4618      	mov	r0, r3
 8005858:	f000 f99c 	bl	8005b94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	699a      	ldr	r2, [r3, #24]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f042 0208 	orr.w	r2, r2, #8
 800586a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	699a      	ldr	r2, [r3, #24]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f022 0204 	bic.w	r2, r2, #4
 800587a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	6999      	ldr	r1, [r3, #24]
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	691a      	ldr	r2, [r3, #16]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	430a      	orrs	r2, r1
 800588c:	619a      	str	r2, [r3, #24]
      break;
 800588e:	e0a5      	b.n	80059dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	68b9      	ldr	r1, [r7, #8]
 8005896:	4618      	mov	r0, r3
 8005898:	f000 fa16 	bl	8005cc8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	699a      	ldr	r2, [r3, #24]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	699a      	ldr	r2, [r3, #24]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	6999      	ldr	r1, [r3, #24]
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	021a      	lsls	r2, r3, #8
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	430a      	orrs	r2, r1
 80058ce:	619a      	str	r2, [r3, #24]
      break;
 80058d0:	e084      	b.n	80059dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	68b9      	ldr	r1, [r7, #8]
 80058d8:	4618      	mov	r0, r3
 80058da:	f000 fa89 	bl	8005df0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	69da      	ldr	r2, [r3, #28]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f042 0208 	orr.w	r2, r2, #8
 80058ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	69da      	ldr	r2, [r3, #28]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f022 0204 	bic.w	r2, r2, #4
 80058fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	69d9      	ldr	r1, [r3, #28]
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	691a      	ldr	r2, [r3, #16]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	430a      	orrs	r2, r1
 800590e:	61da      	str	r2, [r3, #28]
      break;
 8005910:	e064      	b.n	80059dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	68b9      	ldr	r1, [r7, #8]
 8005918:	4618      	mov	r0, r3
 800591a:	f000 fafb 	bl	8005f14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	69da      	ldr	r2, [r3, #28]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800592c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	69da      	ldr	r2, [r3, #28]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800593c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	69d9      	ldr	r1, [r3, #28]
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	691b      	ldr	r3, [r3, #16]
 8005948:	021a      	lsls	r2, r3, #8
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	430a      	orrs	r2, r1
 8005950:	61da      	str	r2, [r3, #28]
      break;
 8005952:	e043      	b.n	80059dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	68b9      	ldr	r1, [r7, #8]
 800595a:	4618      	mov	r0, r3
 800595c:	f000 fb6e 	bl	800603c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f042 0208 	orr.w	r2, r2, #8
 800596e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f022 0204 	bic.w	r2, r2, #4
 800597e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	691a      	ldr	r2, [r3, #16]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	430a      	orrs	r2, r1
 8005990:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005992:	e023      	b.n	80059dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68b9      	ldr	r1, [r7, #8]
 800599a:	4618      	mov	r0, r3
 800599c:	f000 fbb8 	bl	8006110 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059ae:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059be:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	021a      	lsls	r2, r3, #8
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	430a      	orrs	r2, r1
 80059d2:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80059d4:	e002      	b.n	80059dc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	75fb      	strb	r3, [r7, #23]
      break;
 80059da:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2200      	movs	r2, #0
 80059e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80059e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3718      	adds	r7, #24
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	bf00      	nop

080059f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b083      	sub	sp, #12
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059f8:	bf00      	nop
 80059fa:	370c      	adds	r7, #12
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr

08005a04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b083      	sub	sp, #12
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a0c:	bf00      	nop
 8005a0e:	370c      	adds	r7, #12
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr

08005a18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a20:	bf00      	nop
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a34:	bf00      	nop
 8005a36:	370c      	adds	r7, #12
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b085      	sub	sp, #20
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a48      	ldr	r2, [pc, #288]	; (8005b74 <TIM_Base_SetConfig+0x134>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d013      	beq.n	8005a80 <TIM_Base_SetConfig+0x40>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a5e:	d00f      	beq.n	8005a80 <TIM_Base_SetConfig+0x40>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4a45      	ldr	r2, [pc, #276]	; (8005b78 <TIM_Base_SetConfig+0x138>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d00b      	beq.n	8005a80 <TIM_Base_SetConfig+0x40>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4a44      	ldr	r2, [pc, #272]	; (8005b7c <TIM_Base_SetConfig+0x13c>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d007      	beq.n	8005a80 <TIM_Base_SetConfig+0x40>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a43      	ldr	r2, [pc, #268]	; (8005b80 <TIM_Base_SetConfig+0x140>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d003      	beq.n	8005a80 <TIM_Base_SetConfig+0x40>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	4a42      	ldr	r2, [pc, #264]	; (8005b84 <TIM_Base_SetConfig+0x144>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d108      	bne.n	8005a92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	68fa      	ldr	r2, [r7, #12]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a37      	ldr	r2, [pc, #220]	; (8005b74 <TIM_Base_SetConfig+0x134>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d01f      	beq.n	8005ada <TIM_Base_SetConfig+0x9a>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aa0:	d01b      	beq.n	8005ada <TIM_Base_SetConfig+0x9a>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a34      	ldr	r2, [pc, #208]	; (8005b78 <TIM_Base_SetConfig+0x138>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d017      	beq.n	8005ada <TIM_Base_SetConfig+0x9a>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a33      	ldr	r2, [pc, #204]	; (8005b7c <TIM_Base_SetConfig+0x13c>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d013      	beq.n	8005ada <TIM_Base_SetConfig+0x9a>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a32      	ldr	r2, [pc, #200]	; (8005b80 <TIM_Base_SetConfig+0x140>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d00f      	beq.n	8005ada <TIM_Base_SetConfig+0x9a>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a32      	ldr	r2, [pc, #200]	; (8005b88 <TIM_Base_SetConfig+0x148>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d00b      	beq.n	8005ada <TIM_Base_SetConfig+0x9a>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a31      	ldr	r2, [pc, #196]	; (8005b8c <TIM_Base_SetConfig+0x14c>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d007      	beq.n	8005ada <TIM_Base_SetConfig+0x9a>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4a30      	ldr	r2, [pc, #192]	; (8005b90 <TIM_Base_SetConfig+0x150>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d003      	beq.n	8005ada <TIM_Base_SetConfig+0x9a>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4a2b      	ldr	r2, [pc, #172]	; (8005b84 <TIM_Base_SetConfig+0x144>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d108      	bne.n	8005aec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ae0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	68fa      	ldr	r2, [r7, #12]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	695b      	ldr	r3, [r3, #20]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	689a      	ldr	r2, [r3, #8]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4a18      	ldr	r2, [pc, #96]	; (8005b74 <TIM_Base_SetConfig+0x134>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d013      	beq.n	8005b40 <TIM_Base_SetConfig+0x100>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4a19      	ldr	r2, [pc, #100]	; (8005b80 <TIM_Base_SetConfig+0x140>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d00f      	beq.n	8005b40 <TIM_Base_SetConfig+0x100>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	4a19      	ldr	r2, [pc, #100]	; (8005b88 <TIM_Base_SetConfig+0x148>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d00b      	beq.n	8005b40 <TIM_Base_SetConfig+0x100>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	4a18      	ldr	r2, [pc, #96]	; (8005b8c <TIM_Base_SetConfig+0x14c>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d007      	beq.n	8005b40 <TIM_Base_SetConfig+0x100>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	4a17      	ldr	r2, [pc, #92]	; (8005b90 <TIM_Base_SetConfig+0x150>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d003      	beq.n	8005b40 <TIM_Base_SetConfig+0x100>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4a12      	ldr	r2, [pc, #72]	; (8005b84 <TIM_Base_SetConfig+0x144>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d103      	bne.n	8005b48 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	691a      	ldr	r2, [r3, #16]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	f003 0301 	and.w	r3, r3, #1
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d105      	bne.n	8005b66 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	f023 0201 	bic.w	r2, r3, #1
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	611a      	str	r2, [r3, #16]
  }
}
 8005b66:	bf00      	nop
 8005b68:	3714      	adds	r7, #20
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr
 8005b72:	bf00      	nop
 8005b74:	40012c00 	.word	0x40012c00
 8005b78:	40000400 	.word	0x40000400
 8005b7c:	40000800 	.word	0x40000800
 8005b80:	40013400 	.word	0x40013400
 8005b84:	40015000 	.word	0x40015000
 8005b88:	40014000 	.word	0x40014000
 8005b8c:	40014400 	.word	0x40014400
 8005b90:	40014800 	.word	0x40014800

08005b94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b087      	sub	sp, #28
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a1b      	ldr	r3, [r3, #32]
 8005ba2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6a1b      	ldr	r3, [r3, #32]
 8005ba8:	f023 0201 	bic.w	r2, r3, #1
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	699b      	ldr	r3, [r3, #24]
 8005bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f023 0303 	bic.w	r3, r3, #3
 8005bce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	68fa      	ldr	r2, [r7, #12]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	f023 0302 	bic.w	r3, r3, #2
 8005be0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	697a      	ldr	r2, [r7, #20]
 8005be8:	4313      	orrs	r3, r2
 8005bea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	4a30      	ldr	r2, [pc, #192]	; (8005cb0 <TIM_OC1_SetConfig+0x11c>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d013      	beq.n	8005c1c <TIM_OC1_SetConfig+0x88>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	4a2f      	ldr	r2, [pc, #188]	; (8005cb4 <TIM_OC1_SetConfig+0x120>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d00f      	beq.n	8005c1c <TIM_OC1_SetConfig+0x88>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	4a2e      	ldr	r2, [pc, #184]	; (8005cb8 <TIM_OC1_SetConfig+0x124>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d00b      	beq.n	8005c1c <TIM_OC1_SetConfig+0x88>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	4a2d      	ldr	r2, [pc, #180]	; (8005cbc <TIM_OC1_SetConfig+0x128>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d007      	beq.n	8005c1c <TIM_OC1_SetConfig+0x88>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	4a2c      	ldr	r2, [pc, #176]	; (8005cc0 <TIM_OC1_SetConfig+0x12c>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d003      	beq.n	8005c1c <TIM_OC1_SetConfig+0x88>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4a2b      	ldr	r2, [pc, #172]	; (8005cc4 <TIM_OC1_SetConfig+0x130>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d10c      	bne.n	8005c36 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	f023 0308 	bic.w	r3, r3, #8
 8005c22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	697a      	ldr	r2, [r7, #20]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	f023 0304 	bic.w	r3, r3, #4
 8005c34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a1d      	ldr	r2, [pc, #116]	; (8005cb0 <TIM_OC1_SetConfig+0x11c>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d013      	beq.n	8005c66 <TIM_OC1_SetConfig+0xd2>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a1c      	ldr	r2, [pc, #112]	; (8005cb4 <TIM_OC1_SetConfig+0x120>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d00f      	beq.n	8005c66 <TIM_OC1_SetConfig+0xd2>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a1b      	ldr	r2, [pc, #108]	; (8005cb8 <TIM_OC1_SetConfig+0x124>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d00b      	beq.n	8005c66 <TIM_OC1_SetConfig+0xd2>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a1a      	ldr	r2, [pc, #104]	; (8005cbc <TIM_OC1_SetConfig+0x128>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d007      	beq.n	8005c66 <TIM_OC1_SetConfig+0xd2>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a19      	ldr	r2, [pc, #100]	; (8005cc0 <TIM_OC1_SetConfig+0x12c>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d003      	beq.n	8005c66 <TIM_OC1_SetConfig+0xd2>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a18      	ldr	r2, [pc, #96]	; (8005cc4 <TIM_OC1_SetConfig+0x130>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d111      	bne.n	8005c8a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	695b      	ldr	r3, [r3, #20]
 8005c7a:	693a      	ldr	r2, [r7, #16]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	699b      	ldr	r3, [r3, #24]
 8005c84:	693a      	ldr	r2, [r7, #16]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	693a      	ldr	r2, [r7, #16]
 8005c8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	68fa      	ldr	r2, [r7, #12]
 8005c94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	685a      	ldr	r2, [r3, #4]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	697a      	ldr	r2, [r7, #20]
 8005ca2:	621a      	str	r2, [r3, #32]
}
 8005ca4:	bf00      	nop
 8005ca6:	371c      	adds	r7, #28
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr
 8005cb0:	40012c00 	.word	0x40012c00
 8005cb4:	40013400 	.word	0x40013400
 8005cb8:	40014000 	.word	0x40014000
 8005cbc:	40014400 	.word	0x40014400
 8005cc0:	40014800 	.word	0x40014800
 8005cc4:	40015000 	.word	0x40015000

08005cc8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b087      	sub	sp, #28
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a1b      	ldr	r3, [r3, #32]
 8005cd6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6a1b      	ldr	r3, [r3, #32]
 8005cdc:	f023 0210 	bic.w	r2, r3, #16
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	699b      	ldr	r3, [r3, #24]
 8005cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	021b      	lsls	r3, r3, #8
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	f023 0320 	bic.w	r3, r3, #32
 8005d16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	011b      	lsls	r3, r3, #4
 8005d1e:	697a      	ldr	r2, [r7, #20]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	4a2c      	ldr	r2, [pc, #176]	; (8005dd8 <TIM_OC2_SetConfig+0x110>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d007      	beq.n	8005d3c <TIM_OC2_SetConfig+0x74>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	4a2b      	ldr	r2, [pc, #172]	; (8005ddc <TIM_OC2_SetConfig+0x114>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d003      	beq.n	8005d3c <TIM_OC2_SetConfig+0x74>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	4a2a      	ldr	r2, [pc, #168]	; (8005de0 <TIM_OC2_SetConfig+0x118>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d10d      	bne.n	8005d58 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	011b      	lsls	r3, r3, #4
 8005d4a:	697a      	ldr	r2, [r7, #20]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d56:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	4a1f      	ldr	r2, [pc, #124]	; (8005dd8 <TIM_OC2_SetConfig+0x110>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d013      	beq.n	8005d88 <TIM_OC2_SetConfig+0xc0>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4a1e      	ldr	r2, [pc, #120]	; (8005ddc <TIM_OC2_SetConfig+0x114>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d00f      	beq.n	8005d88 <TIM_OC2_SetConfig+0xc0>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4a1e      	ldr	r2, [pc, #120]	; (8005de4 <TIM_OC2_SetConfig+0x11c>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d00b      	beq.n	8005d88 <TIM_OC2_SetConfig+0xc0>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	4a1d      	ldr	r2, [pc, #116]	; (8005de8 <TIM_OC2_SetConfig+0x120>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d007      	beq.n	8005d88 <TIM_OC2_SetConfig+0xc0>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4a1c      	ldr	r2, [pc, #112]	; (8005dec <TIM_OC2_SetConfig+0x124>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d003      	beq.n	8005d88 <TIM_OC2_SetConfig+0xc0>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4a17      	ldr	r2, [pc, #92]	; (8005de0 <TIM_OC2_SetConfig+0x118>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d113      	bne.n	8005db0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	695b      	ldr	r3, [r3, #20]
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	693a      	ldr	r2, [r7, #16]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	699b      	ldr	r3, [r3, #24]
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	693a      	ldr	r2, [r7, #16]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	693a      	ldr	r2, [r7, #16]
 8005db4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	68fa      	ldr	r2, [r7, #12]
 8005dba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	685a      	ldr	r2, [r3, #4]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	697a      	ldr	r2, [r7, #20]
 8005dc8:	621a      	str	r2, [r3, #32]
}
 8005dca:	bf00      	nop
 8005dcc:	371c      	adds	r7, #28
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr
 8005dd6:	bf00      	nop
 8005dd8:	40012c00 	.word	0x40012c00
 8005ddc:	40013400 	.word	0x40013400
 8005de0:	40015000 	.word	0x40015000
 8005de4:	40014000 	.word	0x40014000
 8005de8:	40014400 	.word	0x40014400
 8005dec:	40014800 	.word	0x40014800

08005df0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b087      	sub	sp, #28
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a1b      	ldr	r3, [r3, #32]
 8005dfe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6a1b      	ldr	r3, [r3, #32]
 8005e04:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	69db      	ldr	r3, [r3, #28]
 8005e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f023 0303 	bic.w	r3, r3, #3
 8005e2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	68fa      	ldr	r2, [r7, #12]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	021b      	lsls	r3, r3, #8
 8005e44:	697a      	ldr	r2, [r7, #20]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4a2b      	ldr	r2, [pc, #172]	; (8005efc <TIM_OC3_SetConfig+0x10c>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d007      	beq.n	8005e62 <TIM_OC3_SetConfig+0x72>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	4a2a      	ldr	r2, [pc, #168]	; (8005f00 <TIM_OC3_SetConfig+0x110>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d003      	beq.n	8005e62 <TIM_OC3_SetConfig+0x72>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a29      	ldr	r2, [pc, #164]	; (8005f04 <TIM_OC3_SetConfig+0x114>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d10d      	bne.n	8005e7e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	021b      	lsls	r3, r3, #8
 8005e70:	697a      	ldr	r2, [r7, #20]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a1e      	ldr	r2, [pc, #120]	; (8005efc <TIM_OC3_SetConfig+0x10c>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d013      	beq.n	8005eae <TIM_OC3_SetConfig+0xbe>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4a1d      	ldr	r2, [pc, #116]	; (8005f00 <TIM_OC3_SetConfig+0x110>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d00f      	beq.n	8005eae <TIM_OC3_SetConfig+0xbe>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4a1d      	ldr	r2, [pc, #116]	; (8005f08 <TIM_OC3_SetConfig+0x118>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d00b      	beq.n	8005eae <TIM_OC3_SetConfig+0xbe>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4a1c      	ldr	r2, [pc, #112]	; (8005f0c <TIM_OC3_SetConfig+0x11c>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d007      	beq.n	8005eae <TIM_OC3_SetConfig+0xbe>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4a1b      	ldr	r2, [pc, #108]	; (8005f10 <TIM_OC3_SetConfig+0x120>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d003      	beq.n	8005eae <TIM_OC3_SetConfig+0xbe>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	4a16      	ldr	r2, [pc, #88]	; (8005f04 <TIM_OC3_SetConfig+0x114>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d113      	bne.n	8005ed6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005eb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ebc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	695b      	ldr	r3, [r3, #20]
 8005ec2:	011b      	lsls	r3, r3, #4
 8005ec4:	693a      	ldr	r2, [r7, #16]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	699b      	ldr	r3, [r3, #24]
 8005ece:	011b      	lsls	r3, r3, #4
 8005ed0:	693a      	ldr	r2, [r7, #16]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	693a      	ldr	r2, [r7, #16]
 8005eda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	68fa      	ldr	r2, [r7, #12]
 8005ee0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	685a      	ldr	r2, [r3, #4]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	697a      	ldr	r2, [r7, #20]
 8005eee:	621a      	str	r2, [r3, #32]
}
 8005ef0:	bf00      	nop
 8005ef2:	371c      	adds	r7, #28
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr
 8005efc:	40012c00 	.word	0x40012c00
 8005f00:	40013400 	.word	0x40013400
 8005f04:	40015000 	.word	0x40015000
 8005f08:	40014000 	.word	0x40014000
 8005f0c:	40014400 	.word	0x40014400
 8005f10:	40014800 	.word	0x40014800

08005f14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b087      	sub	sp, #28
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a1b      	ldr	r3, [r3, #32]
 8005f22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6a1b      	ldr	r3, [r3, #32]
 8005f28:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	69db      	ldr	r3, [r3, #28]
 8005f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	021b      	lsls	r3, r3, #8
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	031b      	lsls	r3, r3, #12
 8005f6a:	697a      	ldr	r2, [r7, #20]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	4a2c      	ldr	r2, [pc, #176]	; (8006024 <TIM_OC4_SetConfig+0x110>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d007      	beq.n	8005f88 <TIM_OC4_SetConfig+0x74>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	4a2b      	ldr	r2, [pc, #172]	; (8006028 <TIM_OC4_SetConfig+0x114>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d003      	beq.n	8005f88 <TIM_OC4_SetConfig+0x74>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4a2a      	ldr	r2, [pc, #168]	; (800602c <TIM_OC4_SetConfig+0x118>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d10d      	bne.n	8005fa4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005f8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	031b      	lsls	r3, r3, #12
 8005f96:	697a      	ldr	r2, [r7, #20]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fa2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	4a1f      	ldr	r2, [pc, #124]	; (8006024 <TIM_OC4_SetConfig+0x110>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d013      	beq.n	8005fd4 <TIM_OC4_SetConfig+0xc0>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	4a1e      	ldr	r2, [pc, #120]	; (8006028 <TIM_OC4_SetConfig+0x114>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d00f      	beq.n	8005fd4 <TIM_OC4_SetConfig+0xc0>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	4a1e      	ldr	r2, [pc, #120]	; (8006030 <TIM_OC4_SetConfig+0x11c>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d00b      	beq.n	8005fd4 <TIM_OC4_SetConfig+0xc0>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	4a1d      	ldr	r2, [pc, #116]	; (8006034 <TIM_OC4_SetConfig+0x120>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d007      	beq.n	8005fd4 <TIM_OC4_SetConfig+0xc0>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	4a1c      	ldr	r2, [pc, #112]	; (8006038 <TIM_OC4_SetConfig+0x124>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d003      	beq.n	8005fd4 <TIM_OC4_SetConfig+0xc0>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4a17      	ldr	r2, [pc, #92]	; (800602c <TIM_OC4_SetConfig+0x118>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d113      	bne.n	8005ffc <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fda:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005fe2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	695b      	ldr	r3, [r3, #20]
 8005fe8:	019b      	lsls	r3, r3, #6
 8005fea:	693a      	ldr	r2, [r7, #16]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	699b      	ldr	r3, [r3, #24]
 8005ff4:	019b      	lsls	r3, r3, #6
 8005ff6:	693a      	ldr	r2, [r7, #16]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	693a      	ldr	r2, [r7, #16]
 8006000:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	685a      	ldr	r2, [r3, #4]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	697a      	ldr	r2, [r7, #20]
 8006014:	621a      	str	r2, [r3, #32]
}
 8006016:	bf00      	nop
 8006018:	371c      	adds	r7, #28
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr
 8006022:	bf00      	nop
 8006024:	40012c00 	.word	0x40012c00
 8006028:	40013400 	.word	0x40013400
 800602c:	40015000 	.word	0x40015000
 8006030:	40014000 	.word	0x40014000
 8006034:	40014400 	.word	0x40014400
 8006038:	40014800 	.word	0x40014800

0800603c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800603c:	b480      	push	{r7}
 800603e:	b087      	sub	sp, #28
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6a1b      	ldr	r3, [r3, #32]
 800604a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6a1b      	ldr	r3, [r3, #32]
 8006050:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800606a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800606e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	68fa      	ldr	r2, [r7, #12]
 8006076:	4313      	orrs	r3, r2
 8006078:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006080:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	041b      	lsls	r3, r3, #16
 8006088:	693a      	ldr	r2, [r7, #16]
 800608a:	4313      	orrs	r3, r2
 800608c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4a19      	ldr	r2, [pc, #100]	; (80060f8 <TIM_OC5_SetConfig+0xbc>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d013      	beq.n	80060be <TIM_OC5_SetConfig+0x82>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4a18      	ldr	r2, [pc, #96]	; (80060fc <TIM_OC5_SetConfig+0xc0>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d00f      	beq.n	80060be <TIM_OC5_SetConfig+0x82>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a17      	ldr	r2, [pc, #92]	; (8006100 <TIM_OC5_SetConfig+0xc4>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d00b      	beq.n	80060be <TIM_OC5_SetConfig+0x82>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a16      	ldr	r2, [pc, #88]	; (8006104 <TIM_OC5_SetConfig+0xc8>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d007      	beq.n	80060be <TIM_OC5_SetConfig+0x82>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a15      	ldr	r2, [pc, #84]	; (8006108 <TIM_OC5_SetConfig+0xcc>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d003      	beq.n	80060be <TIM_OC5_SetConfig+0x82>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a14      	ldr	r2, [pc, #80]	; (800610c <TIM_OC5_SetConfig+0xd0>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d109      	bne.n	80060d2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	695b      	ldr	r3, [r3, #20]
 80060ca:	021b      	lsls	r3, r3, #8
 80060cc:	697a      	ldr	r2, [r7, #20]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	697a      	ldr	r2, [r7, #20]
 80060d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	68fa      	ldr	r2, [r7, #12]
 80060dc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	685a      	ldr	r2, [r3, #4]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	693a      	ldr	r2, [r7, #16]
 80060ea:	621a      	str	r2, [r3, #32]
}
 80060ec:	bf00      	nop
 80060ee:	371c      	adds	r7, #28
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr
 80060f8:	40012c00 	.word	0x40012c00
 80060fc:	40013400 	.word	0x40013400
 8006100:	40014000 	.word	0x40014000
 8006104:	40014400 	.word	0x40014400
 8006108:	40014800 	.word	0x40014800
 800610c:	40015000 	.word	0x40015000

08006110 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006110:	b480      	push	{r7}
 8006112:	b087      	sub	sp, #28
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a1b      	ldr	r3, [r3, #32]
 800611e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6a1b      	ldr	r3, [r3, #32]
 8006124:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800613e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006142:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	021b      	lsls	r3, r3, #8
 800614a:	68fa      	ldr	r2, [r7, #12]
 800614c:	4313      	orrs	r3, r2
 800614e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006156:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	051b      	lsls	r3, r3, #20
 800615e:	693a      	ldr	r2, [r7, #16]
 8006160:	4313      	orrs	r3, r2
 8006162:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	4a1a      	ldr	r2, [pc, #104]	; (80061d0 <TIM_OC6_SetConfig+0xc0>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d013      	beq.n	8006194 <TIM_OC6_SetConfig+0x84>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4a19      	ldr	r2, [pc, #100]	; (80061d4 <TIM_OC6_SetConfig+0xc4>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d00f      	beq.n	8006194 <TIM_OC6_SetConfig+0x84>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	4a18      	ldr	r2, [pc, #96]	; (80061d8 <TIM_OC6_SetConfig+0xc8>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d00b      	beq.n	8006194 <TIM_OC6_SetConfig+0x84>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	4a17      	ldr	r2, [pc, #92]	; (80061dc <TIM_OC6_SetConfig+0xcc>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d007      	beq.n	8006194 <TIM_OC6_SetConfig+0x84>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	4a16      	ldr	r2, [pc, #88]	; (80061e0 <TIM_OC6_SetConfig+0xd0>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d003      	beq.n	8006194 <TIM_OC6_SetConfig+0x84>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	4a15      	ldr	r2, [pc, #84]	; (80061e4 <TIM_OC6_SetConfig+0xd4>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d109      	bne.n	80061a8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800619a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	695b      	ldr	r3, [r3, #20]
 80061a0:	029b      	lsls	r3, r3, #10
 80061a2:	697a      	ldr	r2, [r7, #20]
 80061a4:	4313      	orrs	r3, r2
 80061a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	697a      	ldr	r2, [r7, #20]
 80061ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	68fa      	ldr	r2, [r7, #12]
 80061b2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	685a      	ldr	r2, [r3, #4]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	693a      	ldr	r2, [r7, #16]
 80061c0:	621a      	str	r2, [r3, #32]
}
 80061c2:	bf00      	nop
 80061c4:	371c      	adds	r7, #28
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr
 80061ce:	bf00      	nop
 80061d0:	40012c00 	.word	0x40012c00
 80061d4:	40013400 	.word	0x40013400
 80061d8:	40014000 	.word	0x40014000
 80061dc:	40014400 	.word	0x40014400
 80061e0:	40014800 	.word	0x40014800
 80061e4:	40015000 	.word	0x40015000

080061e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b087      	sub	sp, #28
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	60f8      	str	r0, [r7, #12]
 80061f0:	60b9      	str	r1, [r7, #8]
 80061f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	f003 031f 	and.w	r3, r3, #31
 80061fa:	2201      	movs	r2, #1
 80061fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006200:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	6a1a      	ldr	r2, [r3, #32]
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	43db      	mvns	r3, r3
 800620a:	401a      	ands	r2, r3
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6a1a      	ldr	r2, [r3, #32]
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	f003 031f 	and.w	r3, r3, #31
 800621a:	6879      	ldr	r1, [r7, #4]
 800621c:	fa01 f303 	lsl.w	r3, r1, r3
 8006220:	431a      	orrs	r2, r3
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	621a      	str	r2, [r3, #32]
}
 8006226:	bf00      	nop
 8006228:	371c      	adds	r7, #28
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr
	...

08006234 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006234:	b480      	push	{r7}
 8006236:	b085      	sub	sp, #20
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006244:	2b01      	cmp	r3, #1
 8006246:	d101      	bne.n	800624c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006248:	2302      	movs	r3, #2
 800624a:	e06f      	b.n	800632c <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2202      	movs	r2, #2
 8006258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a31      	ldr	r2, [pc, #196]	; (8006338 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d009      	beq.n	800628a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a30      	ldr	r2, [pc, #192]	; (800633c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d004      	beq.n	800628a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a2e      	ldr	r2, [pc, #184]	; (8006340 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d108      	bne.n	800629c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006290:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	68fa      	ldr	r2, [r7, #12]
 8006298:	4313      	orrs	r3, r2
 800629a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80062a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	68fa      	ldr	r2, [r7, #12]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a1e      	ldr	r2, [pc, #120]	; (8006338 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d01d      	beq.n	8006300 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062cc:	d018      	beq.n	8006300 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a1c      	ldr	r2, [pc, #112]	; (8006344 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d013      	beq.n	8006300 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a1a      	ldr	r2, [pc, #104]	; (8006348 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d00e      	beq.n	8006300 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a15      	ldr	r2, [pc, #84]	; (800633c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d009      	beq.n	8006300 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a16      	ldr	r2, [pc, #88]	; (800634c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d004      	beq.n	8006300 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a11      	ldr	r2, [pc, #68]	; (8006340 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d10c      	bne.n	800631a <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006306:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	68ba      	ldr	r2, [r7, #8]
 800630e:	4313      	orrs	r3, r2
 8006310:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	68ba      	ldr	r2, [r7, #8]
 8006318:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2201      	movs	r2, #1
 800631e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800632a:	2300      	movs	r3, #0
}
 800632c:	4618      	mov	r0, r3
 800632e:	3714      	adds	r7, #20
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr
 8006338:	40012c00 	.word	0x40012c00
 800633c:	40013400 	.word	0x40013400
 8006340:	40015000 	.word	0x40015000
 8006344:	40000400 	.word	0x40000400
 8006348:	40000800 	.word	0x40000800
 800634c:	40014000 	.word	0x40014000

08006350 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006350:	b480      	push	{r7}
 8006352:	b085      	sub	sp, #20
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800635a:	2300      	movs	r3, #0
 800635c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006364:	2b01      	cmp	r3, #1
 8006366:	d101      	bne.n	800636c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006368:	2302      	movs	r3, #2
 800636a:	e078      	b.n	800645e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2201      	movs	r2, #1
 8006370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	4313      	orrs	r3, r2
 8006380:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	4313      	orrs	r3, r2
 800638e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	4313      	orrs	r3, r2
 800639c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4313      	orrs	r3, r2
 80063aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	695b      	ldr	r3, [r3, #20]
 80063c4:	4313      	orrs	r3, r2
 80063c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d2:	4313      	orrs	r3, r2
 80063d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	699b      	ldr	r3, [r3, #24]
 80063e0:	041b      	lsls	r3, r3, #16
 80063e2:	4313      	orrs	r3, r2
 80063e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	69db      	ldr	r3, [r3, #28]
 80063f0:	4313      	orrs	r3, r2
 80063f2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a1c      	ldr	r2, [pc, #112]	; (800646c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d009      	beq.n	8006412 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a1b      	ldr	r2, [pc, #108]	; (8006470 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d004      	beq.n	8006412 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a19      	ldr	r2, [pc, #100]	; (8006474 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d11c      	bne.n	800644c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800641c:	051b      	lsls	r3, r3, #20
 800641e:	4313      	orrs	r3, r2
 8006420:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	6a1b      	ldr	r3, [r3, #32]
 800642c:	4313      	orrs	r3, r2
 800642e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800643a:	4313      	orrs	r3, r2
 800643c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006448:	4313      	orrs	r3, r2
 800644a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	68fa      	ldr	r2, [r7, #12]
 8006452:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2200      	movs	r2, #0
 8006458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800645c:	2300      	movs	r3, #0
}
 800645e:	4618      	mov	r0, r3
 8006460:	3714      	adds	r7, #20
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr
 800646a:	bf00      	nop
 800646c:	40012c00 	.word	0x40012c00
 8006470:	40013400 	.word	0x40013400
 8006474:	40015000 	.word	0x40015000

08006478 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006480:	bf00      	nop
 8006482:	370c      	adds	r7, #12
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr

0800648c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800648c:	b480      	push	{r7}
 800648e:	b083      	sub	sp, #12
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006494:	bf00      	nop
 8006496:	370c      	adds	r7, #12
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr

080064a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b083      	sub	sp, #12
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80064a8:	bf00      	nop
 80064aa:	370c      	adds	r7, #12
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80064bc:	bf00      	nop
 80064be:	370c      	adds	r7, #12
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr

080064c8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b083      	sub	sp, #12
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80064d0:	bf00      	nop
 80064d2:	370c      	adds	r7, #12
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80064dc:	b480      	push	{r7}
 80064de:	b083      	sub	sp, #12
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80064e4:	bf00      	nop
 80064e6:	370c      	adds	r7, #12
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr

080064f0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80064f8:	bf00      	nop
 80064fa:	370c      	adds	r7, #12
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b082      	sub	sp, #8
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d101      	bne.n	8006516 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	e042      	b.n	800659c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800651c:	2b00      	cmp	r3, #0
 800651e:	d106      	bne.n	800652e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f7fb fc99 	bl	8001e60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2224      	movs	r2, #36	; 0x24
 8006532:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f022 0201 	bic.w	r2, r2, #1
 8006544:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800654a:	2b00      	cmp	r3, #0
 800654c:	d002      	beq.n	8006554 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 fe5e 	bl	8007210 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 fb5f 	bl	8006c18 <UART_SetConfig>
 800655a:	4603      	mov	r3, r0
 800655c:	2b01      	cmp	r3, #1
 800655e:	d101      	bne.n	8006564 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006560:	2301      	movs	r3, #1
 8006562:	e01b      	b.n	800659c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	685a      	ldr	r2, [r3, #4]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006572:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	689a      	ldr	r2, [r3, #8]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006582:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	681a      	ldr	r2, [r3, #0]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f042 0201 	orr.w	r2, r2, #1
 8006592:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f000 fedd 	bl	8007354 <UART_CheckIdleState>
 800659a:	4603      	mov	r3, r0
}
 800659c:	4618      	mov	r0, r3
 800659e:	3708      	adds	r7, #8
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}

080065a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b0ba      	sub	sp, #232	; 0xe8
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	69db      	ldr	r3, [r3, #28]
 80065b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80065ca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80065ce:	f640 030f 	movw	r3, #2063	; 0x80f
 80065d2:	4013      	ands	r3, r2
 80065d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80065d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d11b      	bne.n	8006618 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80065e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065e4:	f003 0320 	and.w	r3, r3, #32
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d015      	beq.n	8006618 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80065ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065f0:	f003 0320 	and.w	r3, r3, #32
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d105      	bne.n	8006604 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80065f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006600:	2b00      	cmp	r3, #0
 8006602:	d009      	beq.n	8006618 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006608:	2b00      	cmp	r3, #0
 800660a:	f000 82e3 	beq.w	8006bd4 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	4798      	blx	r3
      }
      return;
 8006616:	e2dd      	b.n	8006bd4 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006618:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800661c:	2b00      	cmp	r3, #0
 800661e:	f000 8123 	beq.w	8006868 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006622:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006626:	4b8d      	ldr	r3, [pc, #564]	; (800685c <HAL_UART_IRQHandler+0x2b8>)
 8006628:	4013      	ands	r3, r2
 800662a:	2b00      	cmp	r3, #0
 800662c:	d106      	bne.n	800663c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800662e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006632:	4b8b      	ldr	r3, [pc, #556]	; (8006860 <HAL_UART_IRQHandler+0x2bc>)
 8006634:	4013      	ands	r3, r2
 8006636:	2b00      	cmp	r3, #0
 8006638:	f000 8116 	beq.w	8006868 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800663c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006640:	f003 0301 	and.w	r3, r3, #1
 8006644:	2b00      	cmp	r3, #0
 8006646:	d011      	beq.n	800666c <HAL_UART_IRQHandler+0xc8>
 8006648:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800664c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006650:	2b00      	cmp	r3, #0
 8006652:	d00b      	beq.n	800666c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	2201      	movs	r2, #1
 800665a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006662:	f043 0201 	orr.w	r2, r3, #1
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800666c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006670:	f003 0302 	and.w	r3, r3, #2
 8006674:	2b00      	cmp	r3, #0
 8006676:	d011      	beq.n	800669c <HAL_UART_IRQHandler+0xf8>
 8006678:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800667c:	f003 0301 	and.w	r3, r3, #1
 8006680:	2b00      	cmp	r3, #0
 8006682:	d00b      	beq.n	800669c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	2202      	movs	r2, #2
 800668a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006692:	f043 0204 	orr.w	r2, r3, #4
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800669c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066a0:	f003 0304 	and.w	r3, r3, #4
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d011      	beq.n	80066cc <HAL_UART_IRQHandler+0x128>
 80066a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066ac:	f003 0301 	and.w	r3, r3, #1
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d00b      	beq.n	80066cc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	2204      	movs	r2, #4
 80066ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066c2:	f043 0202 	orr.w	r2, r3, #2
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80066cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066d0:	f003 0308 	and.w	r3, r3, #8
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d017      	beq.n	8006708 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80066d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066dc:	f003 0320 	and.w	r3, r3, #32
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d105      	bne.n	80066f0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80066e4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80066e8:	4b5c      	ldr	r3, [pc, #368]	; (800685c <HAL_UART_IRQHandler+0x2b8>)
 80066ea:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d00b      	beq.n	8006708 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	2208      	movs	r2, #8
 80066f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066fe:	f043 0208 	orr.w	r2, r3, #8
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006708:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800670c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006710:	2b00      	cmp	r3, #0
 8006712:	d012      	beq.n	800673a <HAL_UART_IRQHandler+0x196>
 8006714:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006718:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800671c:	2b00      	cmp	r3, #0
 800671e:	d00c      	beq.n	800673a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006728:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006730:	f043 0220 	orr.w	r2, r3, #32
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006740:	2b00      	cmp	r3, #0
 8006742:	f000 8249 	beq.w	8006bd8 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800674a:	f003 0320 	and.w	r3, r3, #32
 800674e:	2b00      	cmp	r3, #0
 8006750:	d013      	beq.n	800677a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006752:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006756:	f003 0320 	and.w	r3, r3, #32
 800675a:	2b00      	cmp	r3, #0
 800675c:	d105      	bne.n	800676a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800675e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006766:	2b00      	cmp	r3, #0
 8006768:	d007      	beq.n	800677a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800676e:	2b00      	cmp	r3, #0
 8006770:	d003      	beq.n	800677a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006780:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800678e:	2b40      	cmp	r3, #64	; 0x40
 8006790:	d005      	beq.n	800679e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006792:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006796:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800679a:	2b00      	cmp	r3, #0
 800679c:	d054      	beq.n	8006848 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 feef 	bl	8007582 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ae:	2b40      	cmp	r3, #64	; 0x40
 80067b0:	d146      	bne.n	8006840 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	3308      	adds	r3, #8
 80067b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80067c0:	e853 3f00 	ldrex	r3, [r3]
 80067c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80067c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80067cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	3308      	adds	r3, #8
 80067da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80067de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80067e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80067ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80067ee:	e841 2300 	strex	r3, r2, [r1]
 80067f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80067f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d1d9      	bne.n	80067b2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006804:	2b00      	cmp	r3, #0
 8006806:	d017      	beq.n	8006838 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800680e:	4a15      	ldr	r2, [pc, #84]	; (8006864 <HAL_UART_IRQHandler+0x2c0>)
 8006810:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006818:	4618      	mov	r0, r3
 800681a:	f7fd f804 	bl	8003826 <HAL_DMA_Abort_IT>
 800681e:	4603      	mov	r3, r0
 8006820:	2b00      	cmp	r3, #0
 8006822:	d019      	beq.n	8006858 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800682a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8006832:	4610      	mov	r0, r2
 8006834:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006836:	e00f      	b.n	8006858 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f000 f9d7 	bl	8006bec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800683e:	e00b      	b.n	8006858 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 f9d3 	bl	8006bec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006846:	e007      	b.n	8006858 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f000 f9cf 	bl	8006bec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2200      	movs	r2, #0
 8006852:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8006856:	e1bf      	b.n	8006bd8 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006858:	bf00      	nop
    return;
 800685a:	e1bd      	b.n	8006bd8 <HAL_UART_IRQHandler+0x634>
 800685c:	10000001 	.word	0x10000001
 8006860:	04000120 	.word	0x04000120
 8006864:	0800764f 	.word	0x0800764f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800686c:	2b01      	cmp	r3, #1
 800686e:	f040 8153 	bne.w	8006b18 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006876:	f003 0310 	and.w	r3, r3, #16
 800687a:	2b00      	cmp	r3, #0
 800687c:	f000 814c 	beq.w	8006b18 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006880:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006884:	f003 0310 	and.w	r3, r3, #16
 8006888:	2b00      	cmp	r3, #0
 800688a:	f000 8145 	beq.w	8006b18 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	2210      	movs	r2, #16
 8006894:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068a0:	2b40      	cmp	r3, #64	; 0x40
 80068a2:	f040 80bb 	bne.w	8006a1c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80068b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	f000 818f 	beq.w	8006bdc <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80068c4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80068c8:	429a      	cmp	r2, r3
 80068ca:	f080 8187 	bcs.w	8006bdc <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80068d4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f003 0320 	and.w	r3, r3, #32
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	f040 8087 	bne.w	80069fa <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80068f8:	e853 3f00 	ldrex	r3, [r3]
 80068fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006900:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006904:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006908:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	461a      	mov	r2, r3
 8006912:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006916:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800691a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800691e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006922:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006926:	e841 2300 	strex	r3, r2, [r1]
 800692a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800692e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006932:	2b00      	cmp	r3, #0
 8006934:	d1da      	bne.n	80068ec <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	3308      	adds	r3, #8
 800693c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800693e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006940:	e853 3f00 	ldrex	r3, [r3]
 8006944:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006946:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006948:	f023 0301 	bic.w	r3, r3, #1
 800694c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	3308      	adds	r3, #8
 8006956:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800695a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800695e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006960:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006962:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006966:	e841 2300 	strex	r3, r2, [r1]
 800696a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800696c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800696e:	2b00      	cmp	r3, #0
 8006970:	d1e1      	bne.n	8006936 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	3308      	adds	r3, #8
 8006978:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800697a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800697c:	e853 3f00 	ldrex	r3, [r3]
 8006980:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006982:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006984:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006988:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	3308      	adds	r3, #8
 8006992:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006996:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006998:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800699a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800699c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800699e:	e841 2300 	strex	r3, r2, [r1]
 80069a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80069a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d1e3      	bne.n	8006972 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2220      	movs	r2, #32
 80069ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2200      	movs	r2, #0
 80069b6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069c0:	e853 3f00 	ldrex	r3, [r3]
 80069c4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80069c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069c8:	f023 0310 	bic.w	r3, r3, #16
 80069cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	461a      	mov	r2, r3
 80069d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80069da:	65bb      	str	r3, [r7, #88]	; 0x58
 80069dc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069de:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80069e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80069e2:	e841 2300 	strex	r3, r2, [r1]
 80069e6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80069e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d1e4      	bne.n	80069b8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069f4:	4618      	mov	r0, r3
 80069f6:	f7fc febd 	bl	8003774 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2202      	movs	r2, #2
 80069fe:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	1ad3      	subs	r3, r2, r3
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	4619      	mov	r1, r3
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f000 f8f3 	bl	8006c00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006a1a:	e0df      	b.n	8006bdc <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	1ad3      	subs	r3, r2, r3
 8006a2c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	f000 80d1 	beq.w	8006be0 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8006a3e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	f000 80cc 	beq.w	8006be0 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a50:	e853 3f00 	ldrex	r3, [r3]
 8006a54:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	461a      	mov	r2, r3
 8006a66:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006a6a:	647b      	str	r3, [r7, #68]	; 0x44
 8006a6c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a6e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a72:	e841 2300 	strex	r3, r2, [r1]
 8006a76:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d1e4      	bne.n	8006a48 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	3308      	adds	r3, #8
 8006a84:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a88:	e853 3f00 	ldrex	r3, [r3]
 8006a8c:	623b      	str	r3, [r7, #32]
   return(result);
 8006a8e:	6a3b      	ldr	r3, [r7, #32]
 8006a90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a94:	f023 0301 	bic.w	r3, r3, #1
 8006a98:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	3308      	adds	r3, #8
 8006aa2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006aa6:	633a      	str	r2, [r7, #48]	; 0x30
 8006aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aaa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006aac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006aae:	e841 2300 	strex	r3, r2, [r1]
 8006ab2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d1e1      	bne.n	8006a7e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2220      	movs	r2, #32
 8006abe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	e853 3f00 	ldrex	r3, [r3]
 8006ada:	60fb      	str	r3, [r7, #12]
   return(result);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f023 0310 	bic.w	r3, r3, #16
 8006ae2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	461a      	mov	r2, r3
 8006aec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006af0:	61fb      	str	r3, [r7, #28]
 8006af2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af4:	69b9      	ldr	r1, [r7, #24]
 8006af6:	69fa      	ldr	r2, [r7, #28]
 8006af8:	e841 2300 	strex	r3, r2, [r1]
 8006afc:	617b      	str	r3, [r7, #20]
   return(result);
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d1e4      	bne.n	8006ace <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2202      	movs	r2, #2
 8006b08:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006b0a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b0e:	4619      	mov	r1, r3
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 f875 	bl	8006c00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006b16:	e063      	b.n	8006be0 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006b18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d00e      	beq.n	8006b42 <HAL_UART_IRQHandler+0x59e>
 8006b24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d008      	beq.n	8006b42 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006b38:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 fdc8 	bl	80076d0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006b40:	e051      	b.n	8006be6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d014      	beq.n	8006b78 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006b4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d105      	bne.n	8006b66 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006b5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d008      	beq.n	8006b78 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d03a      	beq.n	8006be4 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	4798      	blx	r3
    }
    return;
 8006b76:	e035      	b.n	8006be4 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006b78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d009      	beq.n	8006b98 <HAL_UART_IRQHandler+0x5f4>
 8006b84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d003      	beq.n	8006b98 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 fd72 	bl	800767a <UART_EndTransmit_IT>
    return;
 8006b96:	e026      	b.n	8006be6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006b98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d009      	beq.n	8006bb8 <HAL_UART_IRQHandler+0x614>
 8006ba4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ba8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d003      	beq.n	8006bb8 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f000 fda1 	bl	80076f8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006bb6:	e016      	b.n	8006be6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006bb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d010      	beq.n	8006be6 <HAL_UART_IRQHandler+0x642>
 8006bc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	da0c      	bge.n	8006be6 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f000 fd89 	bl	80076e4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006bd2:	e008      	b.n	8006be6 <HAL_UART_IRQHandler+0x642>
      return;
 8006bd4:	bf00      	nop
 8006bd6:	e006      	b.n	8006be6 <HAL_UART_IRQHandler+0x642>
    return;
 8006bd8:	bf00      	nop
 8006bda:	e004      	b.n	8006be6 <HAL_UART_IRQHandler+0x642>
      return;
 8006bdc:	bf00      	nop
 8006bde:	e002      	b.n	8006be6 <HAL_UART_IRQHandler+0x642>
      return;
 8006be0:	bf00      	nop
 8006be2:	e000      	b.n	8006be6 <HAL_UART_IRQHandler+0x642>
    return;
 8006be4:	bf00      	nop
  }
}
 8006be6:	37e8      	adds	r7, #232	; 0xe8
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b083      	sub	sp, #12
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006bf4:	bf00      	nop
 8006bf6:	370c      	adds	r7, #12
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr

08006c00 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b083      	sub	sp, #12
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	460b      	mov	r3, r1
 8006c0a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006c0c:	bf00      	nop
 8006c0e:	370c      	adds	r7, #12
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c1c:	b08c      	sub	sp, #48	; 0x30
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c22:	2300      	movs	r3, #0
 8006c24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	689a      	ldr	r2, [r3, #8]
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	691b      	ldr	r3, [r3, #16]
 8006c30:	431a      	orrs	r2, r3
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	695b      	ldr	r3, [r3, #20]
 8006c36:	431a      	orrs	r2, r3
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	69db      	ldr	r3, [r3, #28]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	4baa      	ldr	r3, [pc, #680]	; (8006ef0 <UART_SetConfig+0x2d8>)
 8006c48:	4013      	ands	r3, r2
 8006c4a:	697a      	ldr	r2, [r7, #20]
 8006c4c:	6812      	ldr	r2, [r2, #0]
 8006c4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c50:	430b      	orrs	r3, r1
 8006c52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	68da      	ldr	r2, [r3, #12]
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	430a      	orrs	r2, r1
 8006c68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	699b      	ldr	r3, [r3, #24]
 8006c6e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a9f      	ldr	r2, [pc, #636]	; (8006ef4 <UART_SetConfig+0x2dc>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d004      	beq.n	8006c84 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	6a1b      	ldr	r3, [r3, #32]
 8006c7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c80:	4313      	orrs	r3, r2
 8006c82:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006c8e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006c92:	697a      	ldr	r2, [r7, #20]
 8006c94:	6812      	ldr	r2, [r2, #0]
 8006c96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c98:	430b      	orrs	r3, r1
 8006c9a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ca2:	f023 010f 	bic.w	r1, r3, #15
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	430a      	orrs	r2, r1
 8006cb0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a90      	ldr	r2, [pc, #576]	; (8006ef8 <UART_SetConfig+0x2e0>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d125      	bne.n	8006d08 <UART_SetConfig+0xf0>
 8006cbc:	4b8f      	ldr	r3, [pc, #572]	; (8006efc <UART_SetConfig+0x2e4>)
 8006cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cc2:	f003 0303 	and.w	r3, r3, #3
 8006cc6:	2b03      	cmp	r3, #3
 8006cc8:	d81a      	bhi.n	8006d00 <UART_SetConfig+0xe8>
 8006cca:	a201      	add	r2, pc, #4	; (adr r2, 8006cd0 <UART_SetConfig+0xb8>)
 8006ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cd0:	08006ce1 	.word	0x08006ce1
 8006cd4:	08006cf1 	.word	0x08006cf1
 8006cd8:	08006ce9 	.word	0x08006ce9
 8006cdc:	08006cf9 	.word	0x08006cf9
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ce6:	e116      	b.n	8006f16 <UART_SetConfig+0x2fe>
 8006ce8:	2302      	movs	r3, #2
 8006cea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cee:	e112      	b.n	8006f16 <UART_SetConfig+0x2fe>
 8006cf0:	2304      	movs	r3, #4
 8006cf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cf6:	e10e      	b.n	8006f16 <UART_SetConfig+0x2fe>
 8006cf8:	2308      	movs	r3, #8
 8006cfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cfe:	e10a      	b.n	8006f16 <UART_SetConfig+0x2fe>
 8006d00:	2310      	movs	r3, #16
 8006d02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d06:	e106      	b.n	8006f16 <UART_SetConfig+0x2fe>
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a7c      	ldr	r2, [pc, #496]	; (8006f00 <UART_SetConfig+0x2e8>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d138      	bne.n	8006d84 <UART_SetConfig+0x16c>
 8006d12:	4b7a      	ldr	r3, [pc, #488]	; (8006efc <UART_SetConfig+0x2e4>)
 8006d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d18:	f003 030c 	and.w	r3, r3, #12
 8006d1c:	2b0c      	cmp	r3, #12
 8006d1e:	d82d      	bhi.n	8006d7c <UART_SetConfig+0x164>
 8006d20:	a201      	add	r2, pc, #4	; (adr r2, 8006d28 <UART_SetConfig+0x110>)
 8006d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d26:	bf00      	nop
 8006d28:	08006d5d 	.word	0x08006d5d
 8006d2c:	08006d7d 	.word	0x08006d7d
 8006d30:	08006d7d 	.word	0x08006d7d
 8006d34:	08006d7d 	.word	0x08006d7d
 8006d38:	08006d6d 	.word	0x08006d6d
 8006d3c:	08006d7d 	.word	0x08006d7d
 8006d40:	08006d7d 	.word	0x08006d7d
 8006d44:	08006d7d 	.word	0x08006d7d
 8006d48:	08006d65 	.word	0x08006d65
 8006d4c:	08006d7d 	.word	0x08006d7d
 8006d50:	08006d7d 	.word	0x08006d7d
 8006d54:	08006d7d 	.word	0x08006d7d
 8006d58:	08006d75 	.word	0x08006d75
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d62:	e0d8      	b.n	8006f16 <UART_SetConfig+0x2fe>
 8006d64:	2302      	movs	r3, #2
 8006d66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d6a:	e0d4      	b.n	8006f16 <UART_SetConfig+0x2fe>
 8006d6c:	2304      	movs	r3, #4
 8006d6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d72:	e0d0      	b.n	8006f16 <UART_SetConfig+0x2fe>
 8006d74:	2308      	movs	r3, #8
 8006d76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d7a:	e0cc      	b.n	8006f16 <UART_SetConfig+0x2fe>
 8006d7c:	2310      	movs	r3, #16
 8006d7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d82:	e0c8      	b.n	8006f16 <UART_SetConfig+0x2fe>
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a5e      	ldr	r2, [pc, #376]	; (8006f04 <UART_SetConfig+0x2ec>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d125      	bne.n	8006dda <UART_SetConfig+0x1c2>
 8006d8e:	4b5b      	ldr	r3, [pc, #364]	; (8006efc <UART_SetConfig+0x2e4>)
 8006d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d94:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006d98:	2b30      	cmp	r3, #48	; 0x30
 8006d9a:	d016      	beq.n	8006dca <UART_SetConfig+0x1b2>
 8006d9c:	2b30      	cmp	r3, #48	; 0x30
 8006d9e:	d818      	bhi.n	8006dd2 <UART_SetConfig+0x1ba>
 8006da0:	2b20      	cmp	r3, #32
 8006da2:	d00a      	beq.n	8006dba <UART_SetConfig+0x1a2>
 8006da4:	2b20      	cmp	r3, #32
 8006da6:	d814      	bhi.n	8006dd2 <UART_SetConfig+0x1ba>
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d002      	beq.n	8006db2 <UART_SetConfig+0x19a>
 8006dac:	2b10      	cmp	r3, #16
 8006dae:	d008      	beq.n	8006dc2 <UART_SetConfig+0x1aa>
 8006db0:	e00f      	b.n	8006dd2 <UART_SetConfig+0x1ba>
 8006db2:	2300      	movs	r3, #0
 8006db4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006db8:	e0ad      	b.n	8006f16 <UART_SetConfig+0x2fe>
 8006dba:	2302      	movs	r3, #2
 8006dbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dc0:	e0a9      	b.n	8006f16 <UART_SetConfig+0x2fe>
 8006dc2:	2304      	movs	r3, #4
 8006dc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dc8:	e0a5      	b.n	8006f16 <UART_SetConfig+0x2fe>
 8006dca:	2308      	movs	r3, #8
 8006dcc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dd0:	e0a1      	b.n	8006f16 <UART_SetConfig+0x2fe>
 8006dd2:	2310      	movs	r3, #16
 8006dd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dd8:	e09d      	b.n	8006f16 <UART_SetConfig+0x2fe>
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a4a      	ldr	r2, [pc, #296]	; (8006f08 <UART_SetConfig+0x2f0>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d125      	bne.n	8006e30 <UART_SetConfig+0x218>
 8006de4:	4b45      	ldr	r3, [pc, #276]	; (8006efc <UART_SetConfig+0x2e4>)
 8006de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006dee:	2bc0      	cmp	r3, #192	; 0xc0
 8006df0:	d016      	beq.n	8006e20 <UART_SetConfig+0x208>
 8006df2:	2bc0      	cmp	r3, #192	; 0xc0
 8006df4:	d818      	bhi.n	8006e28 <UART_SetConfig+0x210>
 8006df6:	2b80      	cmp	r3, #128	; 0x80
 8006df8:	d00a      	beq.n	8006e10 <UART_SetConfig+0x1f8>
 8006dfa:	2b80      	cmp	r3, #128	; 0x80
 8006dfc:	d814      	bhi.n	8006e28 <UART_SetConfig+0x210>
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d002      	beq.n	8006e08 <UART_SetConfig+0x1f0>
 8006e02:	2b40      	cmp	r3, #64	; 0x40
 8006e04:	d008      	beq.n	8006e18 <UART_SetConfig+0x200>
 8006e06:	e00f      	b.n	8006e28 <UART_SetConfig+0x210>
 8006e08:	2300      	movs	r3, #0
 8006e0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e0e:	e082      	b.n	8006f16 <UART_SetConfig+0x2fe>
 8006e10:	2302      	movs	r3, #2
 8006e12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e16:	e07e      	b.n	8006f16 <UART_SetConfig+0x2fe>
 8006e18:	2304      	movs	r3, #4
 8006e1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e1e:	e07a      	b.n	8006f16 <UART_SetConfig+0x2fe>
 8006e20:	2308      	movs	r3, #8
 8006e22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e26:	e076      	b.n	8006f16 <UART_SetConfig+0x2fe>
 8006e28:	2310      	movs	r3, #16
 8006e2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e2e:	e072      	b.n	8006f16 <UART_SetConfig+0x2fe>
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a35      	ldr	r2, [pc, #212]	; (8006f0c <UART_SetConfig+0x2f4>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d12a      	bne.n	8006e90 <UART_SetConfig+0x278>
 8006e3a:	4b30      	ldr	r3, [pc, #192]	; (8006efc <UART_SetConfig+0x2e4>)
 8006e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e48:	d01a      	beq.n	8006e80 <UART_SetConfig+0x268>
 8006e4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e4e:	d81b      	bhi.n	8006e88 <UART_SetConfig+0x270>
 8006e50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e54:	d00c      	beq.n	8006e70 <UART_SetConfig+0x258>
 8006e56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e5a:	d815      	bhi.n	8006e88 <UART_SetConfig+0x270>
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d003      	beq.n	8006e68 <UART_SetConfig+0x250>
 8006e60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e64:	d008      	beq.n	8006e78 <UART_SetConfig+0x260>
 8006e66:	e00f      	b.n	8006e88 <UART_SetConfig+0x270>
 8006e68:	2300      	movs	r3, #0
 8006e6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e6e:	e052      	b.n	8006f16 <UART_SetConfig+0x2fe>
 8006e70:	2302      	movs	r3, #2
 8006e72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e76:	e04e      	b.n	8006f16 <UART_SetConfig+0x2fe>
 8006e78:	2304      	movs	r3, #4
 8006e7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e7e:	e04a      	b.n	8006f16 <UART_SetConfig+0x2fe>
 8006e80:	2308      	movs	r3, #8
 8006e82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e86:	e046      	b.n	8006f16 <UART_SetConfig+0x2fe>
 8006e88:	2310      	movs	r3, #16
 8006e8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e8e:	e042      	b.n	8006f16 <UART_SetConfig+0x2fe>
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a17      	ldr	r2, [pc, #92]	; (8006ef4 <UART_SetConfig+0x2dc>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d13a      	bne.n	8006f10 <UART_SetConfig+0x2f8>
 8006e9a:	4b18      	ldr	r3, [pc, #96]	; (8006efc <UART_SetConfig+0x2e4>)
 8006e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ea0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006ea4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ea8:	d01a      	beq.n	8006ee0 <UART_SetConfig+0x2c8>
 8006eaa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006eae:	d81b      	bhi.n	8006ee8 <UART_SetConfig+0x2d0>
 8006eb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006eb4:	d00c      	beq.n	8006ed0 <UART_SetConfig+0x2b8>
 8006eb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006eba:	d815      	bhi.n	8006ee8 <UART_SetConfig+0x2d0>
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d003      	beq.n	8006ec8 <UART_SetConfig+0x2b0>
 8006ec0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ec4:	d008      	beq.n	8006ed8 <UART_SetConfig+0x2c0>
 8006ec6:	e00f      	b.n	8006ee8 <UART_SetConfig+0x2d0>
 8006ec8:	2300      	movs	r3, #0
 8006eca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ece:	e022      	b.n	8006f16 <UART_SetConfig+0x2fe>
 8006ed0:	2302      	movs	r3, #2
 8006ed2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ed6:	e01e      	b.n	8006f16 <UART_SetConfig+0x2fe>
 8006ed8:	2304      	movs	r3, #4
 8006eda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ede:	e01a      	b.n	8006f16 <UART_SetConfig+0x2fe>
 8006ee0:	2308      	movs	r3, #8
 8006ee2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ee6:	e016      	b.n	8006f16 <UART_SetConfig+0x2fe>
 8006ee8:	2310      	movs	r3, #16
 8006eea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006eee:	e012      	b.n	8006f16 <UART_SetConfig+0x2fe>
 8006ef0:	cfff69f3 	.word	0xcfff69f3
 8006ef4:	40008000 	.word	0x40008000
 8006ef8:	40013800 	.word	0x40013800
 8006efc:	40021000 	.word	0x40021000
 8006f00:	40004400 	.word	0x40004400
 8006f04:	40004800 	.word	0x40004800
 8006f08:	40004c00 	.word	0x40004c00
 8006f0c:	40005000 	.word	0x40005000
 8006f10:	2310      	movs	r3, #16
 8006f12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4aae      	ldr	r2, [pc, #696]	; (80071d4 <UART_SetConfig+0x5bc>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	f040 8097 	bne.w	8007050 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006f22:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006f26:	2b08      	cmp	r3, #8
 8006f28:	d823      	bhi.n	8006f72 <UART_SetConfig+0x35a>
 8006f2a:	a201      	add	r2, pc, #4	; (adr r2, 8006f30 <UART_SetConfig+0x318>)
 8006f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f30:	08006f55 	.word	0x08006f55
 8006f34:	08006f73 	.word	0x08006f73
 8006f38:	08006f5d 	.word	0x08006f5d
 8006f3c:	08006f73 	.word	0x08006f73
 8006f40:	08006f63 	.word	0x08006f63
 8006f44:	08006f73 	.word	0x08006f73
 8006f48:	08006f73 	.word	0x08006f73
 8006f4c:	08006f73 	.word	0x08006f73
 8006f50:	08006f6b 	.word	0x08006f6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f54:	f7fd fcda 	bl	800490c <HAL_RCC_GetPCLK1Freq>
 8006f58:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006f5a:	e010      	b.n	8006f7e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f5c:	4b9e      	ldr	r3, [pc, #632]	; (80071d8 <UART_SetConfig+0x5c0>)
 8006f5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006f60:	e00d      	b.n	8006f7e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f62:	f7fd fc65 	bl	8004830 <HAL_RCC_GetSysClockFreq>
 8006f66:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006f68:	e009      	b.n	8006f7e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006f70:	e005      	b.n	8006f7e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006f72:	2300      	movs	r3, #0
 8006f74:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006f7c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	f000 8130 	beq.w	80071e6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f8a:	4a94      	ldr	r2, [pc, #592]	; (80071dc <UART_SetConfig+0x5c4>)
 8006f8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f90:	461a      	mov	r2, r3
 8006f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f94:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f98:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	685a      	ldr	r2, [r3, #4]
 8006f9e:	4613      	mov	r3, r2
 8006fa0:	005b      	lsls	r3, r3, #1
 8006fa2:	4413      	add	r3, r2
 8006fa4:	69ba      	ldr	r2, [r7, #24]
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	d305      	bcc.n	8006fb6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006fb0:	69ba      	ldr	r2, [r7, #24]
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d903      	bls.n	8006fbe <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006fbc:	e113      	b.n	80071e6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	60bb      	str	r3, [r7, #8]
 8006fc4:	60fa      	str	r2, [r7, #12]
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fca:	4a84      	ldr	r2, [pc, #528]	; (80071dc <UART_SetConfig+0x5c4>)
 8006fcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	603b      	str	r3, [r7, #0]
 8006fd6:	607a      	str	r2, [r7, #4]
 8006fd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fdc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006fe0:	f7f9 f91a 	bl	8000218 <__aeabi_uldivmod>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	460b      	mov	r3, r1
 8006fe8:	4610      	mov	r0, r2
 8006fea:	4619      	mov	r1, r3
 8006fec:	f04f 0200 	mov.w	r2, #0
 8006ff0:	f04f 0300 	mov.w	r3, #0
 8006ff4:	020b      	lsls	r3, r1, #8
 8006ff6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006ffa:	0202      	lsls	r2, r0, #8
 8006ffc:	6979      	ldr	r1, [r7, #20]
 8006ffe:	6849      	ldr	r1, [r1, #4]
 8007000:	0849      	lsrs	r1, r1, #1
 8007002:	2000      	movs	r0, #0
 8007004:	460c      	mov	r4, r1
 8007006:	4605      	mov	r5, r0
 8007008:	eb12 0804 	adds.w	r8, r2, r4
 800700c:	eb43 0905 	adc.w	r9, r3, r5
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	2200      	movs	r2, #0
 8007016:	469a      	mov	sl, r3
 8007018:	4693      	mov	fp, r2
 800701a:	4652      	mov	r2, sl
 800701c:	465b      	mov	r3, fp
 800701e:	4640      	mov	r0, r8
 8007020:	4649      	mov	r1, r9
 8007022:	f7f9 f8f9 	bl	8000218 <__aeabi_uldivmod>
 8007026:	4602      	mov	r2, r0
 8007028:	460b      	mov	r3, r1
 800702a:	4613      	mov	r3, r2
 800702c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800702e:	6a3b      	ldr	r3, [r7, #32]
 8007030:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007034:	d308      	bcc.n	8007048 <UART_SetConfig+0x430>
 8007036:	6a3b      	ldr	r3, [r7, #32]
 8007038:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800703c:	d204      	bcs.n	8007048 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	6a3a      	ldr	r2, [r7, #32]
 8007044:	60da      	str	r2, [r3, #12]
 8007046:	e0ce      	b.n	80071e6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007048:	2301      	movs	r3, #1
 800704a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800704e:	e0ca      	b.n	80071e6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	69db      	ldr	r3, [r3, #28]
 8007054:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007058:	d166      	bne.n	8007128 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800705a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800705e:	2b08      	cmp	r3, #8
 8007060:	d827      	bhi.n	80070b2 <UART_SetConfig+0x49a>
 8007062:	a201      	add	r2, pc, #4	; (adr r2, 8007068 <UART_SetConfig+0x450>)
 8007064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007068:	0800708d 	.word	0x0800708d
 800706c:	08007095 	.word	0x08007095
 8007070:	0800709d 	.word	0x0800709d
 8007074:	080070b3 	.word	0x080070b3
 8007078:	080070a3 	.word	0x080070a3
 800707c:	080070b3 	.word	0x080070b3
 8007080:	080070b3 	.word	0x080070b3
 8007084:	080070b3 	.word	0x080070b3
 8007088:	080070ab 	.word	0x080070ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800708c:	f7fd fc3e 	bl	800490c <HAL_RCC_GetPCLK1Freq>
 8007090:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007092:	e014      	b.n	80070be <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007094:	f7fd fc50 	bl	8004938 <HAL_RCC_GetPCLK2Freq>
 8007098:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800709a:	e010      	b.n	80070be <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800709c:	4b4e      	ldr	r3, [pc, #312]	; (80071d8 <UART_SetConfig+0x5c0>)
 800709e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80070a0:	e00d      	b.n	80070be <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070a2:	f7fd fbc5 	bl	8004830 <HAL_RCC_GetSysClockFreq>
 80070a6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80070a8:	e009      	b.n	80070be <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80070b0:	e005      	b.n	80070be <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80070b2:	2300      	movs	r3, #0
 80070b4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80070b6:	2301      	movs	r3, #1
 80070b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80070bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80070be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	f000 8090 	beq.w	80071e6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ca:	4a44      	ldr	r2, [pc, #272]	; (80071dc <UART_SetConfig+0x5c4>)
 80070cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070d0:	461a      	mov	r2, r3
 80070d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80070d8:	005a      	lsls	r2, r3, #1
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	085b      	lsrs	r3, r3, #1
 80070e0:	441a      	add	r2, r3
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80070ea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070ec:	6a3b      	ldr	r3, [r7, #32]
 80070ee:	2b0f      	cmp	r3, #15
 80070f0:	d916      	bls.n	8007120 <UART_SetConfig+0x508>
 80070f2:	6a3b      	ldr	r3, [r7, #32]
 80070f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070f8:	d212      	bcs.n	8007120 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80070fa:	6a3b      	ldr	r3, [r7, #32]
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	f023 030f 	bic.w	r3, r3, #15
 8007102:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007104:	6a3b      	ldr	r3, [r7, #32]
 8007106:	085b      	lsrs	r3, r3, #1
 8007108:	b29b      	uxth	r3, r3
 800710a:	f003 0307 	and.w	r3, r3, #7
 800710e:	b29a      	uxth	r2, r3
 8007110:	8bfb      	ldrh	r3, [r7, #30]
 8007112:	4313      	orrs	r3, r2
 8007114:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	8bfa      	ldrh	r2, [r7, #30]
 800711c:	60da      	str	r2, [r3, #12]
 800711e:	e062      	b.n	80071e6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007120:	2301      	movs	r3, #1
 8007122:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007126:	e05e      	b.n	80071e6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007128:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800712c:	2b08      	cmp	r3, #8
 800712e:	d828      	bhi.n	8007182 <UART_SetConfig+0x56a>
 8007130:	a201      	add	r2, pc, #4	; (adr r2, 8007138 <UART_SetConfig+0x520>)
 8007132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007136:	bf00      	nop
 8007138:	0800715d 	.word	0x0800715d
 800713c:	08007165 	.word	0x08007165
 8007140:	0800716d 	.word	0x0800716d
 8007144:	08007183 	.word	0x08007183
 8007148:	08007173 	.word	0x08007173
 800714c:	08007183 	.word	0x08007183
 8007150:	08007183 	.word	0x08007183
 8007154:	08007183 	.word	0x08007183
 8007158:	0800717b 	.word	0x0800717b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800715c:	f7fd fbd6 	bl	800490c <HAL_RCC_GetPCLK1Freq>
 8007160:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007162:	e014      	b.n	800718e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007164:	f7fd fbe8 	bl	8004938 <HAL_RCC_GetPCLK2Freq>
 8007168:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800716a:	e010      	b.n	800718e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800716c:	4b1a      	ldr	r3, [pc, #104]	; (80071d8 <UART_SetConfig+0x5c0>)
 800716e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007170:	e00d      	b.n	800718e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007172:	f7fd fb5d 	bl	8004830 <HAL_RCC_GetSysClockFreq>
 8007176:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007178:	e009      	b.n	800718e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800717a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800717e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007180:	e005      	b.n	800718e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007182:	2300      	movs	r3, #0
 8007184:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007186:	2301      	movs	r3, #1
 8007188:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800718c:	bf00      	nop
    }

    if (pclk != 0U)
 800718e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007190:	2b00      	cmp	r3, #0
 8007192:	d028      	beq.n	80071e6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007198:	4a10      	ldr	r2, [pc, #64]	; (80071dc <UART_SetConfig+0x5c4>)
 800719a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800719e:	461a      	mov	r2, r3
 80071a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a2:	fbb3 f2f2 	udiv	r2, r3, r2
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	085b      	lsrs	r3, r3, #1
 80071ac:	441a      	add	r2, r3
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80071b6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071b8:	6a3b      	ldr	r3, [r7, #32]
 80071ba:	2b0f      	cmp	r3, #15
 80071bc:	d910      	bls.n	80071e0 <UART_SetConfig+0x5c8>
 80071be:	6a3b      	ldr	r3, [r7, #32]
 80071c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071c4:	d20c      	bcs.n	80071e0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80071c6:	6a3b      	ldr	r3, [r7, #32]
 80071c8:	b29a      	uxth	r2, r3
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	60da      	str	r2, [r3, #12]
 80071d0:	e009      	b.n	80071e6 <UART_SetConfig+0x5ce>
 80071d2:	bf00      	nop
 80071d4:	40008000 	.word	0x40008000
 80071d8:	00f42400 	.word	0x00f42400
 80071dc:	0800799c 	.word	0x0800799c
      }
      else
      {
        ret = HAL_ERROR;
 80071e0:	2301      	movs	r3, #1
 80071e2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	2201      	movs	r2, #1
 80071ea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	2201      	movs	r2, #1
 80071f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	2200      	movs	r2, #0
 80071fa:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	2200      	movs	r2, #0
 8007200:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007202:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007206:	4618      	mov	r0, r3
 8007208:	3730      	adds	r7, #48	; 0x30
 800720a:	46bd      	mov	sp, r7
 800720c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007210 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007210:	b480      	push	{r7}
 8007212:	b083      	sub	sp, #12
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800721c:	f003 0308 	and.w	r3, r3, #8
 8007220:	2b00      	cmp	r3, #0
 8007222:	d00a      	beq.n	800723a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	430a      	orrs	r2, r1
 8007238:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800723e:	f003 0301 	and.w	r3, r3, #1
 8007242:	2b00      	cmp	r3, #0
 8007244:	d00a      	beq.n	800725c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	430a      	orrs	r2, r1
 800725a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007260:	f003 0302 	and.w	r3, r3, #2
 8007264:	2b00      	cmp	r3, #0
 8007266:	d00a      	beq.n	800727e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	430a      	orrs	r2, r1
 800727c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007282:	f003 0304 	and.w	r3, r3, #4
 8007286:	2b00      	cmp	r3, #0
 8007288:	d00a      	beq.n	80072a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	430a      	orrs	r2, r1
 800729e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072a4:	f003 0310 	and.w	r3, r3, #16
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d00a      	beq.n	80072c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	689b      	ldr	r3, [r3, #8]
 80072b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	430a      	orrs	r2, r1
 80072c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072c6:	f003 0320 	and.w	r3, r3, #32
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d00a      	beq.n	80072e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	430a      	orrs	r2, r1
 80072e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d01a      	beq.n	8007326 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	430a      	orrs	r2, r1
 8007304:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800730a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800730e:	d10a      	bne.n	8007326 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	430a      	orrs	r2, r1
 8007324:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800732a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800732e:	2b00      	cmp	r3, #0
 8007330:	d00a      	beq.n	8007348 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	430a      	orrs	r2, r1
 8007346:	605a      	str	r2, [r3, #4]
  }
}
 8007348:	bf00      	nop
 800734a:	370c      	adds	r7, #12
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr

08007354 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b098      	sub	sp, #96	; 0x60
 8007358:	af02      	add	r7, sp, #8
 800735a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2200      	movs	r2, #0
 8007360:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007364:	f7fa ff84 	bl	8002270 <HAL_GetTick>
 8007368:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f003 0308 	and.w	r3, r3, #8
 8007374:	2b08      	cmp	r3, #8
 8007376:	d12f      	bne.n	80073d8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007378:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800737c:	9300      	str	r3, [sp, #0]
 800737e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007380:	2200      	movs	r2, #0
 8007382:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 f88e 	bl	80074a8 <UART_WaitOnFlagUntilTimeout>
 800738c:	4603      	mov	r3, r0
 800738e:	2b00      	cmp	r3, #0
 8007390:	d022      	beq.n	80073d8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800739a:	e853 3f00 	ldrex	r3, [r3]
 800739e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80073a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073a6:	653b      	str	r3, [r7, #80]	; 0x50
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	461a      	mov	r2, r3
 80073ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073b0:	647b      	str	r3, [r7, #68]	; 0x44
 80073b2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80073b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80073b8:	e841 2300 	strex	r3, r2, [r1]
 80073bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80073be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d1e6      	bne.n	8007392 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2220      	movs	r2, #32
 80073c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073d4:	2303      	movs	r3, #3
 80073d6:	e063      	b.n	80074a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f003 0304 	and.w	r3, r3, #4
 80073e2:	2b04      	cmp	r3, #4
 80073e4:	d149      	bne.n	800747a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073e6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80073ea:	9300      	str	r3, [sp, #0]
 80073ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073ee:	2200      	movs	r2, #0
 80073f0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 f857 	bl	80074a8 <UART_WaitOnFlagUntilTimeout>
 80073fa:	4603      	mov	r3, r0
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d03c      	beq.n	800747a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007408:	e853 3f00 	ldrex	r3, [r3]
 800740c:	623b      	str	r3, [r7, #32]
   return(result);
 800740e:	6a3b      	ldr	r3, [r7, #32]
 8007410:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007414:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	461a      	mov	r2, r3
 800741c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800741e:	633b      	str	r3, [r7, #48]	; 0x30
 8007420:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007422:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007424:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007426:	e841 2300 	strex	r3, r2, [r1]
 800742a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800742c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800742e:	2b00      	cmp	r3, #0
 8007430:	d1e6      	bne.n	8007400 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	3308      	adds	r3, #8
 8007438:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	e853 3f00 	ldrex	r3, [r3]
 8007440:	60fb      	str	r3, [r7, #12]
   return(result);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f023 0301 	bic.w	r3, r3, #1
 8007448:	64bb      	str	r3, [r7, #72]	; 0x48
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	3308      	adds	r3, #8
 8007450:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007452:	61fa      	str	r2, [r7, #28]
 8007454:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007456:	69b9      	ldr	r1, [r7, #24]
 8007458:	69fa      	ldr	r2, [r7, #28]
 800745a:	e841 2300 	strex	r3, r2, [r1]
 800745e:	617b      	str	r3, [r7, #20]
   return(result);
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d1e5      	bne.n	8007432 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2220      	movs	r2, #32
 800746a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007476:	2303      	movs	r3, #3
 8007478:	e012      	b.n	80074a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2220      	movs	r2, #32
 800747e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2220      	movs	r2, #32
 8007486:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2200      	movs	r2, #0
 8007494:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2200      	movs	r2, #0
 800749a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800749e:	2300      	movs	r3, #0
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3758      	adds	r7, #88	; 0x58
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b084      	sub	sp, #16
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	60f8      	str	r0, [r7, #12]
 80074b0:	60b9      	str	r1, [r7, #8]
 80074b2:	603b      	str	r3, [r7, #0]
 80074b4:	4613      	mov	r3, r2
 80074b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074b8:	e04f      	b.n	800755a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074ba:	69bb      	ldr	r3, [r7, #24]
 80074bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074c0:	d04b      	beq.n	800755a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074c2:	f7fa fed5 	bl	8002270 <HAL_GetTick>
 80074c6:	4602      	mov	r2, r0
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	1ad3      	subs	r3, r2, r3
 80074cc:	69ba      	ldr	r2, [r7, #24]
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d302      	bcc.n	80074d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80074d2:	69bb      	ldr	r3, [r7, #24]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d101      	bne.n	80074dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80074d8:	2303      	movs	r3, #3
 80074da:	e04e      	b.n	800757a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f003 0304 	and.w	r3, r3, #4
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d037      	beq.n	800755a <UART_WaitOnFlagUntilTimeout+0xb2>
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	2b80      	cmp	r3, #128	; 0x80
 80074ee:	d034      	beq.n	800755a <UART_WaitOnFlagUntilTimeout+0xb2>
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	2b40      	cmp	r3, #64	; 0x40
 80074f4:	d031      	beq.n	800755a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	69db      	ldr	r3, [r3, #28]
 80074fc:	f003 0308 	and.w	r3, r3, #8
 8007500:	2b08      	cmp	r3, #8
 8007502:	d110      	bne.n	8007526 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	2208      	movs	r2, #8
 800750a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800750c:	68f8      	ldr	r0, [r7, #12]
 800750e:	f000 f838 	bl	8007582 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2208      	movs	r2, #8
 8007516:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2200      	movs	r2, #0
 800751e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	e029      	b.n	800757a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	69db      	ldr	r3, [r3, #28]
 800752c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007530:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007534:	d111      	bne.n	800755a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800753e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007540:	68f8      	ldr	r0, [r7, #12]
 8007542:	f000 f81e 	bl	8007582 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2220      	movs	r2, #32
 800754a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2200      	movs	r2, #0
 8007552:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007556:	2303      	movs	r3, #3
 8007558:	e00f      	b.n	800757a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	69da      	ldr	r2, [r3, #28]
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	4013      	ands	r3, r2
 8007564:	68ba      	ldr	r2, [r7, #8]
 8007566:	429a      	cmp	r2, r3
 8007568:	bf0c      	ite	eq
 800756a:	2301      	moveq	r3, #1
 800756c:	2300      	movne	r3, #0
 800756e:	b2db      	uxtb	r3, r3
 8007570:	461a      	mov	r2, r3
 8007572:	79fb      	ldrb	r3, [r7, #7]
 8007574:	429a      	cmp	r2, r3
 8007576:	d0a0      	beq.n	80074ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007578:	2300      	movs	r3, #0
}
 800757a:	4618      	mov	r0, r3
 800757c:	3710      	adds	r7, #16
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}

08007582 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007582:	b480      	push	{r7}
 8007584:	b095      	sub	sp, #84	; 0x54
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007592:	e853 3f00 	ldrex	r3, [r3]
 8007596:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800759a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800759e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	461a      	mov	r2, r3
 80075a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075a8:	643b      	str	r3, [r7, #64]	; 0x40
 80075aa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80075ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80075b0:	e841 2300 	strex	r3, r2, [r1]
 80075b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80075b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d1e6      	bne.n	800758a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	3308      	adds	r3, #8
 80075c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c4:	6a3b      	ldr	r3, [r7, #32]
 80075c6:	e853 3f00 	ldrex	r3, [r3]
 80075ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80075cc:	69fb      	ldr	r3, [r7, #28]
 80075ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075d2:	f023 0301 	bic.w	r3, r3, #1
 80075d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	3308      	adds	r3, #8
 80075de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80075e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80075e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075e8:	e841 2300 	strex	r3, r2, [r1]
 80075ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80075ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d1e3      	bne.n	80075bc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d118      	bne.n	800762e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	e853 3f00 	ldrex	r3, [r3]
 8007608:	60bb      	str	r3, [r7, #8]
   return(result);
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	f023 0310 	bic.w	r3, r3, #16
 8007610:	647b      	str	r3, [r7, #68]	; 0x44
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	461a      	mov	r2, r3
 8007618:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800761a:	61bb      	str	r3, [r7, #24]
 800761c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800761e:	6979      	ldr	r1, [r7, #20]
 8007620:	69ba      	ldr	r2, [r7, #24]
 8007622:	e841 2300 	strex	r3, r2, [r1]
 8007626:	613b      	str	r3, [r7, #16]
   return(result);
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d1e6      	bne.n	80075fc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2220      	movs	r2, #32
 8007632:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2200      	movs	r2, #0
 800763a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2200      	movs	r2, #0
 8007640:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007642:	bf00      	nop
 8007644:	3754      	adds	r7, #84	; 0x54
 8007646:	46bd      	mov	sp, r7
 8007648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764c:	4770      	bx	lr

0800764e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800764e:	b580      	push	{r7, lr}
 8007650:	b084      	sub	sp, #16
 8007652:	af00      	add	r7, sp, #0
 8007654:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800765a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2200      	movs	r2, #0
 8007660:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2200      	movs	r2, #0
 8007668:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800766c:	68f8      	ldr	r0, [r7, #12]
 800766e:	f7ff fabd 	bl	8006bec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007672:	bf00      	nop
 8007674:	3710      	adds	r7, #16
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}

0800767a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800767a:	b580      	push	{r7, lr}
 800767c:	b088      	sub	sp, #32
 800767e:	af00      	add	r7, sp, #0
 8007680:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	e853 3f00 	ldrex	r3, [r3]
 800768e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007696:	61fb      	str	r3, [r7, #28]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	461a      	mov	r2, r3
 800769e:	69fb      	ldr	r3, [r7, #28]
 80076a0:	61bb      	str	r3, [r7, #24]
 80076a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a4:	6979      	ldr	r1, [r7, #20]
 80076a6:	69ba      	ldr	r2, [r7, #24]
 80076a8:	e841 2300 	strex	r3, r2, [r1]
 80076ac:	613b      	str	r3, [r7, #16]
   return(result);
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d1e6      	bne.n	8007682 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2220      	movs	r2, #32
 80076b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f7f9 fd6e 	bl	80011a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076c8:	bf00      	nop
 80076ca:	3720      	adds	r7, #32
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}

080076d0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b083      	sub	sp, #12
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80076d8:	bf00      	nop
 80076da:	370c      	adds	r7, #12
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr

080076e4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b083      	sub	sp, #12
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80076ec:	bf00      	nop
 80076ee:	370c      	adds	r7, #12
 80076f0:	46bd      	mov	sp, r7
 80076f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f6:	4770      	bx	lr

080076f8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b083      	sub	sp, #12
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007700:	bf00      	nop
 8007702:	370c      	adds	r7, #12
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr

0800770c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800770c:	b480      	push	{r7}
 800770e:	b085      	sub	sp, #20
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800771a:	2b01      	cmp	r3, #1
 800771c:	d101      	bne.n	8007722 <HAL_UARTEx_DisableFifoMode+0x16>
 800771e:	2302      	movs	r3, #2
 8007720:	e027      	b.n	8007772 <HAL_UARTEx_DisableFifoMode+0x66>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2201      	movs	r2, #1
 8007726:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2224      	movs	r2, #36	; 0x24
 800772e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	681a      	ldr	r2, [r3, #0]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f022 0201 	bic.w	r2, r2, #1
 8007748:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007750:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	68fa      	ldr	r2, [r7, #12]
 800775e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2220      	movs	r2, #32
 8007764:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2200      	movs	r2, #0
 800776c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007770:	2300      	movs	r3, #0
}
 8007772:	4618      	mov	r0, r3
 8007774:	3714      	adds	r7, #20
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr

0800777e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800777e:	b580      	push	{r7, lr}
 8007780:	b084      	sub	sp, #16
 8007782:	af00      	add	r7, sp, #0
 8007784:	6078      	str	r0, [r7, #4]
 8007786:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800778e:	2b01      	cmp	r3, #1
 8007790:	d101      	bne.n	8007796 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007792:	2302      	movs	r3, #2
 8007794:	e02d      	b.n	80077f2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2201      	movs	r2, #1
 800779a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2224      	movs	r2, #36	; 0x24
 80077a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	681a      	ldr	r2, [r3, #0]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f022 0201 	bic.w	r2, r2, #1
 80077bc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	683a      	ldr	r2, [r7, #0]
 80077ce:	430a      	orrs	r2, r1
 80077d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 f850 	bl	8007878 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	68fa      	ldr	r2, [r7, #12]
 80077de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2220      	movs	r2, #32
 80077e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80077f0:	2300      	movs	r3, #0
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3710      	adds	r7, #16
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}

080077fa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80077fa:	b580      	push	{r7, lr}
 80077fc:	b084      	sub	sp, #16
 80077fe:	af00      	add	r7, sp, #0
 8007800:	6078      	str	r0, [r7, #4]
 8007802:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800780a:	2b01      	cmp	r3, #1
 800780c:	d101      	bne.n	8007812 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800780e:	2302      	movs	r3, #2
 8007810:	e02d      	b.n	800786e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2201      	movs	r2, #1
 8007816:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2224      	movs	r2, #36	; 0x24
 800781e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	681a      	ldr	r2, [r3, #0]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f022 0201 	bic.w	r2, r2, #1
 8007838:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	683a      	ldr	r2, [r7, #0]
 800784a:	430a      	orrs	r2, r1
 800784c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 f812 	bl	8007878 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	68fa      	ldr	r2, [r7, #12]
 800785a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2220      	movs	r2, #32
 8007860:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800786c:	2300      	movs	r3, #0
}
 800786e:	4618      	mov	r0, r3
 8007870:	3710      	adds	r7, #16
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
	...

08007878 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007878:	b480      	push	{r7}
 800787a:	b085      	sub	sp, #20
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007884:	2b00      	cmp	r3, #0
 8007886:	d108      	bne.n	800789a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2201      	movs	r2, #1
 800788c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2201      	movs	r2, #1
 8007894:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007898:	e031      	b.n	80078fe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800789a:	2308      	movs	r3, #8
 800789c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800789e:	2308      	movs	r3, #8
 80078a0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	0e5b      	lsrs	r3, r3, #25
 80078aa:	b2db      	uxtb	r3, r3
 80078ac:	f003 0307 	and.w	r3, r3, #7
 80078b0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	689b      	ldr	r3, [r3, #8]
 80078b8:	0f5b      	lsrs	r3, r3, #29
 80078ba:	b2db      	uxtb	r3, r3
 80078bc:	f003 0307 	and.w	r3, r3, #7
 80078c0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80078c2:	7bbb      	ldrb	r3, [r7, #14]
 80078c4:	7b3a      	ldrb	r2, [r7, #12]
 80078c6:	4911      	ldr	r1, [pc, #68]	; (800790c <UARTEx_SetNbDataToProcess+0x94>)
 80078c8:	5c8a      	ldrb	r2, [r1, r2]
 80078ca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80078ce:	7b3a      	ldrb	r2, [r7, #12]
 80078d0:	490f      	ldr	r1, [pc, #60]	; (8007910 <UARTEx_SetNbDataToProcess+0x98>)
 80078d2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80078d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80078d8:	b29a      	uxth	r2, r3
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80078e0:	7bfb      	ldrb	r3, [r7, #15]
 80078e2:	7b7a      	ldrb	r2, [r7, #13]
 80078e4:	4909      	ldr	r1, [pc, #36]	; (800790c <UARTEx_SetNbDataToProcess+0x94>)
 80078e6:	5c8a      	ldrb	r2, [r1, r2]
 80078e8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80078ec:	7b7a      	ldrb	r2, [r7, #13]
 80078ee:	4908      	ldr	r1, [pc, #32]	; (8007910 <UARTEx_SetNbDataToProcess+0x98>)
 80078f0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80078f2:	fb93 f3f2 	sdiv	r3, r3, r2
 80078f6:	b29a      	uxth	r2, r3
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80078fe:	bf00      	nop
 8007900:	3714      	adds	r7, #20
 8007902:	46bd      	mov	sp, r7
 8007904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007908:	4770      	bx	lr
 800790a:	bf00      	nop
 800790c:	080079b4 	.word	0x080079b4
 8007910:	080079bc 	.word	0x080079bc

08007914 <__libc_init_array>:
 8007914:	b570      	push	{r4, r5, r6, lr}
 8007916:	4d0d      	ldr	r5, [pc, #52]	; (800794c <__libc_init_array+0x38>)
 8007918:	4c0d      	ldr	r4, [pc, #52]	; (8007950 <__libc_init_array+0x3c>)
 800791a:	1b64      	subs	r4, r4, r5
 800791c:	10a4      	asrs	r4, r4, #2
 800791e:	2600      	movs	r6, #0
 8007920:	42a6      	cmp	r6, r4
 8007922:	d109      	bne.n	8007938 <__libc_init_array+0x24>
 8007924:	4d0b      	ldr	r5, [pc, #44]	; (8007954 <__libc_init_array+0x40>)
 8007926:	4c0c      	ldr	r4, [pc, #48]	; (8007958 <__libc_init_array+0x44>)
 8007928:	f000 f820 	bl	800796c <_init>
 800792c:	1b64      	subs	r4, r4, r5
 800792e:	10a4      	asrs	r4, r4, #2
 8007930:	2600      	movs	r6, #0
 8007932:	42a6      	cmp	r6, r4
 8007934:	d105      	bne.n	8007942 <__libc_init_array+0x2e>
 8007936:	bd70      	pop	{r4, r5, r6, pc}
 8007938:	f855 3b04 	ldr.w	r3, [r5], #4
 800793c:	4798      	blx	r3
 800793e:	3601      	adds	r6, #1
 8007940:	e7ee      	b.n	8007920 <__libc_init_array+0xc>
 8007942:	f855 3b04 	ldr.w	r3, [r5], #4
 8007946:	4798      	blx	r3
 8007948:	3601      	adds	r6, #1
 800794a:	e7f2      	b.n	8007932 <__libc_init_array+0x1e>
 800794c:	080079cc 	.word	0x080079cc
 8007950:	080079cc 	.word	0x080079cc
 8007954:	080079cc 	.word	0x080079cc
 8007958:	080079d4 	.word	0x080079d4

0800795c <memset>:
 800795c:	4402      	add	r2, r0
 800795e:	4603      	mov	r3, r0
 8007960:	4293      	cmp	r3, r2
 8007962:	d100      	bne.n	8007966 <memset+0xa>
 8007964:	4770      	bx	lr
 8007966:	f803 1b01 	strb.w	r1, [r3], #1
 800796a:	e7f9      	b.n	8007960 <memset+0x4>

0800796c <_init>:
 800796c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800796e:	bf00      	nop
 8007970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007972:	bc08      	pop	{r3}
 8007974:	469e      	mov	lr, r3
 8007976:	4770      	bx	lr

08007978 <_fini>:
 8007978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800797a:	bf00      	nop
 800797c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800797e:	bc08      	pop	{r3}
 8007980:	469e      	mov	lr, r3
 8007982:	4770      	bx	lr
